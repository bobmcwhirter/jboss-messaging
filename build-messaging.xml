<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
        <!ENTITY libraries SYSTEM "thirdparty/libraries.ent">
        ]>

<!-- =========================================================================================== -->
<!--                                                                                             -->
<!-- JBoss, Home of Professional Open Source                                                     -->
<!-- Copyright 2005, JBoss Inc., and individual contributors as indicated                        -->
<!-- by the @authors tag. See the copyright.txt in the distribution for a                        -->
<!-- full listing of individual contributors.                                                    -->
<!--                                                                                             -->
<!-- This is free software; you can redistribute it and/or modify it                             -->
<!-- under the terms of the GNU Lesser General Public License as                                 -->
<!-- published by the Free Software Foundation; either version 2.1 of                            -->
<!-- the License, or (at your option) any later version.                                         -->
<!--                                                                                             -->
<!-- This software is distributed in the hope that it will be useful,                            -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of                              -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                            -->
<!-- Lesser General Public License for more details.                                             -->
<!--                                                                                             -->
<!-- You should have received a copy of the GNU Lesser General Public                            -->
<!-- License along with this software; if not, write to the Free                                 -->
<!-- Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA                          -->
<!-- 02110-1301 USA, or see the FSF site: http://www.fsf.org.                                    -->
<!--                                                                                             -->
<!-- =========================================================================================== -->


<!-- =========================================================================================== -->
<!--                                                                                             -->
<!-- $Id: build.xml 4036 2008-04-11 12:43:24Z ataylor $ -->
<!--                                                                                             -->
<!-- =========================================================================================== -->


<project default="jar" name="JBoss Messaging">

   <!--
        Module name(s) & version.
   -->

   <property name="module.name" value="messaging"/>

   <property name="messaging.version.major" value="2"/>
   <property name="messaging.version.minor" value="0"/>
   <property name="messaging.version.micro" value="0"/>
   <property name="messaging.version.suffix" value="alpha1"/>
   <property name="messaging.version.tag" value="alpha1"/>
   <property name="messaging.version.revision" value="0"/>
   <property name="messaging.version.incrementing" value="100"/>
   <property name="messaging.version.name" value="Stilton"/>
   <property name="messaging.version.svnurl" value="https://svn.jboss.org/repos/messaging/trunk"/>
   <property name="messaging.version.string"
             value="${messaging.version.major}.${messaging.version.minor}.${messaging.version.micro}.${messaging.version.suffix} (${messaging.version.name}, ${messaging.version.incrementing})"/>
   <property name="module.version"
             value="${messaging.version.major}.${messaging.version.minor}.${messaging.version.revision}.${messaging.version.tag}"/>


   <!--source and build dirs-->
   <property name="build.dir" value="build"/>
   <property name="build.classes.dir" value="${build.dir}/classes"/>
   <property name="build.jars.dir" value="${build.dir}/jars"/>
   <property name="build.src.dir" value="${build.dir}/src"/>
   <property name="src.dir" value="src"/>
   <property name="src.main.dir" value="${src.dir}/main"/>
   <property name="src.config.dir" value="${src.dir}/config"/>
   <property name="src.bin.dir" value="${src.dir}/bin"/>
   <property name="doc.dir" value="docs"/>
   <property name="licenses.dir" value="licenses"/>
   <property name="doc.examples.dir" value="examples"/>
   <property name="doc.build.dir" value="${doc.dir}/userguide/build"/>
   <property name="build.api.dir" value="${build.dir}/api"/>
   <property name="native.bin.dir" value="native/bin"/>
   <property name="examples.dir" value="examples"/>

   <property name="build.artifact"
             value="${module.name}-${messaging.version.major}.${messaging.version.minor}.${messaging.version.micro}.${messaging.version.suffix}"/>
   <property name="build.distro.dir"
             value="${build.dir}/${build.artifact}"/>
   <property name="build.distro.lib.dir" value="${build.distro.dir}/lib"/>
   <property name="build.distro.config.dir" value="${build.distro.dir}/config"/>
   <property name="build.distro.bin.dir" value="${build.distro.dir}/bin"/>
   <property name="build.distro.api.dir" value="${build.distro.dir}/docs/api"/>
   <property name="build.distro.examples.dir" value="${build.distro.dir}/examples"/>
   <property name="build.distro.licenses.dir" value="${build.distro.dir}/licenses"/>

   <!-- ======================================================================================== -->
   <!-- Thirdparty Dependency Definitions                                                        -->
   <!-- ======================================================================================== -->

   <property name="project.thirdparty" value="thirdparty"/>
   <property name="sun.javacc.lib" value="${project.thirdparty}/sun-javacc/lib/"/>
   &libraries;

   <!--
       This module is based on Java 1.5
   -->

   <property name="javac.target" value="1.5"/>
   <property name="javac.source" value="1.5"/>

   <property name="javac.debug" value="true"/>
   <property name="javac.optimize" value="false"/>
   <property name="javac.depend" value="false"/>
   <property name="javac.verbose" value="false"/>
   <property name="javac.deprecation" value="true"/>
   <property name="javac.include.ant.runtime" value="false"/>
   <property name="javac.include.java.runtime" value="true"/>
   <property name="javac.fail.onerror" value="true"/>

   <!--
      test properties
   -->

   <property name="test.dir" value="tests"/>
   <property name="test.build.dir" value="${test.dir}/build"/>
   <property name="test.src.dir" value="${test.dir}/src"/>
   <property name="test-mask" value="*Test"/>
   <property name="test.classes.dir" value="${test.build.dir}/classes"/>
   <property name="test.output.dir" value="${test.dir}/build"/>
   <property name="test.reports.dir" value="${test.output.dir}/reports"/>
   <property name="test.stylesheets.dir" value="${test.output.dir}/stylesheets"/>
   <property name="test.src.stylesheets.dir" value="${test.src.dir}/stylesheets"/>
   <property name="test.jms.dir" value="${test.dir}/jms-tests"/>
   <property name="test.jms.build.dir" value="${test.jms.dir}/build"/>
   <property name="test.jms.src.dir" value="${test.jms.dir}/src"/>
   <property name="test.jms.classes.dir" value="${test.jms.dir}/build/classes"/>
   <property name="disable.invm" value="false"/>

   <!--
        JUnit configuration (values specified in ./build.properties have priority)
   -->

   <property name="junit.printsummary" value="true"/>
   <property name="junit.haltonerror" value="false"/>
   <property name="junit.haltonfailure" value="false"/>
   <property name="junit.fork" value="true"/>
   <property name="junit.includeantruntime" value="true"/>
   <property name="junit.timeout" value="5400000"/>
   <!-- 90 mins -->
   <property name="clustering.junit.timeout" value="9000000"/>
   <!-- 150 mins -->
   <property name="clustering.stress.junit.timeout" value="5400000"/>
   <!-- 90 mins -->
   <property name="stress.junit.timeout" value="5400000"/>
   <!-- 90 mins -->
   <property name="bridge.junit.timeout" value="5400000"/>
   <!-- 90 mins -->

   <property name="junit.showoutput" value="true"/>
   <property name="junit.jvm" value=""/>
   <property name="junit.jvm.options" value=""/>
   <property name="junit.formatter.usefile" value="true"/>
   <property name="junit.batchtest.todir" value="${test.reports.dir}"/>
   <property name="junit.batchtest.haltonerror" value="false"/>
   <property name="junit.batchtest.haltonfailure" value="false"/>
   <property name="junit.batchtest.fork" value="true"/>
   <property name="junit.test.haltonfailure" value="false"/>
   <property name="junit.test.haltonerror" value="false"/>

   <!--classpaths-->
   <path id="core.compilation.classpath">
      <path refid="jboss.common.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="jboss.microcontainer.classpath"/>   	
      <path refid="jboss.jbosssx.client.classpath"/>
      <path refid="jboss.jboss.security.spi.classpath"/>
      <path refid="jboss.jboss.jaspi.api.classpath"/>
      <path refid="jgroups.jgroups.classpath"/>
      <path refid="apache.mina.classpath"/>
      <path refid="netty.netty.classpath"/>
      <path refid="jpa.api.classpath"/>
      <path location="${build.classes.dir}"/>
   </path>
	
   <path id="jms.compilation.classpath">
      <path refid="jboss.jboss.javaee.classpath"/>
      <path refid="jboss.jbossts14.classpath"/>
      <path refid="jboss.integration.classpath"/>
   </path>

   <path id="javadoc.classpath">
      <path refid="core.compilation.classpath"/>
      <path refid="jms.compilation.classpath"/>
      <path location="${build.classes.dir}"/>
   </path>

   <path id="test.compilation.classpath">
      <path refid="core.compilation.classpath"/>
      <path refid="jms.compilation.classpath"/>
      <path location="${build.jars.dir}/jboss-${module.name}.jar"/>
      <path refid="junit.junit.classpath"/>
      <path refid="jboss.profiler.jvmti.classpath"/>
      <path refid="jboss.test14.classpath"/>
      <path refid="jboss.jboss.retro.classpath"/>
   	  <path refid="easymock.easymock.classpath" />
      <path refid="easymock.classextension.classpath" />
   </path>

   <path id="jms.test.compilation.classpath">
      <path refid="core.compilation.classpath"/>
      <path refid="jms.compilation.classpath"/>
      <path location="${build.jars.dir}/jboss-${module.name}.jar"/>
      <path refid="junit.junit.classpath"/>
      <path refid="jboss.profiler.jvmti.classpath"/>
      <path refid="jboss.test14.classpath"/>
      <path refid="jboss.jboss.retro.classpath"/>
      <path refid="apache.ant.classpath"/>
      <path refid="easymock.easymock.classpath" />
   </path>

   <path id="unit.test.execution.classpath">
      <pathelement location="${test.dir}/config"/>
      <pathelement location="${test.dir}/tmpfiles"/>
      <pathelement location="${test.classes.dir}"/>
      <pathelement location="${src.config.dir}"/>
      <path refid="test.compilation.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="slf4j.api.classpath"/>
      <path refid="slf4j.log4j.classpath"/>
   	<path refid="cglib.classpath" />
      <path refid="jboss.common.core.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="trove.trove.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="jboss.jbossxb.classpath"/>
      <path refid="apache.xerces.classpath"/>
   </path>

   <path id="jms.test.execution.classpath">
      <pathelement location="${src.config.dir}"/>
      <pathelement location="${test.jms.dir}/config"/>
      <pathelement location="${test.jms.classes.dir}"/>
      <path refid="jms.test.compilation.classpath"/>
      <path refid="trove.trove.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="dom4j.dom4j.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="apache.logging.classpath"/>
      <path refid="apache.xerces.classpath"/>
      <path refid="jboss.jbossxb.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.microcontainer.classpath"/>
      <path refid="jboss.jboss.security.spi.classpath"/>
      <path refid="jboss.jboss.jaspi.api.classpath"/>
      <path refid="jboss.integration.classpath"/>
      <path refid="jboss.jbosssx.client.classpath"/>
      <path refid="jboss.jboss.javaee.classpath"/>
      <path refid="jboss.jbossts14.classpath"/>
      <path refid="jboss.jbossxb.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.common.core.classpath"/>
      <path refid="jboss.jnpserver.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="slf4j.api.classpath"/>
      <path refid="slf4j.log4j.classpath"/>
   </path>
   
   <!--
        Setting "external.project" to true makes jbossbuild use the current directory, and not its
        parent, as project root. DO NOT change this.
   -->
   <property name="external.project" value="true"/>
   <!--
        Setting "nodownload" to true inhibits downloading of up-to-date dependencies.
   -->
   <property name="nodownload" value="false"/>

   <target name="createthirdparty" unless="inhibit.downloads" depends="check.inhibit.downloads">
      <ant antfile="build-thirdparty.xml" target="generate-libraries-ent"/>
   </target>

   <target name="check.inhibit.downloads">
      <condition property="inhibit.downloads">
         <or>
            <uptodate property="dependencies.current"
                      srcfile="build-thirdparty.xml"
                      targetfile="./thirdparty/libraries.ent"/>
            <istrue value="${nodownload}"/>
         </or>
      </condition>
   </target>

   <target name="clean">
      <delete dir="${build.dir}"/>
      <delete dir="${test.build.dir}"/>
      <delete dir="${test.output.dir}"/>
      <delete dir="${test.jms.build.dir}"/>
   </target>

   <target name="init" depends="createthirdparty">
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${build.classes.dir}"/>
      <mkdir dir="${build.jars.dir}"/>
      <mkdir dir="${build.src.dir}"/>
   </target>

   <target name="compile" depends="compile-jms" />

   <target name="compile-core" depends="init">
      <mkdir dir="${build.src.dir}/org/jboss/messaging/core/filter/impl"/>
      <echo message="${sun.javacc.lib}"/>
      <javacc target="${src.main.dir}/org/jboss/messaging/core/filter/impl/FilterParser.jj"
	           outputdirectory="${build.src.dir}/org/jboss/messaging/core/filter/impl"
              javacchome="${sun.javacc.lib}"
      	     static="false"/>
   	<javac destdir="${build.classes.dir}"
             target="${javac.target}"
             source="${javac.source}"
             optimize="${javac.optimize}"
             debug="${javac.debug}"
             depend="${javac.depend}"
             verbose="${javac.verbose}"
             deprecation="${javac.deprecation}"
             includeAntRuntime="${javac.include.ant.runtime}"
             includeJavaRuntime="${javac.include.java.runtime}"
             failonerror="${javac.fail.onerror}">
         <src>
            <pathelement path="${build.src.dir}"/>
            <pathelement path="${src.main.dir}"/>
         </src>
         <include name="**/messaging/microcontainer/**/*.java"/>
         <include name="**/messaging/core/**/*.java"/>
         <include name="**/messaging/util/**/*.java"/>
         <classpath refid="core.compilation.classpath"/>
      </javac>
   	<javah class="org.jboss.messaging.core.asyncio.impl.AsynchronousFileImpl"
   	       classpathref="core.compilation.classpath" destdir="./native/src"/>

   	<copy file="${src.config.dir}/jbm-connector-factories.properties"
   	      tofile="${build.classes.dir}/jbm-connector-factories.properties"/>
      <copy file="${src.config.dir}/version.properties"
         	tofile="${build.classes.dir}/version.properties"/>
      
      <!--
      <echo message="messaging.version.versionName=${messaging.version.name}${line.separator}messaging.version.majorVersion=${messaging.version.major}${line.separator}messaging.version.minorVersion=${messaging.version.minor}${line.separator}messaging.version.microVersion=${messaging.version.micro}${line.separator}messaging.version.incrementingVersion=${messaging.version.incrementing}${line.separator}messaging.version.versionSuffix=${messaging.version.suffix}${line.separator}"
      	    file="${build.classes.dir}/version.properties"/>
      	    -->
   </target>

   <target name="compile-jms" depends="compile-core">
   	  <javac destdir="${build.classes.dir}"
             target="${javac.target}"
             source="${javac.source}"
             optimize="${javac.optimize}"
             debug="${javac.debug}"
             depend="${javac.depend}"
             verbose="${javac.verbose}"
             deprecation="${javac.deprecation}"
             includeAntRuntime="${javac.include.ant.runtime}"
             includeJavaRuntime="${javac.include.java.runtime}"
             failonerror="${javac.fail.onerror}">
         <src>
            <pathelement path="${build.src.dir}"/>
            <pathelement path="${src.main.dir}"/>
         </src>
         <include name="**/jms/**/*.java"/>
         <classpath refid="jms.compilation.classpath"/>
         <classpath refid="core.compilation.classpath"/>
      </javac>
   </target>
	
   <target name="build-native">
      <exec dir="native" executable="make">
         <arg line="clean"/>
      </exec>
      <exec dir="native" executable="bash">
         <arg line="bootstrap"/>
      </exec>
   </target>
   <!-- ======================================================================================== -->
   <!-- Archival Tasks                                                                           -->
   <!-- ======================================================================================== -->

   <target name="jar" depends="compile">

      <jar jarfile="${build.jars.dir}/jboss-${module.name}.jar">
         <fileset dir="${build.classes.dir}" includes="**"/>
         <manifest>
            <attribute name="JBossMessaging-Version" value="${messaging.version.string}"/>
            <attribute name="JBossMessaging-SVN-URL" value="${messaging.version.svnurl}"/>
         </manifest>
      </jar>

   </target>

   <target name="client-jar" depends="compile">      
      <jar jarfile="${build.jars.dir}/jboss-${module.name}-client.jar">
         <fileset dir="${build.classes.dir}">
            <include name="version.properties"/>
            <include name="jbm-connector-factories.properties"/>
            <include name="org/jboss/messaging/jms/**/*.class"/>
            <include name="org/jboss/messaging/core/client/**/*.class"/>
            <include name="org/jboss/messaging/core/exception/**/*.class"/>
            <include name="org/jboss/messaging/core/logging/**/*.class"/>
            <include name="org/jboss/messaging/core/remoting/**/*.class"/>
            <include name="org/jboss/messaging/util/**/*.class"/>
            <include name="org/jboss/messaging/core/config/**/*.class"/>
            <include name="org/jboss/messaging/core/list/**/*.class"/>
            <include name="org/jboss/messaging/core/message/**/*.class"/>
            <include name="org/jboss/messaging/core/version/**/*.class"/>
            <include name="org/jboss/messaging/core/server/JournalType.class"/>
            <include name="org/jboss/messaging/core/server/CommandManager.class"/>
            <include name="org/jboss/messaging/core/server/impl/CommandManagerImpl.class"/>
            <include name="org/jboss/messaging/core/journal/EncodingSupport.class"/>
            <include name="org/jboss/messaging/core/server/ServerMessage.class"/>
            <include name="org/jboss/messaging/core/ping/**/*.class"/>
         </fileset>
      </jar>

   </target>
   <!-- ======================================================================================== -->
   <!-- Distro Tasks                                                                           -->
   <!-- ======================================================================================== -->


   <target name="distro" depends="jar, client-jar">

      <mkdir dir="${build.distro.dir}"/>
      <mkdir dir="${build.distro.lib.dir}"/>
      <mkdir dir="${build.distro.config.dir}"/>
      <mkdir dir="${build.distro.bin.dir}"/>
      <mkdir dir="${build.distro.api.dir}"/>
      <mkdir dir="${build.distro.licenses.dir}"/>

      <copy todir="${build.distro.lib.dir}">
         <fileset dir="${build.jars.dir}">
            <include name="jboss-${module.name}-client.jar"/>
            <include name="jboss-${module.name}.jar"/>
         </fileset>
         <fileset dir="${jboss.microcontainer.lib}">
            <include name="jboss-container.jar"/>
            <include name="jboss-kernel.jar"/>
            <include name="jboss-dependency.jar"/>
            <include name="jboss-aop-mc-int.jar"/>
         </fileset>
         <fileset dir="${jboss.aop.lib}">
            <include name="jboss-aop-jdk50.jar"/>
         </fileset>
         <fileset dir="${jboss.jboss.javaee.lib}">
            <include name="jboss-javaee.jar"/>
         </fileset>
         <fileset dir="${jboss.jboss.common.logging.spi.lib}">
            <include name="jboss-common-logging-spi.jar"/>
         </fileset>
         <fileset dir="${jboss.jbossxb.lib}">
            <include name="jboss-xml-binding.jar"/>
         </fileset>
         <fileset dir="${jboss.integration.lib}">
            <include name="jboss-transaction-spi.jar"/>
         </fileset>
         <fileset dir="${jboss.jboss.security.spi.lib}">
            <include name="jboss-security-spi.jar"/>
         </fileset>
         <fileset dir="${jboss.jboss.jaspi.api.lib}">
            <include name="jboss-jaspi-api.jar"/>
         </fileset>
         <fileset dir="${jboss.jbosssx.client.lib}">
            <include name="jbosssx-client.jar"/>
         </fileset>
         <fileset dir="${jboss.common.core.lib}">
            <include name="jboss-common-core.jar"/>
         </fileset>
         <fileset dir="${apache.xerces.lib}">
            <include name="xercesImpl.jar"/>
         </fileset>
         <fileset dir="${apache.logging.lib}">
            <include name="commons-logging.jar"/>
         </fileset>
         <fileset dir="${jboss.jboss.common.logging.spi.lib}">
            <include name="jboss-common-logging-spi.jar"/>
         </fileset>
         <fileset dir="${apache.log4j.lib}">
            <include name="log4j.jar"/>
         </fileset>
         <fileset dir="${jboss.jbossts14.lib}">
            <include name="jbossjta.jar"/>
            <include name="jbossts-common.jar"/>
            <include name="jbossjta-integration.jar"/>
         </fileset>
         <fileset dir="${trove.lib}">
            <include name="trove.jar"/>
         </fileset>
         <fileset dir="${javassist.lib}">
            <include name="javassist.jar"/>
         </fileset>
         <fileset dir="${jboss.jnpserver.lib}">
            <include name="jnpserver.jar"/>
         </fileset>
         <fileset dir="${apache.mina.lib}">
            <include name="mina-core-2.0.0-M3-20080730.120633-1.jar"/>
         </fileset>
         <fileset dir="${netty.lib}">
            <include name="netty-3.0.0.CR1.jar"/>
         </fileset>
         <fileset dir="${slf4j.api.lib}">
            <include name="slf4j-api-1.4.3.jar"/>
         </fileset>
         <fileset dir="${slf4j.log4j.lib}">
            <include name="slf4j-log4j12.jar"/>
         </fileset>
      </copy>

      <copy todir="${build.distro.config.dir}">
         <fileset dir="${src.config.dir}">
            <include name="*.xml"/>
            <include name="jndi.properties"/>
         </fileset>
         <fileset dir="${test.dir}/config">
            <include name="messaging.keystore"/>
            <include name="messaging.truststore"/>
         </fileset>
      </copy>
      <copy todir="${build.distro.bin.dir}">
         <fileset dir="${src.bin.dir}">
            <include name="run.sh"/>
            <include name="run.bat"/>
         </fileset>
      </copy>

      <copy todir="${build.distro.bin.dir}">
         <fileset dir="${native.bin.dir}">
            <include name="*.so"/>
         </fileset>
      </copy>

      <antcall target="userdoc"/>
      <copy todir="${build.distro.dir}/docs/userguide">
         <fileset dir="${doc.build.dir}">
            <include name="**"/>
         </fileset>
      </copy>
      <antcall target="javadoc"/>
      <copy todir="${build.distro.api.dir}/">
         <fileset dir="${build.api.dir}">
            <include name="**"/>
         </fileset>
      </copy>

      <copy todir="${build.distro.licenses.dir}/">
         <fileset dir="${licenses.dir}">
            <include name="**"/>
         </fileset>
      </copy>

      <mkdir dir="${build.distro.examples.dir}"/>
      <copy todir="${build.distro.examples.dir}">
         <fileset dir="${doc.examples.dir}">
            <exclude name="build.properties"/>
            <exclude name="**/build/**"/>
         </fileset>
      </copy>
      <echo message="lib.dir=../../lib${line.separator}client.jar=../../lib/jboss-messaging-client.jar${line.separator}config.dir=../../config${line.separator}server.jar=../../lib/jboss-messaging.jar"
            file="${build.distro.examples.dir}/build.properties"/>
      <echo message="java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory${line.separator}java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces"
            file="${build.distro.config.dir}/jndi.properties"/>

      <zip basedir="${build.dir}"
           destfile="${build.dir}/${build.artifact}.zip">
         <include name="${build.artifact}/**"/>
         <!-- add run.sh using a zipfileset to preserve its file permission -->
         <exclude name="${build.artifact}/bin/run.sh"/>
         <zipfileset dir="${build.dir}/${build.artifact}/bin"
                     includes="run.sh" filemode="755" prefix="${build.artifact}/bin"/>
      </zip>

      <tar basedir="${build.dir}"
           destfile="${build.dir}/${build.artifact}.tar"
           longfile="gnu">
         <include name="${build.artifact}/**"/>
         <!-- add run.sh using a tarfileset to preserve its file permission -->
         <exclude name="${build.artifact}/bin/run.sh"/>
         <tarfileset dir="${build.dir}/${build.artifact}/bin"
                     includes="run.sh" filemode="755" prefix="${build.artifact}/bin"/>
      </tar>
      <gzip src="${build.dir}/${build.artifact}.tar"
            destfile="${build.dir}/${build.artifact}.tar.gz"/>
   </target>

   <target name="userdoc">
      <ant dir="./docs/userguide" antfile="build.xml" target="all"/>
   </target>

   <target name="javadoc">

      <javadoc destdir="${build.api.dir}" author="true" version="true" use="true"
               windowtitle="JBoss Messaging ${module.version}">

         <packageset dir="${src.main.dir}" defaultexcludes="yes">
            <include name="org/jboss/**"/>
         </packageset>
         <classpath refid="javadoc.classpath"/>
         <doctitle><![CDATA[<h2>JBoss Messaging  ${module.version}</h2>]]></doctitle>
         <bottom><![CDATA[<i>Copyright &#169; 2006 JBoss Inc. All Rights Reserved.</i>]]></bottom>
         <tag name="todo" scope="all" description="To do:"/>
         <group title="JMS Facade" packages="org.jboss.jms.*"/>
         <group title="Messaging Core" packages="org.jboss.messaging.*"/>
      </javadoc>
   </target>

   <!-- test targets -->

   <target name="compile-unit-tests">
      <mkdir dir="${test.classes.dir}"/>
      <javac target="${javac.target}"
             source="${javac.source}"
             optimize="${javac.optimize}"
             debug="${javac.debug}"
             depend="${javac.depend}"
             verbose="${javac.verbose}"
             deprecation="${javac.deprecation}"
             includeAntRuntime="${javac.include.ant.runtime}"
             includeJavaRuntime="${javac.include.java.runtime}"
             failonerror="${javac.fail.onerror}"
             srcdir="${test.src.dir}"
             destdir="${test.classes.dir}">
         <classpath refid="test.compilation.classpath"/>
      </javac>
   </target>

   <target name="compile-jms-tests">
      <mkdir dir="${test.jms.classes.dir}"/>
      <javac target="${javac.target}"
             source="${javac.source}"
             optimize="${javac.optimize}"
             debug="${javac.debug}"
             depend="${javac.depend}"
             verbose="${javac.verbose}"
             deprecation="${javac.deprecation}"
             includeAntRuntime="true"
             includeJavaRuntime="${javac.include.java.runtime}"
             failonerror="${javac.fail.onerror}"
             srcdir="${test.jms.src.dir}"
             destdir="${test.jms.classes.dir}">
         <classpath refid="jms.test.compilation.classpath"/>
      </javac>
   </target>

   <target name="performance-tests" depends="jar, compile-unit-tests">
      <antcall inheritall="true" inheritrefs="true" target="tests">
         <param name="tests.param" value="**/org/jboss/messaging/tests/performance/**/*${test-mask}.class"/>
      </antcall>
   </target>

   <target name="integration-tests" depends="jar, compile-unit-tests">
      <antcall inheritall="true" inheritrefs="true" target="tests">
         <param name="tests.param" value="**/org/jboss/messaging/tests/integration/**/*${test-mask}.class"/>
      </antcall>
   </target>
   
   <target name="concurrent-tests" depends="jar, compile-unit-tests">
	   <antcall inheritall="true" inheritrefs="true" target="tests">
	      <param name="tests.param" value="**/org/jboss/messaging/tests/concurrent/**/*${test-mask}.class"/>
	   </antcall>
   </target>


   <target name="unit-tests" depends="jar, compile-unit-tests">
      <antcall inheritall="true" inheritrefs="true" target="tests">
         <param name="tests.param" value="**/org/jboss/messaging/tests/unit/**/*${test-mask}.class"/>
      	 <!-- if tests.validate.error is defined, it will fail the build in case of any test failure -->
      	 <param name="tests.validate.error" value="Defined!"/>
      </antcall>
   </target>
	
   <target name="timing-tests" depends="jar, compile-unit-tests">
      <antcall inheritall="true" inheritrefs="true" target="tests">
         <param name="tests.param" value="**/org/jboss/messaging/tests/timing/**/*${test-mask}.class"/>
      </antcall>
   </target>

   <target name="tests" depends="jar, compile-unit-tests">
      <echo message=""/>
      <echo message="Running unit tests, fork=${junit.fork}, junit.batchtest.fork=${junit.batchtest.fork}"/>
      <echo message="classpath is:${toString:unit.test.execution.classpath}"/>
      <echo message=""/>
      <mkdir dir="${test.output.dir}"/>
      <mkdir dir="${test.reports.dir}"/>
      <junit printsummary="${junit.printsummary}"
             fork="on"
             forkMode="once"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout}">
         <sysproperty key="user.home" value="${user.home}"/>
         <jvmarg value="-Djava.library.path=native/bin"/>
         <jvmarg value="-Xmx1024M"/>
         <!--<jvmarg line="-Xmx512M -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
         <!--<jvmarg value="-ea"/>-->
         <classpath refid="unit.test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}"
         	        failureproperty="tests.failed">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${test.classes.dir}">
               <include name="${tests.param}"/>
            </fileset>
         </batchtest>
      </junit>
   	  <antcall target="tests-validate-error" inheritall="true" inheritrefs="true"/>
   </target>

   <!-- ifs on ant are convoluted by definition... this will throw a BUILD FAILED if tests.validate.error was defined and if a error (tests.failed) happened -->
   <target name="tests-validate-error" if="tests.validate.error">
     <antcall target="tests-onerror"  inheritall="true" inheritrefs="true"/>
   </target>
	
   <!-- ifs on ant are convoluted by definition... this will throw a BUILD FAILED if tests.validate.error was defined and if a error (tests.failed) happened -->
   <target name="tests-onerror" if="tests.failed">
   	 <antcall target="compile-reports"/>
   	 <fail message="Test suite failed!"/>
   </target>

   <target name="jms-tests" depends="jar, compile-jms-tests">
      <echo message=""/>
      <echo message="Running jms tests, fork=${junit.fork}, junit.batchtest.fork=${junit.batchtest.fork}"/>
      <echo message="classpath is:${toString:unit.test.execution.classpath}"/>
      <echo message=""/>
      <mkdir dir="${test.output.dir}"/>
      <mkdir dir="${test.reports.dir}"/>
      <junit printsummary="${junit.printsummary}"
             fork="on"
             forkMode="once"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout}">

         <jvmarg value="-Xmx1024M"/>
         <jvmarg value="-Djava.library.path=native/bin"/>
         <!--<jvmarg line="-Xmx512M -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
         <!--<jvmarg value="-ea"/>-->
         <sysproperty key="jbm.remoting.disable.invm" value="${disable.invm}"/>
         <classpath refid="jms.test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${test.jms.classes.dir}">
               <include name="**/messaging/**/${test-mask}.class"/>
               <include name="**/jms/**/${test-mask}.class"/>
               <include name="**/messaging/util/**/${test-mask}.class"/>

               <exclude name="**/jms/JCAWrapperTest.class"/>
               <exclude name="**/jms/XARecoveryTest.class"/>
               <exclude name="**/jms/XAResourceRecoveryTest.class"/>
               <exclude name="**/jms/XATest.class"/>
               <exclude name="**/jms/MemLeakTest.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="**/jms/bridge/**"/>
               <exclude name="**/jms/manual/**"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="stress-tests" depends="jar, compile-unit-tests">
      <echo message=""/>
      <echo message="Running unit tests, fork=${junit.fork}, junit.batchtest.fork=${junit.batchtest.fork}"/>
      <echo message=""/>
      <mkdir dir="${test.output.dir}"/>
      <mkdir dir="${test.reports.dir}"/>
      <junit printsummary="${junit.printsummary}"
             fork="on"
             forkMode="once"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout}">

         <jvmarg value="-Xmx1024M"/>
         <jvmarg value="-Djava.library.path=native/bin"/>
         <!--<jvmarg line="-Xmx512M -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
         <!--<jvmarg value="-ea"/>-->
         <classpath refid="unit.test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${test.classes.dir}">
               <include name="**/org/jboss/messaging/tests/stress/**/*${test-mask}.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="all-tests" depends="unit-tests, integration-tests, concurrent-tests, stress-tests, jms-tests"/>

   <target name="compile-reports">
      <mkdir dir="${test.stylesheets.dir}"/>
      <copy todir="${test.stylesheets.dir}" filtering="yes">
         <fileset dir="${test.src.stylesheets.dir}">
            <include name="**/*"/>
         </fileset>
      </copy>
      <mkdir dir="${test.reports.dir}/html"/>
      <junitreport todir="${test.reports.dir}">
         <fileset dir="${test.reports.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
                 todir="${test.reports.dir}/html"
                 styledir="${test.stylesheets.dir}"/>
      </junitreport>
   </target>

   <property name="test.execution.classpath.file" value=".test.execution.classpath"/>

   <target name="get-unit-test-execution-classpath" depends="init">
      <pathconvert refid="unit.test.execution.classpath"
                   property="test.execution.classpath.unix"/>
      <echo message="${test.execution.classpath.unix}" file="${test.execution.classpath.file}"/>
   </target>

   <target name="get-jms-test-execution-classpath" depends="init">
      <pathconvert refid="jms.test.execution.classpath"
                   property="test.execution.classpath.unix"/>
      <echo message="${test.execution.classpath.unix}" file="${test.execution.classpath.file}"/>
   </target>

   <target name="emma" depends="jar, compile-unit-tests">
      <property name="emma.dir" location="${build.dir}/emma"/>

      <path id="emma.lib">
         <pathelement location="${test.dir}/lib/emma.jar"/>
         <pathelement location="${test.dir}/lib/emma_ant.jar"/>
      </path>

      <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
      <!-- Instrument the .class files. -->
      <mkdir dir="${build.dir}/emmaclasses"/>
      <emma enabled="true">
         <instr instrpath="${build.dir}/classes"
                destdir="${build.dir}/classes"
                metadatafile="${emma.dir}/metadata.emma"
                merge="true" mode="overwrite">
         </instr>
      </emma>

      <path id="emma.execution.classpath">
         <path refid="emma.lib"/>
         <path refid="unit.test.execution.classpath"/>
      </path>

      <echo message=""/>
      <echo message="Running unit tests, fork=${junit.fork}, junit.batchtest.fork=${junit.batchtest.fork}"/>
      <echo message=""/>
      <mkdir dir="${test.output.dir}"/>
      <mkdir dir="${test.reports.dir}"/>
      <junit printsummary="${junit.printsummary}"
             fork="on"
             forkMode="once"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout}">
         <sysproperty key="user.home" value="${user.home}"/>
         <sysproperty key="emma.coverage.out.file" value="${emma.dir}/coverage.emma"/>
         <sysproperty key="emma.coverage.out.merge" value="true"/>
         <jvmarg value="-Djava.library.path=native/bin"/>
         <jvmarg value="-Xmx1024M"/>
         <!--<jvmarg line="-Xmx512M -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>-->
         <!--<jvmarg value="-ea"/>-->
         <classpath refid="emma.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${test.classes.dir}">
               <include name="${test-mask}"/>
               <include name="**/org/jboss/messaging/tests/integration/**/${test-mask}.class"/>
               <include name="**/org/jboss/messaging/tests/unit/**/${test-mask}.class"/>
               <exclude name="**/org/jboss/messaging/tests/local/**/${test-mask}.class"/>
               <exclude name="**/org/jboss/messaging/tests/performance/**/${test-mask}.class"/>
            </fileset>
         </batchtest>
      </junit>

      <!-- Generate Emma reports. -->
      <emma enabled="true">
         <report sourcepath="${src.main.dir}"
                 sort="+name"
                 metrics="method:70,block:80,line:80,class:100">
            <fileset dir="${emma.dir}">
               <include name="*.emma"/>
            </fileset>
            <xml outfile="${test.reports.dir}/emma/coverage.xml" depth="method"/>
            <html outfile="${test.reports.dir}/emma/coverage.html"
                  depth="method" columns="name,class,method,block,line"/>
         </report>
      </emma>

   </target>
   <!--server-->

   <target name="runServer" depends="jar">
      <java classname="org.jboss.messaging.microcontainer.JBMBootstrapServer" fork="true">
         <jvmarg value="-XX:+UseParallelGC"/>
         <jvmarg value="-Xms512M"/>
         <jvmarg value="-Xmx2048M"/>
         <jvmarg value="-XX:+AggressiveOpts"/>
         <jvmarg value="-XX:+UseFastAccessorMethods"/>
      	 <jvmarg value="-Dcom.sun.management.jmxremote"/>
         <jvmarg value="-Dorg.jboss.logging.Logger.pluginClass=org.jboss.messaging.core.logging.JBMLoggerPlugin"/>
         <jvmarg value="-Djava.library.path=${native.bin.dir}"/>
         <jvmarg value="-Djava.naming.factory.initial=org.jnp.interfaces.NamingContextFactory"/>
         <jvmarg value="-Djava.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces"/>
         <arg line="jbm-standalone-beans.xml"/>
         <classpath refid="jms.test.execution.classpath"/>
      </java>
   </target>

   <!-- Examples -->

   <target name="queueExample" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="queueExample"/>
   </target>

   <target name="topicExample" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="topicExample"/>
   </target>

   <target name="durSubExample" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="durSubExample"/>
   </target>

   <target name="SimpleClient" depends="client-jar">
      <ant dir="${examples.dir}/messaging" antfile="build.xml" target="SimpleClient"/>
   </target>

   <target name="SSLClient" depends="client-jar">
      <ant dir="${examples.dir}/messaging" antfile="build.xml" target="SSLClient"/>
   </target>

   <target name="SimpleExample" depends="jar, client-jar">
      <ant dir="${examples.dir}/messaging" antfile="build.xml" target="SimpleExample"/>
   </target>

   <!-- Performance examples -->

   <target name="perfListener" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfListener"/>
   </target>

   <target name="perfAutoAckListener" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfAutoAckListener"/>
   </target>

   <target name="perfDupsOKListener" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfDupsOKListener"/>
   </target>

   <target name="perfTransactionalListener" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfTransactionalListener"/>
   </target>

   <target name="perfSender" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfSender"/>
   </target>

   <target name="perfNonTransactionalSender" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfNonTransactionalSender"/>
   </target>

   <target name="perfTransactionalSender" depends="client-jar">
      <ant dir="${examples.dir}/jms" antfile="build.xml" target="perfTransactionalSender"/>
   </target>


</project>
