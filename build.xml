<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../tools/etc/buildmagic/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id$ -->

<project default="main" name="JBoss/JMS">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;


  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.  
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.  
     |
     | This target is invoked by the Buildmagic initialization logic and 
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

    <!-- Module name(s) & version -->
    <property name="module.name" value="messaging"/>
    <property name="module.Name" value="JBoss Messaging"/>
    <property name="module.version" value="5.0.0"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    &libraries;
    &modules;

    <!-- The combined library classpath -->
    <path id="library.classpath">
       <path refid="oswego.concurrent.classpath"/>
       <path refid="javassist.classpath"/>
       <!-- I temporarily use a newer version of JGroups, not available in the thirdparty dir -->
       <!-- <path refid="jgroups.jgroups.classpath"/> -->
       <pathelement path="${module.root}/src/resources/jgroups-core.jar"/>
       <path refid="junit.junit.classpath"/>
    </path>

    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

    <!-- The combined dependent module classpath -->
    <path id="dependentmodule.classpath">
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.remoting.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.system.classpath"/>
    </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>

    <!-- Where build generated files will go -->
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>
    <property name="build.gen" value="${module.output}/gen"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <path refid="apache.commons.classpath"/>
      <fileset dir="${project.thirdparty}/xdoclet-xdoclet/lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <property name="xdoclet.task.classpath" 
	      refid="xdoclet.task.classpath"/>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.jms.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>
  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!-- 
     | Compile everything.
     |
     | This target should depend on other compile-* targets for each 
     | different type of compile that needs to be performed, short of
     | documentation compiles.
   -->

  <target name="compile" 
	  description="Compile all source files."
	  depends="compile-classes, compile-etc"/>

  <!-- Compile all class files -->
  <target name="compile-classes" depends="init">
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
	   target="${javac.target}"
           source="${javac.source}"
           debug="${javac.debug}"
	   depend="${javac.depend}"
	   verbose="${javac.verbose}"
	   deprecation="${javac.deprecation}"
	   includeAntRuntime="${javac.include.ant.runtime}"
	   includeJavaRuntime="${javac.include.java.runtime}"
	   failonerror="${javac.fail.onerror}">
       <src path="${source.java}"/>
       <classpath refid="javac.classpath"/>
       <include name="${javac.includes}"/>
       <exclude name="${javac.excludes}"/>
    </javac>
  </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**"/>
      </fileset>
    </copy>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

  <!-- 
     | Build all jar files.
   -->
  <target name="jars" description="Builds all jar files."
     depends="_buildmagic:build-bypass-check"
	  unless="build-bypass.on">

    <call target="compile"/>

    <mkdir dir="${build.lib}"/>
    
    <!-- Build the jboss-${module.name}.jar -->
    <jar jarfile="${build.lib}/jboss-${module.name}.jar"
	 manifest="${build.etc}/default.mf">
      <fileset dir="${build.classes}">
        <!-- Include everything else -->
        <include name="org/jboss/messaging/**"/>
      </fileset>
    </jar>

    <!-- Update the build marker to allow bypassing -->
    <touch file="${build-bypass.marker}"/>

  </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="dist" depends="javadocs">
  </target>

  <target name="install" 
	  description="Install the structure for a release."
	  depends="all, _buildmagic:install:default"> 

      <mkdir dir="${module.source}/bin"/>

      <filter token="module.name" value="${module.name}"/>
      <copy todir="${install.root}/bin" filtering="yes">
          <fileset dir="${module.source}/bin"/>
      </copy>
      <chmod dir="${install.root}/bin" perm="ugo+rx" includes="**/*.sh"/>

      <copy todir="${install.root}/lib" filtering="no">
            <fileset dir="${jboss.j2ee.lib}">
                <include name="jboss-j2ee.jar"/>
            </fileset>
            <fileset dir="${jboss.common.lib}">
                <include name="jboss-common.jar"/>
            </fileset>
            <fileset dir="${apache.log4j.lib}">
                <include name="log4j.jar"/>
            </fileset>
            <fileset dir="${apache.commons.lib}">
                <include name="commons-logging.jar"/>
            </fileset>
            <fileset dir="${jgroups.jgroups.lib}">
                <include name="jgroups.jar"/>
            </fileset>
      </copy>
  </target>

  <target name="release" depends="install"/>

  <target name="release-zip" 
	  description="Builds a ZIP distribution."
	  depends="release, _buildmagic:release:zip"/>

  <target name="release-tar" 
	  description="Builds a TAR distribution."
	  depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz" 
	  description="Builds a TAR-GZ distribution."
	  depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
	  description="Builds a distribution for each archive type."
	  depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean" 
	  description="Cleans up most generated files."
	  depends="_buildmagic:clean">
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber" 
	  description="Cleans up all generated files."
	  depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
	  description="Executes the default target (most)."/>
    
  <target name="all" depends="jars, docs"
	  description="Builds everything."/>

  <target name="most" depends="jars"
	  description="Builds almost everything."/>

  <target name="help" 
          description="Show this help message."
	  depends="_buildmagic:help:standard"/>

</project>
