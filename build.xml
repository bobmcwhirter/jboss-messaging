<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY buildmagic SYSTEM "../tools/etc/buildmagic/buildmagic.ent">
   <!ENTITY libraries SYSTEM "../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->


<!-- $Id$ -->


<project default="main" name="JBoss/Messaging">

  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->

  <!--
     | Include the common Buildmagic elements.
     |
     | This defines several different targets, properties and paths.
     | It also sets up the basic extention tasks amoung other things.
   -->

  &buildmagic;




  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->

  <!--
     | Initialize the build system.  Must depend on '_buildmagic:init'.
     | Other targets should depend on 'init' or things will mysteriously fail.
   -->

  <target name="init" unless="init.disable" depends="_buildmagic:init">
  </target>


  <!-- ================================================================== -->
  <!-- Configuration                                                      -->
  <!-- ================================================================== -->

  <!--
     | Configure the build system.
     |
     | This target is invoked by the Buildmagic initialization logic and
     | should contain module specific configuration elements.
   -->

  <target name="configure" unless="configure.disable">

    <!-- =================== -->
    <!-- Basic Configuration -->
    <!-- =================== -->

     <property name="messaging.version.major" value="1"/>
     <property name="messaging.version.minor" value="0"/>
     <property name="messaging.version.revision" value="1"/>
     <property name="messaging.version.incrementing" value="4"/>
     <property name="messaging.version.tag" value="GA"/>
     <property name="messaging.version.name" value=""/>
     <!-- This must be set to the CVS tag for any release -->
     <property name="messaging.version.cvstag" value="JBossMessaging_1_0_1_GA"/>

     <!-- Module name(s) & version -->
     <property name="module.name" value="messaging"/>
     <property name="module.Name" value="JBoss Messaging"/>
     <property name="module.version" value="${messaging.version.major}.${messaging.version.minor}.${messaging.version.revision}.${messaging.version.tag}"/>

     <!-- Manifest version info -->
     <property name="messaging.specification.title" value="${module.Name}"/>
     <property name="messaging.specification.version" value="${messaging.version.major}.${messaging.version.minor}.${messaging.version.revision}.${messaging.version.tag}"/>
     <property name="messaging.specification.vendor" value="JBoss (http://www.jboss.org/)"/>

     <property name="messaging.implementation.title" value="${module.Name}"/>
     <property name="messaging.implementation.url" value="http://www.jboss.org/"/>
     <property name="messaging.implementation.version" value="${messaging.version.major}.${messaging.version.minor}.${messaging.version.revision}.${messaging.version.tag} (build: CVSTag=${messaging.version.cvstag} date=${build.id})"/>
     <property name="messaging.implementation.vendor" value="JBoss Inc."/>
     <property name="messaging.implementation.vendor.id" value="${implementation.url}"/>

     <property name="jms.version.major" value="1"/>
     <property name="jms.version.minor" value="1"/>
     <property name="jms.version" value="1.1"/>

    <!-- ========= -->
    <!-- Libraries -->
    <!-- ========= -->

    &libraries;


    <!-- The combined library classpath -->
    <path id="library.classpath">
       <path refid="apache.commons.classpath"/>
       <path refid="oswego.concurrent.classpath"/>
       <path refid="javassist.classpath"/>
       <path refid="jgroups.jgroups.classpath"/>
       <path refid="junit.junit.classpath"/>
       <path refid="trove.trove.classpath"/>
    </path>


    <!-- ======= -->
    <!-- Modules -->
    <!-- ======= -->

     &modules;

     <!-- The combined dependent module classpath -->
     <path id="dependentmodule.classpath">
        <path refid="jboss.common.classpath"/>
        <path refid="jboss.j2ee.classpath"/>
        <path refid="jboss.remoting.classpath"/>
        <path refid="jboss.serialization.classpath"/>
        <path refid="jboss.aop.classpath"/>
        <path refid="jboss.aspects.classpath"/>
        <path refid="jboss.j2se.classpath"/>
        <path refid="jboss.system.classpath"/>
        <path refid="jboss.security.classpath"/>
        <path refid="jboss.server.classpath"/>
        <path refid="jboss.transaction.classpath"/>

        <!-- If I don't use directly UnifiedClassLoader3, this should go away -->
        <path refid="jboss.jmx.classpath"/>
     </path>

    <!-- ===== -->
    <!-- Tasks -->
    <!-- ===== -->

    <!-- Where source files live -->
    <property name="source.java" value="${module.source}/main"/>
    <property name="source.etc" value="${module.source}/etc"/>

    <!-- Where build generated files will go -->
    <property name="build.reports" value="${module.output}/reports"/>
    <property name="build.classes" value="${module.output}/classes"/>
    <property name="build.lib" value="${module.output}/lib"/>
    <property name="build.api" value="${module.output}/api"/>
    <property name="build.etc" value="${module.output}/etc"/>
    <property name="build.gen-src" value="${module.output}/gen-src"/>
    <property name="build.gen" value="${module.output}/gen"/>
    <property name="build.parsers" value="${module.output}/parsers"/>

     <!-- Messaging specific structure properties -->
     <property name="build.jar" value="${module.output}/jar"/>
     <property name="build.scoped-sar" value="${module.output}/scoped-sar"/>

    <!-- Install/Release structure -->
    <property name="install.id" value="${module.name}-${module.version}"/>
    <property name="release.id" value="${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>
    <property name="install.root" value="${module.output}/${install.id}"/>

    <!-- The combined thirdparty classpath -->
    <path id="thirdparty.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
    </path>

    <!-- RMIC should generate stubs compatible with Java 1.2+ -->
    <property name="rmic.stubVersion" value="1.2"/>

    <!-- classpath and local.classpath must have a value using with a path -->
    <property name="classpath" value=""/>
    <property name="local.classpath" value=""/>

    <!-- The classpath required to build classes. -->
    <path id="javac.classpath">
      <pathelement path="${classpath}"/>
      <pathelement path="${local.classpath}"/>
      <path refid="thirdparty.classpath"/>
    </path>

    <path id="aopc.classpath">
       <path refid="javac.classpath"/>
       <pathelement path="${build.classes}"/>
    </path>

    <!-- The classpath required to build javadocs. -->
    <path id="javadoc.classpath">
      <path refid="javac.classpath"/>
    </path>

    <!-- xdoclet -->
    <path id="xdoclet.task.classpath">
      <path refid="javac.classpath"/>
      <path refid="apache.commons.classpath"/>
      <fileset dir="${xdoclet.xdoclet.lib}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <property name="xdoclet.task.classpath"
          refid="xdoclet.task.classpath"/>

    <!-- Packages to include when generating api documentation -->
    <property name="javadoc.packages" value="org.jboss.jms.*"/>

    <!-- Override JUnit defaults -->
    <property name="junit.timeout" value="240000"/> <!-- 4 minutes -->
    <property name="junit.batchtest.todir" value="${build.reports}"/>
    <property name="junit.jvm.options" value="-Ddummy"/>

     <!-- ==================== -->
     <!-- Local path overrides -->
     <!-- ==================== -->

     <!--
         Sometimes I need to locally patch a library and use the local version (src/resources),
         until the change makes it to thridpary. This is how you can locally override a library.
         To use the thirdparty library, just uncoment the standard definition of the "common.."
         propery and comment out the localized definitions below.
      -->

     <!--
     <property name="current.jboss.remoting.lib" value="${jboss.remoting.lib}"/>
      -->
     <property name="current.jboss.remoting.lib" value="${module.root}/src/resources"/>
     <path id="jboss.remoting.classpath">
        <pathelement path="${module.root}/src/resources/jboss-remoting.jar"/>
     </path>

     <property name="current.jboss.serialization.lib" value="${module.root}/src/resources"/>
     <path id="jboss.serialization.classpath">
         <pathelement path="${module.root}/src/resources/jboss-serialization.jar"/>
     </path>

     <property name="current.jboss.aop.lib" value="${module.root}/src/resources"/>
     <path id="jboss.aop.classpath">
         <pathelement path="${module.root}/src/resources/jboss-aop.jar"/>
     </path>

     <property name="current.jboss.aspects.lib" value="${module.root}/src/resources"/>
     <path id="jboss.aspects.classpath">
         <pathelement path="${module.root}/src/resources/jboss-aspects.jar"/>
     </path>

     <!--
     <path id="jgroups.jgroups.classpath">
          <pathelement path="${module.root}/src/resources/jgroups-core.jar"/>
     </path>
     -->


  </target>


  <!-- ================================================================== -->
  <!-- Compile                                                            -->
  <!-- ================================================================== -->

  <!--
     | Compile everything.
     |
     | This target should depend on other compile-* targets for each
     | different type of compile that needs to be performed, short of
     | documentation compiles.
   -->

  <target name="compile"
      description="Compile all source files."
      depends="compile-parsers, compile-classes, compile-etc"/>

    <!-- Compile parsers -->
  <target name="compile-parsers" depends="init">
    <mkdir dir="${build.parsers}/org/jboss/jms/selector"/>

    <!-- message selector parser -->
    <javacc target="${source.java}/org/jboss/jms/selector/SelectorParser.jj"
            outputdirectory="${build.parsers}/org/jboss/jms/selector"
            javacchome="${sun.javacc.lib}"
            static="false"/>

    <!-- compile them now -->
    <mkdir dir="${build.classes}"/>
    <javac destdir="${build.classes}"
           optimize="${javac.optimize}"
           target="${javac.target}"
           source="${javac.source}"
           debug="${javac.debug}"
           depend="${javac.depend}"
           verbose="${javac.verbose}"
           deprecation="${javac.deprecation}"
           includeAntRuntime="${javac.include.ant.runtime}"
           includeJavaRuntime="${javac.include.java.runtime}"
           failonerror="${javac.fail.onerror}">
       <classpath refid="javac.classpath"/>

       <!-- JavaCC creates output in a flat namespace -->
       <src path="${build.parsers}"/>
       <!--
       <include name="*.java"/>
    -->
       <!-- Only want to build required the bits under selectors.* here -->
       <src path="${source.java}"/>
       <include name="org/jboss/jms/selector/ASCII_CharStream.java"/>
       <include name="org/jboss/jms/selector/ParserException.java"/>
       <include name="org/jboss/jms/selector/SelectorParser.java"/>
       <include name="org/jboss/jms/selector/SelectorParserConstants.java"/>
       <include name="org/jboss/jms/selector/SelectorParserTokenManager.java"/>
       <include name="org/jboss/jms/selector/Token.java"/>
       <include name="org/jboss/jms/selector/TokenMgrError.java"/>
       <include name="org/jboss/jms/selector/Operator.java"/>
       <include name="org/jboss/jms/selector/Identifier.java"/>
    </javac>
  </target>

  <!-- Compile all class files -->
   <target name="compile-classes" depends="init">
      <mkdir dir="${build.classes}"/>
      <javac destdir="${build.classes}"
         optimize="${javac.optimize}"
         target="${javac.target}"
         source="${javac.source}"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeAntRuntime="${javac.include.ant.runtime}"
         includeJavaRuntime="${javac.include.java.runtime}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.java}"/>
         <classpath refid="javac.classpath"/>
         <include name="${javac.includes}"/>
         <exclude name="${javac.excludes}"/>
      </javac>
      <taskdef name="aopc" classname="org.jboss.aop.ant.AopC"
         classpathref="jboss.aop.classpath"/>
      <echo message="NOTE: aopc incremental compilation might fail, if so do an ant clean first (see JMESSAGING-271)"/>
      <aopc compilerclasspathref="aopc.classpath" classpathref="aopc.classpath" verbose="false">
         <classpath refid="aopc.classpath"/>
         <src path="${build.classes}"/>
         <aoppath path="src/etc/prepare-aop.xml"/>
      </aopc>
   </target>

  <!-- Compile manifests -->
  <target name="compile-etc" depends="init">
    <mkdir dir="${build.etc}"/>
    <copy todir="${build.etc}" filtering="yes">
      <fileset dir="${source.etc}">
         <include name="**"/>
      </fileset>
       <filterset>
          <filter token="JMS_VERSION" value="${jms.version}"/>
          <filter token="JMS_VERSION_MAJOR" value="${jms.version.major}"/>
          <filter token="JMS_VERSION_MINOR" value="${jms.version.minor}"/>
          <filter token="MODULE_VERSION" value="${module.version}"/>
          <filter token="MESSAGING_VERSION_MAJOR" value="${messaging.version.major}"/>
          <filter token="MESSAGING_VERSION_MINOR" value="${messaging.version.minor}"/>
          <filter token="MESSAGING_VERSION_INCREMENTING" value="${messaging.version.incrementing}"/>
          <filter token="MODULE_NAME" value="${module.Name}"/>
       </filterset>
    </copy>
    <move file="${build.etc}/VERSION-PRE-SUBSTITUTE" toFile="${build.etc}/VERSION"/>
  </target>


  <!-- ================================================================== -->
  <!-- Archives                                                           -->
  <!-- ================================================================== -->

   <!--
   | Build all jar files.
   -->
   <target name="jars" description="Builds all jar files."
      depends="_buildmagic:build-bypass-check"
      unless="build-bypass.on">

      <call target="jar"/>

      <!-- Update the build marker to allow bypassing -->
      <touch file="${build-bypass.marker}"/>

   </target>

  <!-- ================================================================== -->
  <!-- Install & Release                                                  -->
  <!-- ================================================================== -->

  <target name="dist" depends="javadocs">
  </target>

  <target name="install"
      description="Install the structure for a release."
      depends="all, _buildmagic:install:default">

      <mkdir dir="${module.source}/bin"/>

      <filter token="module.name" value="${module.name}"/>
      <copy todir="${install.root}/bin" filtering="yes">
          <fileset dir="${module.source}/bin"/>
      </copy>
      <chmod dir="${install.root}/bin" perm="ugo+rx" includes="**/*.sh"/>

      <copy todir="${install.root}/lib" filtering="no">
            <fileset dir="${jboss.j2ee.lib}">
                <include name="jboss-j2ee.jar"/>
            </fileset>
            <fileset dir="${jboss.common.lib}">
                <include name="jboss-common.jar"/>
            </fileset>
            <fileset dir="${apache.log4j.lib}">
                <include name="log4j.jar"/>
            </fileset>
            <fileset dir="${apache.commons.lib}">
                <include name="commons-logging.jar"/>
            </fileset>
            <fileset dir="${jgroups.jgroups.lib}">
                <include name="jgroups.jar"/>
            </fileset>
      </copy>
  </target>

  <target name="release" depends="install"/>

  <target name="release-zip"
      description="Builds a ZIP distribution."
      depends="release, _buildmagic:release:zip"/>

  <target name="release-tar"
      description="Builds a TAR distribution."
      depends="release, _buildmagic:release:tar"/>

  <target name="release-tgz"
      description="Builds a TAR-GZ distribution."
      depends="release, _buildmagic:release:tgz"/>

  <target name="release-all"
      description="Builds a distribution for each archive type."
      depends="release-zip, release-tgz"/>


  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->

  <!-- Clean up all build output -->
  <target name="clean"
      description="Cleans up most generated files."
      depends="_buildmagic:clean">

      <ant dir="./docs/examples/queue" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./docs/examples/topic" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./docs/examples/mdb" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./docs/examples/stateless" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./docs/examples/ejb3mdb" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./docs/examples/secure-socket" antfile="build.xml" inheritAll="false" target="clean"/>

      <ant dir="./tests" antfile="build.xml" inheritAll="false" target="clean"/>
      <ant dir="./perf" antfile="build.xml" inheritAll="false" target="clean"/>
  </target>

  <!-- Clean up all generated files -->
  <target name="clobber"
      description="Cleans up all generated files."
      depends="_buildmagic:clobber, clean">
  </target>


  <!-- ================================================================== -->
  <!-- Misc.                                                              -->
  <!-- ================================================================== -->

  <target name="main" depends="most"
      description="Executes the default target (most)."/>

  <target name="all" depends="jars, docs"
      description="Builds everything."/>

  <target name="most" depends="jars"
      description="Builds almost everything."/>

  <target name="help"
          description="Show this help message."
      depends="_buildmagic:help:standard"/>

   <target name="display-path" depends="init">
      <pathconvert refid="dependentmodule.classpath" targetos="unix" property="path.representation"/>
      <echo message="${path.representation}"/>
   </target>

   <!-- ================================================================== -->
   <!-- Messaging-specific tasks                                           -->
   <!-- ================================================================== -->

   <property environment="ENV"/>

   <target name="create-lib-dir">
      <mkdir dir="${build.lib}"/>
   </target>

   <target name="jar" depends="compile, create-lib-dir, jar-structure">
      <jar jarfile="${build.lib}/jboss-${module.name}.jar" manifest="${build.etc}/default.mf">
         <fileset dir="${build.classes}" includes="**"/>
         <fileset dir="${build.jar}" includes="**"/>
      </jar>
   </target>

   <target name="scoped-sar" depends="compile, create-lib-dir, scoped-sar-structure, extract-server-dependencies">
      <jar jarfile="${build.lib}/jboss-${module.name}-scoped.sar" manifest="${build.etc}/default.mf">
         <fileset dir="${build.classes}" includes="**"/>
         <fileset dir="${build.scoped-sar}" includes="**"/>
         <fileset dir="${build.jar}" includes="**"/>
      </jar>
   </target>

   <target name="artifacts" depends="jar, scoped-sar, client-jar"/>

   <target name="jar-structure">
      <mkdir dir="${build.jar}/META-INF"/>
      <mkdir dir="${build.jar}/xmdesc"/>

      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/messaging-service.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/connection-factories-service.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/destinations-service.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/hsqldb-persistence-service.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/remoting-service.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/deploy/jms-ds.xml"/>
      <copy file="${build.etc}/VERSION" toFile="${build.jar}/VERSION"/>

      <copy todir="${build.jar}/xmdesc">
         <fileset dir="${source.etc}/xmdesc" includes="*.xml"/>
      </copy>
      <copy todir="${build.jar}" file="${source.etc}/aop-messaging-server.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/aop-messaging-client.xml"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/config/messaging-users.properties"/>
      <copy todir="${build.jar}" file="${source.etc}/server/default/config/messaging-roles.properties"/>
   </target>

   <target name="scoped-sar-structure" depends="jar-structure, extract-server-dependencies">

      <copy todir="${build.scoped-sar}/META-INF" file="${source.etc}/server/default/deploy/jboss-service.xml"/>

   </target>

   <target name="extract-server-dependencies">

      <fail message="Fix the build script to correctly define 'current.jboss.remoting.lib'!" unless="current.jboss.remoting.lib"/>
      <fail message="Fix the build script to correctly define 'current.jboss.serialization.lib'!" unless="current.jboss.serialization.lib"/>
      <fail message="Fix the build script to correctly define 'current.jboss.aop.lib'!" unless="current.jboss.aop.lib"/>
      <fail message="Fix the build script to correctly define 'current.jboss.aspects.lib'!" unless="current.jboss.aspects.lib"/>

      <mkdir dir="${build.scoped-sar}"/>

      <copy todir="${build.scoped-sar}" file="${current.jboss.remoting.lib}/jboss-remoting.jar"/>
      <copy todir="${build.scoped-sar}" file="${current.jboss.serialization.lib}/jboss-serialization.jar"/>
      <copy todir="${build.scoped-sar}" file="${current.jboss.aop.lib}/jboss-aop.jar"/>
      <copy todir="${build.scoped-sar}" file="${current.jboss.aspects.lib}/jboss-aspect-library.jar"/>
      <copy todir="${build.scoped-sar}" file="${javassist.javassist.lib}/javassist.jar"/>
      <copy todir="${build.scoped-sar}" file="${trove.trove.lib}/trove.jar"/>

      <mkdir dir="${build.scoped-sar}/tmp"/>
      <!-- we need org/jboss/util/collection.SoftValueHashMap
           which was moved http://jira.jboss.org/jira/browse/JBMESSAGING-281
      -->
      <unjar dest="${build.scoped-sar}/tmp" src="${jboss.common.lib}/jboss-common.jar" >
         <patternset>
            <include name="org/jboss/util/collection/SoftValueHashMap*.class"/>
            <!--
                 required by 4.0.1sp1 and lower
            -->
            <include name="org/jboss/util/propertyeditor/**"/>
         </patternset>
      </unjar>
      <jar jarfile="${build.scoped-sar}/jboss-common-softvaluehashmap.jar">
         <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </jar>
      <delete>
          <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </delete>
      <!-- I also need org.jboss.util.stream.* -->
      <unjar dest="${build.scoped-sar}/tmp" src="${jboss.common.lib}/jboss-common.jar">
         <patternset>
            <include name="org/jboss/util/stream/**"/>
         </patternset>
      </unjar>
      <jar jarfile="${build.scoped-sar}/jboss-common-stream.jar">
         <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </jar>
      <delete>
          <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </delete>
      <!-- I need InvocationMarshaller both on server and client side, and versions prior to
           JBoss 4.0.3 don't have them, so I need to include them as well. I only need to extract
           org.jboss.invocation.unified.marshall from jboss.jar, because otherwise I scope classes
           like javaURLContextFactory, which will mess up JNDI and other things.
      -->
      <unjar dest="${build.scoped-sar}/tmp" src="${jboss.server.lib}/jboss.jar">
         <patternset>
            <include name="org/jboss/invocation/unified/**"/>
         </patternset>
      </unjar>
      <jar jarfile="${build.scoped-sar}/jboss-unified-invocation.jar">
         <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </jar>
      <delete>
          <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </delete>

      <!--
           Required to deploy in 4.0.1 and lower. Currently we don't support it.
      -->
      <!--
      <unjar dest="${build.scoped-sar}/tmp" src="${jboss.security.lib}/jbosssx.jar">
         <patternset>
            <include name="org/jboss/security/SecurityAssociation*.class"/>
            <include name="org/jboss/security/SecurityActions*.class"/>
         </patternset>
      </unjar>
      <jar jarfile="${build.scoped-sar}/jboss-securityassociation.jar">
         <fileset dir="${build.scoped-sar}/tmp" includes="**"/>
      </jar>
      -->

      <delete dir="${build.scoped-sar}/tmp"/>
   </target>

   <target name="client-jar" depends="compile, scoped-sar">
      <mkdir dir="${module.output}/jboss-messaging-client"/>

      <unjar dest="${module.output}/jboss-messaging-client" src="${current.jboss.aop.lib}/jboss-aop.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${current.jboss.remoting.lib}/jboss-remoting.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${current.jboss.serialization.lib}/jboss-serialization.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${javassist.javassist.lib}/javassist.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${trove.trove.lib}/trove.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${build.scoped-sar}/jboss-common-softvaluehashmap.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${jboss.common.lib}/jboss-common-client.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${jboss.j2ee.lib}/jboss-j2ee.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${jboss.j2se.lib}/jboss-j2se.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${jboss.naming.lib}/jnp-client.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${oswego.concurrent.lib}/concurrent.jar"/>
      <unjar dest="${module.output}/jboss-messaging-client" src="${apache.log4j.lib}/log4j.jar"/>

      <jar jarfile="${build.lib}/jboss-messaging-client.jar">
         <fileset dir="${build.classes}">
            <include name="org/jboss/**"/>
         </fileset>
         <fileset dir="${build.etc}">
            <include name="VERSION"/>
         </fileset>
         <fileset dir="${module.output}/jboss-messaging-client">
            <include name="VERSION"/>
         </fileset>
         <fileset dir="${module.output}/jboss-messaging-client" includes="**"/>
      </jar>

      <delete dir="${module.output}/jboss-messaging-client"/>
   </target>

   <!-- ================================================================== -->
   <!-- Release tasks                                                      -->
   <!-- ================================================================== -->

   <target name="archive-functional" depends="release-structure">
      <mkdir dir="./tests/output/jboss-messaging-functional-test-results-${module.version}"/>
      <copy todir="./tests/output/jboss-messaging-functional-test-results-${module.version}">
         <fileset dir="./tests/output/reports/html">
            <include name="**"/>
         </fileset>
      </copy>
      <zip destfile="${release.output}/test-results/jboss-messaging-functional-test-results-${module.version}.zip"
           basedir="./tests/output" includes="jboss-messaging-functional-test-results-${module.version}/**"/>
      <delete dir="./tests/output/jboss-messaging-functional-test-results-${module.version}"/>
   </target>

   <target name="archive-stress" depends="release-structure">
      <mkdir dir="./tests/output/jboss-messaging-stress-test-results-${module.version}"/>
      <copy todir="./tests/output/jboss-messaging-stress-test-results-${module.version}">
         <fileset dir="./tests/output/reports/html">
            <include name="**"/>
         </fileset>
      </copy>
      <zip destfile="${release.output}/test-results/jboss-messaging-stress-test-results-${module.version}.zip"
           basedir="./tests/output" includes="jboss-messaging-stress-test-results-${module.version}/**"/>
      <delete dir="./tests/output/jboss-messaging-stress-test-results-${module.version}"/>
   </target>

   <target name="archive-smoke" depends="release-structure">
      <copy todir="${release.output}/test-results">
         <fileset dir="./tests/smoke/output">
            <include name="*.html"/>
         </fileset>
      </copy>
   </target>

   <target name="release-bundle" depends="artifacts, release-structure, examples, userdoc, bundle-source, bundle-test-results, javadoc">

      <copy todir="${release.output}" file="${build.lib}/jboss-${module.name}-scoped.sar"/>
      <copy todir="${release.output}" file="${build.lib}/jboss-${module.name}-client.jar"/>
      <copy todir="${release.output}" file="./docs/README.html"/>
      <copy todir="${release.output}/api">
         <fileset dir="${build.api}" includes="**"/>
      </copy>
      <copy todir="${release.output}/util">
         <fileset dir="./util">
            <include name="*.xml"/>
            <exclude name="do-not-distribute*"/>
         </fileset>
      </copy>
      <zip destfile="${build.lib}/jboss-messaging-${module.version}.zip"
           basedir="${module.root}/release"/>
      <echo message="Release bundle jboss-messaging-${module.version}.zip done"/>
   </target>

   <target name="release-structure" depends="init">
      <property name="release.output" value="${module.root}/release/jboss-messaging-${module.version}"/>
      <mkdir dir="${release.output}/util"/>
      <mkdir dir="${release.output}/examples"/>
      <mkdir dir="${release.output}/docs/userguide"/>
      <mkdir dir="${release.output}/src"/>
      <mkdir dir="${release.output}/test-results"/>
   </target>

   <!-- Note: This target must be ran after the smoke test -->
   <target name="examples" depends="release-structure">
      <copy todir="${release.output}/examples">
         <fileset dir="./docs/examples">
            <exclude name="programmatic-deployment"/>
            <exclude name="**/do-not-distribute*"/>
         </fileset>
      </copy>
      <copy todir="${release.output}/examples/config">
         <fileset dir="./src/etc/server/default/deploy">
            <include name="*-persistence-service.xml"/>
         </fileset>
      </copy>
   </target>

   <target name="userdoc" depends="release-structure">
      <ant dir="./docs/gettingstarted" antfile="build.xml" target="all"/>
      <copy todir="${release.output}/docs/userguide">
         <fileset dir="${module.output}/docs/userguide/en">
            <include name="**"/>
            <exclude name="**/do-not-distribute*"/>
         </fileset>
      </copy>
   </target>

   <target name="bundle-source" depends="release-structure">
      <zip destfile="${release.output}/src/jboss-messaging-${module.version}-src.zip"
           basedir="${source.java}" excludes="**/CVS,*.iml"/>
      <zip destfile="${release.output}/src/jboss-messaging-tests-${module.version}-src.zip"
           basedir="${module.root}/tests/src" includes="org/jboss/test/**" excludes="**/CVS,*.iml"/>
   </target>

   <target name="bundle-test-results" depends="release-structure">
      <available file="${release.output}/test-results/jboss-messaging-functional-test-results-${module.version}.zip"
                 property="functional.test.results.present" value="true"/>
      <fail message="Functional test results ${release.output}/test-results/jboss-messaging-functional-test-results-${module.version}.zip not available!"
            unless="functional.test.results.present"/>
      <available file="${release.output}/test-results/jboss-messaging-stress-test-results-${module.version}.zip"
                 property="stress.test.results.present" value="true"/>
      <fail message="Stress test results ${release.output}/test-results/jboss-messaging-stress-test-results-${module.version}.zip not available!"
            unless="stress.test.results.present"/>

      <!-- TODO
      <available file="${release.output}/test-results/jboss-messaging-smoke-test-results-${module.version}.zip"
                 property="smoke.test.results.present" value="true"/>
      <fail message="Smoke test results ${release.output}/test-results/jboss-messaging-functional-smoke-results-${module.version}.zip not available!"
            unless="smoke.test.results.present"/>
      -->
   </target>

   <target name="javadoc" depends="compile">
      <javadoc destdir="${build.api}" author="true" version="true" use="true" windowtitle="JBoss Messaging ${module.version}">

         <packageset dir="${source.java}" defaultexcludes="yes">
            <include name="org/jboss/**"/>
         </packageset>

         <doctitle><![CDATA[<h2>JBoss Messaging  ${module.version}</h2>]]></doctitle>
         <bottom><![CDATA[<i>Copyright &#169; 2006 JBoss Inc. All Rights Reserved.</i>]]></bottom>
         <tag name="todo" scope="all" description="To do:"/>
         <group title="JMS Facade" packages="org.jboss.jms.*"/>
         <group title="Messaging Core" packages="org.jboss.messaging.*"/>
         <!--
         <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="C:\tmp"/>
         <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
         -->
      </javadoc>
   </target>


   <target name="deployscoped" depends="scoped-sar">
      <copy file="${build.lib}/jboss-${module.name}-scoped.sar"
            todir="${ENV.JBOSS_HOME}/server/default/deploy"/>
   </target>

   <target name="deploydefault" depends="jar">
      <copy file="${build.lib}/jboss-${module.name}.sar"
            todir="${ENV.JBOSS_HOME}/server/default/deploy"/>
   </target>

   <target name="undeploydefault" depends="init">
      <delete file="${ENV.JBOSS_HOME}/server/default/deploy/jboss-${module.name}.sar"/>
   </target>

   <!-- ================================================================== -->
   <!-- TCK tasks                                                          -->
   <!-- ================================================================== -->

   <target name="cts-deploy" depends="jar">
      <copy file="${build.lib}/jboss-${module.name}.sar"
         todir="${ENV.JBOSS_HOME}/server/cts-messaging/deploy"/>
   </target>

   <target name="cts-undeploy" depends="init">
      <delete file="${ENV.JBOSS_HOME}/server/cts-messaging/deploy/jboss-${module.name}.sar"/>
   </target>

   <!-- ================================================================== -->
   <!-- smoke test                                                         -->
   <!-- ================================================================== -->

   <target name="smoke">
      <ant dir="tests/smoke" antfile="build.xml" target="smoke-test" inheritAll="false"/>
   </target>

</project>





