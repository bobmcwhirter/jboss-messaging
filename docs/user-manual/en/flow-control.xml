<?xml version="1.0" encoding="UTF-8"?>
<chapter id="flow-control">
   <title>Flow Control</title>
   <para>Flow control is used to limit the flow of data between a client and server, or a server and
      a server in order to prevent the client or server being overwhelmed with data.</para>
   <section>
      <title>Consumer Flow Control</title>
      <para>This controls the flow of data between the server and the client as the client consumes
         messages. For performance reasons clients normally buffer messages before delivering to the
         consumer via the <literal>receive()</literal> method or asynchronously via a message
         listener. If the consumer cannot process messages as fast as they are being delivered and
         stored in the internal buffer, then you could end up with a situation where messages just
         keep building up and are not processed for a long time. </para>
      <section id="flow-control.consumer.window">
         <title>Window-Based Flow Control</title>
         <para>By default, JBoss Messaging consumers buffer messages from the server in a client
            side buffer before the client consumes them. This improves performance: otherwise every
            time the client consumes a message, JBoss Messaging would have to go the server to
            request the next message. In turn, this message would then get sent to the client side,
            if one was available.</para>
         <para>A network round trip would be involved for <emphasis>every</emphasis> message and
            considerably reduce performance.</para>
         <para>To prevent this, JBoss Messaging pre-fetches messages into a buffer on each consumer.
            The total maximum size of messages (in bytes) that will be buffered on each consumer is
            determined by the <literal>consumer-window-size</literal> parameter.</para>
         <para>By default, the <literal>consumer-window-size</literal> is set to 1 MiB (1024 * 1024
            bytes).</para>
         <para>The value can be:</para>
         <itemizedlist>
            <listitem>
               <para><literal>-1</literal> for an <emphasis>unbounded</emphasis> buffer</para>
            </listitem>
            <listitem>
               <para><literal>0</literal> to not buffer any messages. See <xref
                     linkend="no-consumer-buffering-example" />
                  for working example of a consumer with no buffering.</para>
            </listitem>
            <listitem>
               <para><literal>&gt;0</literal> for a buffer with the given maximum size in
                  bytes.</para>
            </listitem>
         </itemizedlist>
         <para>Setting the consumer window size can considerably improve performance depending on
            the messaging use case. As an example, let's consider the two extremes: </para>
         <variablelist>
            <varlistentry>
               <term>Fast consumers</term>
               <listitem>
                  <para>Fast consumers can process messages as fast as they consume them (or even
                     faster)</para>
                  <para>To allow fast consumers, set the <literal>consumer-window-size</literal> to
                     -1. This will allow <emphasis>unbounded</emphasis> message buffering on the
                     client side.</para>
                  <para>Use this setting with caution: it can overflow the client memory if the
                     consumer is not able to process messages as fast as it receives them.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>Slow consumers</term>
               <listitem>
                  <para>Slow consumers takes significant time to process each message and it is
                     desirable to prevent buffering messages on the client side so that they can be
                     delivered to another consumer instead.</para>
                  <para>Consider a situation where a queue has 2 consumers 1 of which is very slow.
                     Messages are delivered in a round robin fashion to both consumers, the fast
                     consumer processes all of its messages very quickly until its buffer is empty.
                     At this point there are still messages awaiting to be processed by the slow
                     consumer which could be being consumed by the other consumer.</para>
                  <para>To allow slow consumers, set the <literal>consumer-window-size</literal> to
                     0 (for no buffer at all). This will prevent the slow consumer from buffering
                     any messages on the client side. Messages will remain on the server side ready
                     to be consumed by other consumers.</para>
               </listitem>
            </varlistentry>
         </variablelist>
         <para>Most of the consumers cannot be clearly identified as fast or slow consumers but are
            in-between. In that case, setting the value of <literal>consumer-window-size</literal>
            to optimize performance depends on the messaging use case and requires benchmarks to
            find the optimal value, but a value of 1MiB is fine in most cases.</para>
         <section id="flow-control.core.api">
            <title>Using Core API</title>
            <para>If JBoss Messaging Core API is used, the consumer window size is specified by
                  <literal>ClientSessionFactory.setConsumerWindowSize()</literal> method and some of
               the <literal>ClientSession.createConsumer()</literal> methods.</para>
         </section>
         <section>
            <title>Using JMS</title>
            <para>if JNDI is used to look up the connection factory, the consumer window size is
               configured in <literal>jbm-jms.xml</literal>:</para>
            <programlisting>
&lt;connection-factory name="ConnectionFactory"&gt;
   &lt;connector-ref connector-name="netty-connector"/&gt;
   &lt;entries&gt;
      &lt;entry name="ConnectionFactory"/&gt;       
   &lt;/entries&gt;
      
   &lt;!-- Set the consumer window size to 0 to have *no* buffer on the client side --&gt;
   &lt;consumer-window-size&gt;0&lt;/consumer-window-size&gt;
&lt;/connection-factory&gt;
            </programlisting>
            <para>If the connection factory is directly instantiated, the consumer window size is
               specified by <literal>JBossConnectionFactory.setConsumerWindowSize()</literal>
               method.</para>
         </section>
         <section>
            <title>Example</title>
            <para>The <ulink url="../../../../examples/jms/no-consumer-buffering/readme.html">
                  <literal>no-consumer-buffering</literal> example</ulink> shows how to configure
               JBoss Messaging to prevent consumer buffering when dealing with slow
               consumers.</para>
         </section>
      </section>
      <section>
         <title>Rate limited flow control</title>
         <para>It is also possible to control the rate at which a consumer can consumer messages.
            This is a form of throttling and can be used to make sure that a consumer never consumes
            messages at a rate faster than the rate specified. </para>
         <para>The rate must be a positive integer to enable and is the maximum desired message
            consumption rate specified in units of messages per second. Setting this to <literal
               >-1</literal> disables rate limited flow control. The default value is <literal
               >-1</literal>.</para>
         <para>Please see <xref linkend="consumer-rate-limiting-example" /> for a working example 
         of limiting consumer rate.</para>
         <section id="flow-control.rate.core.api">
            <title>Using Core API</title>
            <para>If the JBoss Messaging core API is being used the rate can be set via the <literal
                  >ClientSessionFactory.setConsumerMaxRate(int consumerMaxRate)</literal> method or
               alternatively via some of the <literal>ClientSession.createConsumer()</literal>
               methods. </para>
         </section>
         <section>
            <title>Using JMS</title>
            <para>If JNDI is used to look up the connection factory, the max rate can be configured
               in <literal>jbm-jms.xml</literal>:</para>
            <programlisting>&lt;connection-factory name="ConnectionFactory">
      &lt;connector-ref connector-name="netty-connector"/>
      &lt;entries>
         &lt;entry name="ConnectionFactory"/>       
      &lt;/entries>
      &lt;!-- We limit consumers created on this connection factory to consume messages
             at a maximum rate
      of 10 messages per sec -->
      &lt;consumer-max-rate>10&lt;/consumer-max-rate>
 &lt;/connection-factory></programlisting>
            <para>If the connection factory is directly instantiated, the max rate size can be set
               via the <literal>JBossConnectionFactory.setConsumerMaxRate(int
                  consumerMaxRate)</literal> method.</para>
            <note>
               <para>Rate limited flow control can be used in conjunction with window based flow
                  control. Rate limited flow control only effects how many messages a client can
                  consume in a second and not how many messages are in its buffer. So if you had a
                  slow rate limit and a high window based limit the clients internal buffer would
                  soon fill up with messages.</para>
            </note>
         </section>
         <section>
            <title>Example</title>
            <para>The <ulink url="../../../../examples/jms/consumer-rate-limit/readme.html">
                  <literal>consumer-rate-limit</literal> example</ulink> shows how to configure
               JBoss Messaging to prevent consumer buffering when dealing with slow
               consumers.</para>
         </section>
      </section>
   </section>
   <section>
      <title>Producer flow control</title>
      <para>JBoss Messaging also can limit the amount of data sent from a client to a server to
         prevent the server being overwhelmed.</para>
      <section>
         <title>Window based flow control</title>
         <para>JBoss Messaging clients maintain a buffer of commands that have been sent to the
            server, thus provides a form of flow control. Please see <xref
               linkend="command-buffering"/> for more information on
            this.</para>
      </section>
      <section>
         <title>Rate limited flow control</title>
         <para>JBoss Messaging also allows the rate a producer can emit message to be limited, in
            units of messages per second. By specifying such a rate, JBoss Messaging will ensure
            that producer never produces messages at a rate higher than that specified.</para>
         <para>The rate must be a positive integer to enable and is the maximum desired message
            consumption rate specified in units of messages per second. Setting this to <literal
               >-1</literal> disables rate limited flow control. The default value is <literal
               >-1</literal>.</para>
         <para>Please see the <xref linkend="producer-rate-limiting-example" /> 
            for a working example of limiting producer rate.</para>
         <section id="flow-control.producer.rate.core.api">
            <title>Using Core API</title>
            <para>If the JBoss Messaging core API is being used the rate can be set via the <literal
                  >ClientSessionFactory.setProducerMaxRate(int consumerMaxRate)</literal> method or
               alternatively via some of the <literal>ClientSession.createProducer()</literal>
               methods. </para>
         </section>
         <section>
            <title>Using JMS</title>
            <para>If JNDI is used to look up the connection factory, the max rate can be configured
               in <literal>jbm-jms.xml</literal>:</para>
            <programlisting>&lt;connection-factory name="ConnectionFactory">
      &lt;connector-ref connector-name="netty-connector"/>
      &lt;entries>
         &lt;entry name="ConnectionFactory"/>       
      &lt;/entries>
      &lt;!-- We limit producers created on this connection factory to produce messages 
                at a maximum rate
      of 10 messages per sec -->
      &lt;producer-max-rate>10&lt;/producer-max-rate>
 &lt;/connection-factory></programlisting>
            <para>If the connection factory is directly instantiated, the max rate size can be set
               via the <literal>JBossConnectionFactory.setProducerMaxRate(int
                  consumerMaxRate)</literal> method.</para>
         </section>
      </section>
   </section>
</chapter>
