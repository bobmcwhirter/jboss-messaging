<?xml version="1.0" encoding="UTF-8"?>
<chapter id="message-grouping">
   <title>Message Grouping</title>
   <para>Message groups are sets of messages that has the following characteristics:</para>
   <itemizedlist>
      <listitem>
         <para>Messages in a message group share the same group id, i.e. they have same group
            identifier property (<literal>JMSXGroupID</literal> for JMS, <literal
               >_JBM_GROUP_ID</literal> for JBoss Messaging Core API).</para>
      </listitem>
      <listitem>
         <para>Messages in a message group are always consumed by the same consumer, even if there
            are many consumers on a queue. They pin all messages with the same group id to the same
            consumer. If that consumer closes another consumer is chosen and will receive all
            messages with the same group id.</para>
      </listitem>
   </itemizedlist>
   <section id="message-grouping.configuring">
      <title>Configuring Message Grouping</title>
      <para>Message grouping must be enabled in the address-setting configuration by using a
         specific <literal>distribution-policy-class</literal>:</para>
      <programlisting>
 &lt;address-setting match="jms.queue.exampleQueue"&gt;
    &lt;distribution-policy-class&gt;
       org.jboss.messaging.core.server.impl.GroupingRoundRobinDistributor
    &lt;/distribution-policy-class&gt;
 &lt;/address-setting&gt;
       </programlisting>
      <para>By default, <literal>distribution-policy-class</literal> is set to <literal
            >org.jboss.messaging.core.server.impl.RoundRobinDistributor</literal> and message groups
         will not be handled by the queue. Address wildcards can be used to configure the
         distribution policy for a set of addresses (see <xref linkend="wildcard-syntax"/>).</para>
   </section>
   <section>
      <title>Using Core API</title>
      <para>The property name used to identify the message group is <literal
            >"_JBM_GROUP_ID""</literal> (or the constant <literal
         >MessageImpl.HDR_GROUP_ID</literal>). Alternatively, you can set <literal
            >autogroup</literal> to true on the <literal>SessionFactory</literal> which will pick a
         random unique id. </para>
   </section>
   <section id="message-grouping.jmsconfigure">
      <title>Using JMS</title>
      <para>The property name used to identify the message group is <literal
         >JMSXGroupID</literal>.</para>
      <para>Within the same group, messages can also set a <literal>JMSXGroupSeq</literal>
         <literal>int</literal> property (starting at 1).</para>
      <programlisting>
 // send 2 messages in the same group to ensure the same
 // consumer will receive both
 Message message = ...
 message.setStringProperty("JMSXGroupID", "Group-0");
 message.setIntProperty("JMSXGroupSeq", 1);
 producer.send(message);

 message = ...
 message.setStringProperty("JMSXGroupID", "Group-0");
 message.setIntProperty("JMSXGroupSeq", 2);
 producer.send(message);          
       </programlisting>
      <para>Alternatively, you can set <literal>autogroup</literal> to true on the <literal
            >JBossConnectonFactory</literal> which will pick a random unique id.  This can also be
         set in the <literal>jbm-jms.xml</literal> file like this:</para>
      <programlisting>&lt;connection-factory name="ConnectionFactory">
      &lt;connector-ref connector-name="netty-connector"/>
      &lt;entries>
         &lt;entry name="ConnectionFactory"/>
      &lt;/entries>
      &lt;autogroup>true&lt;/autogroup>
&lt;/connection-factory></programlisting>
   </section>
   <section>
      <title>Example</title>
      <para>See <xref linkend="examples.message-group" /> for an example which 
         shows how message groups are configured and used with JMS.</para>
   </section>
</chapter>
