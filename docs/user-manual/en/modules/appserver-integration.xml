<?xml version="1.0" encoding="UTF-8"?>
<chapter id="appserver-integration">
    <title>Application Server Integration and JavaEE</title>
    <para>JBM is fully integrated with the JBoss Application Server version 5.1. For details on
        installing JBM in the AS refer to Quick Start guide.</para>
    <para>This section explains the basics behind configuring the different JEE components in the
        AS.</para>
    <section>
        <title>Using and Configuring the JCA Adapter</title>
        <para>The Java Connector Architecture (JCA) Adapter is what allows JBM to be integrated with
            JEE components such as MDB's and EJB's. It configures how components such as MDB's
            consume messages from the JBM server and also how components can send messages.</para>
        <para>The JBM JCA adapter is deployed via the <literal>jms-ra.rar</literal> archive. The
            configuration of the Adapter is found in this archive under <literal
                >META-INF/ra.xml</literal>.</para>
        <para>The configuration will look something like the following:</para>
        <programlisting>&lt;resourceadapter>
      &lt;resourceadapter-class>org.jboss.messaging.ra.JBMResourceAdapter&lt;/resourceadapter-class>
      &lt;config-property>
         &lt;description>The transport type&lt;/description>
         &lt;config-property-name>ConnectorClassName&lt;/config-property-name>
         &lt;config-property-type>java.lang.String&lt;/config-property-type>
         &lt;config-property-value>org.jboss.messaging.core.remoting.impl.invm.InVMConnectorFactory&lt;/config-property-value>
      &lt;/config-property>
      &lt;config-property>
         &lt;description>The transport configuration. These values must be in the form of key=val;key=val;&lt;/description>
         &lt;config-property-name>ConnectionParameters&lt;/config-property-name>
         &lt;config-property-type>java.lang.String&lt;/config-property-type>
         &lt;config-property-value>jbm.remoting.invm.serverid=0&lt;/config-property-value>
      &lt;/config-property>
       &lt;config-property>
        &lt;description>Use XA methods to obtain connections?&lt;/description>
        &lt;config-property-name>UseXA&lt;/config-property-name>
        &lt;config-property-type>java.lang.Boolean&lt;/config-property-type>
        &lt;config-property-value>true&lt;/config-property-value>
      &lt;/config-property>

      &lt;outbound-resourceadapter>
         &lt;connection-definition>
            &lt;managedconnectionfactory-class>org.jboss.messaging.ra.JBMManagedConnectionFactory&lt;/managedconnectionfactory-class>

            &lt;config-property>
               &lt;description>The default session type&lt;/description>
               &lt;config-property-name>SessionDefaultType&lt;/config-property-name>
               &lt;config-property-type>java.lang.String&lt;/config-property-type>
               &lt;config-property-value>javax.jms.Queue&lt;/config-property-value>
            &lt;/config-property>
            &lt;config-property>
               &lt;description>Try to obtain a lock within specified number of seconds; less than or equal to 0 disable this functionality&lt;/description>
               &lt;config-property-name>UseTryLock&lt;/config-property-name>
               &lt;config-property-type>java.lang.Integer&lt;/config-property-type>
               &lt;config-property-value>0&lt;/config-property-value>
            &lt;/config-property>

            &lt;connectionfactory-interface>org.jboss.messaging.ra.JBMConnectionFactory&lt;/connectionfactory-interface>
            &lt;connectionfactory-impl-class>org.jboss.messaging.ra.JBMConnectionFactoryImpl&lt;/connectionfactory-impl-class>
            &lt;connection-interface>javax.jms.Session&lt;/connection-interface>
            &lt;connection-impl-class>org.jboss.messaging.ra.JBMSession&lt;/connection-impl-class>
         &lt;/connection-definition>
         &lt;transaction-support>XATransaction&lt;/transaction-support>
         &lt;authentication-mechanism>
            &lt;authentication-mechanism-type>BasicPassword&lt;/authentication-mechanism-type>
            &lt;credential-interface>javax.resource.spi.security.PasswordCredential&lt;/credential-interface>
         &lt;/authentication-mechanism>
         &lt;reauthentication-support>false&lt;/reauthentication-support>
      &lt;/outbound-resourceadapter>

      &lt;inbound-resourceadapter>
         &lt;messageadapter>
            &lt;messagelistener>
               &lt;messagelistener-type>javax.jms.MessageListener&lt;/messagelistener-type>
               &lt;activationspec>
                  &lt;activationspec-class>org.jboss.messaging.ra.inflow.JBMActivationSpec&lt;/activationspec-class>
                  &lt;required-config-property>
                      &lt;config-property-name>destination&lt;/config-property-name>
                  &lt;/required-config-property>
               &lt;/activationspec>
            &lt;/messagelistener>
         &lt;/messageadapter>
      &lt;/inbound-resourceadapter>

   &lt;/resourceadapter></programlisting>
        <para>There are 3 main parts to this configuration.</para>
        <orderedlist>
            <listitem>
                <para>A set of global properties for the Adapter</para>
            </listitem>
            <listitem>
                <para>The configuration for the outbound part of the adapter. This is used for
                    creating JMS resources within EE components</para>
            </listitem>
            <listitem>
                <para>The configuration of the inbound part of the adapter. This is used for
                    controlling the consumption of messages via MDB's.</para>
            </listitem>
        </orderedlist>
        <section>
            <title>Adapter Global properties</title>
            <para>The first element you see is <literal>resourceadapter-class</literal> which should
                be left unchanged. This is the JBM resource adapter class.</para>
            <para>After that there is a list of configuration properties. This will be where most of
                the configuration is done. The first 2 configure the transport used by the adapter
                and the rest configure the connection itself.</para>
            <para>The following table explains what each property is for.</para>
            <table frame="topbot" border="2">
                <title>Global Configuration Properties</title>
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="0.55*"/>
                    <colspec colname="c2" colnum="2" colwidth="0.31*"/>
                    <colspec colname="c3" colnum="3" colwidth="2.14*"/>
                    <thead>
                        <row>
                            <entry>Property Name</entry>
                            <entry>Property Type</entry>
                            <entry>Property Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>ConnectorClassName</entry>
                            <entry>java.lang.String</entry>
                            <entry>The Connector class name see <xref
                                    linkend="configuring-transports"/> for info on available
                                connectors</entry>
                        </row>
                        <row>
                            <entry>ConnectionParameters</entry>
                            <entry>java.lang.String</entry>
                            <entry>The transport configuration. These values must be in the form of
                                key=val;key=val; and will be specific to the connector used</entry>
                        </row>
                        <row>
                            <entry>UseXA</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>True will enable XA transactions</entry>
                        </row>
                        <row>
                            <entry>UserName</entry>
                            <entry>java.lang.String</entry>
                            <entry>The user name to use when making a connection </entry>
                        </row>
                        <row>
                            <entry>Password</entry>
                            <entry>java.lang.String</entry>
                            <entry>The password to use when making a connection</entry>
                        </row>
                        <row>
                            <entry>BackUpTransportType</entry>
                            <entry>java.lang.String</entry>
                            <entry>The back up transport to use on failure.</entry>
                        </row>
                        <row>
                            <entry>TransportConfiguration</entry>
                            <entry>java.lang.String</entry>
                            <entry>The back up transport configuration</entry>
                        </row>
                        <row>
                            <entry>DiscoveryGroupAddress</entry>
                            <entry>java.lang.String</entry>
                            <entry>The discovery group address to use to autodetect a server</entry>
                        </row>
                        <row>
                            <entry>DiscoveryGroupPort</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The port to use for discovery</entry>
                        </row>
                        <row>
                            <entry>DiscoveryRefreshTimeout</entry>
                            <entry>java.lang.Long</entry>
                            <entry>The timeout, in milli seconds, to refresh.</entry>
                        </row>
                        <row>
                            <entry>DiscoveryInitialWaitTimeout</entry>
                            <entry>java.lang.Long</entry>
                            <entry>The initial time to wait for discovery.</entry>
                        </row>
                        <row>
                            <entry>LoadBalancingPolicyClassName</entry>
                            <entry>java.lang.String</entry>
                            <entry>The load balancing policy class to use.</entry>
                        </row>
                        <row>
                            <entry>PingPeriod</entry>
                            <entry>java.lang.Long</entry>
                            <entry>The period, in milliseconds, to ping the server for
                                failure.</entry>
                        </row>
                        <row>
                            <entry>ConnectionTTL</entry>
                            <entry>java.lang.Long</entry>
                            <entry>The time to live for the connection.</entry>
                        </row>
                        <row>
                            <entry>CallTimeout</entry>
                            <entry>java.lang.Long</entry>
                            <entry>the call timeout, in milli seconds, for each packet sent.</entry>
                        </row>
                        <row>
                            <entry>DupsOKBatchSize</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The batch size of message acks to use if Dups ok is used.</entry>
                        </row>
                        <row>
                            <entry>TransactionBatchSize</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The batch size to use for sending messages  within a
                                transaction</entry>
                        </row>
                        <row>
                            <entry>ConsumerWindowSize</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The window size for the consumers internal buffer.</entry>
                        </row>
                        <row>
                            <entry>ConsumerMaxRate</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The max rate a consumer can receive.</entry>
                        </row>
                        <row>
                            <entry>ProducerWindowSize</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The window size for the sending of messages.</entry>
                        </row>
                        <row>
                            <entry>ProducerMaxRate</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The max rate a producer can send messages.</entry>
                        </row>
                        <row>
                            <entry>MinLargeMessageSize</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The size a message can be, in bytes, before it is sent as a multi
                                part large message.</entry>
                        </row>
                        <row>
                            <entry>BlockOnAcknowledge</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>If true then block on acknowledge of messages.</entry>
                        </row>
                        <row>
                            <entry>BlockOnNonPersistentSend</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>If true then block when sending non persistent messages</entry>
                        </row>
                        <row>
                            <entry>BlockOnPersistentSend</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>If true then block when sending persistent messages</entry>
                        </row>
                        <row>
                            <entry>AutoGroup</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>If true then auto group messages</entry>
                        </row>
                        <row>
                            <entry>MaxConnections</entry>
                            <entry>java.lang.Integer</entry>
                            <entry>The max number of connections.</entry>
                        </row>
                        <row>
                            <entry>PreAcknowledge</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>Whether to pre acknowledge messages before sending to
                                consumer</entry>
                        </row>
                        <row>
                            <entry>RetryInterval</entry>
                            <entry>java.lang.Long</entry>
                            <entry>How long to wait , in milli seconds, before retrying a failed
                                connection</entry>
                        </row>
                        <row>
                            <entry>RetryIntervalMultiplier</entry>
                            <entry>java.lang.Double</entry>
                            <entry>Used for calculating the retry interval</entry>
                        </row>
                        <row>
                            <entry>FailoverOnServerShutdown</entry>
                            <entry>java.lang.Boolean</entry>
                            <entry>If true client will reconnect to another server if
                                available</entry>
                        </row>
                        <row>
                            <entry>ClientID</entry>
                            <entry>java.lang.String</entry>
                            <entry>The client ID of the connection</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Adapter Outbound configuration</title>
            <para>The outbound configuration should remain unchanged as they define Connection
                Factories that are used by EE components. These Connection Factories can be defined
                inside a configuration file that matches the name <literal>*-ds.xml</literal>.
                You'll find a default <literal>jms-ds.xml</literal> configuration under the <literal
                    >messaging.sar</literal> directory in the Jboss AS deployment. the connection
                factories defined in the config file inherit their properties from the main <literal
                    >ra.xml</literal> config but can also be overridden, the following example show
                how to define one.</para>
            <programlisting>&lt;tx-connection-factory>
      &lt;jndi-name>RemoteJmsXA&lt;/jndi-name>
      &lt;xa-transaction/>
      &lt;rar-name>jms-ra.rar&lt;/rar-name>
      &lt;connection-definition>org.jboss.messaging.ra.JBMConnectionFactory&lt;/connection-definition>
      &lt;config-property name="SessionDefaultType" type="java.lang.String">javax.jms.Topic&lt;/config-property>
      &lt;config-property name="ConnectorClassName" type="java.lang.String">org.jboss.messaging.integration.transports.netty.NettyConnectorFactory&lt;/config-property>
      &lt;config-property name="ConnectionParameters" type="java.lang.String">jbm.remoting.netty.port=5445&lt;/config-property>
      &lt;max-pool-size>20&lt;/max-pool-size>
&lt;/tx-connection-factory></programlisting>
            <para>In this example the connection factory will be bound to JNDI with the name
                    <literal>RemoteJmsXA</literal> and can be looked up in the usual way using JNDI
                or defined within the EJB or MDB as such:</para>
            <programlisting>@Resource(mappedName="java:RemoteJmsXA")
private ConnectionFactory connectionFactory;</programlisting>
            <para>The <literal>config-property</literal> elements are what over rides those in the
                    <literal>ra.xml</literal> config.</para>
        </section>
        <section>
            <title>Adapter Inbound configuration</title>
            <para>The inbound configuration should again remain unchanged. This controls what
                forwards messages onto MDB's. It is possible to override properties on the MDB by
                adding an activation config to the MDB itself. This could be used to configure the
                MDB to consume from a different server. The next section demonstrates over riding
                the configuration.</para>
        </section>
    </section>
    <section>
        <title>Using JBM with MDBs in JBoss AS</title>
        <para>Once the JCA Connector is configured, as shown previously, the MDB's can be configured
            to consume messages from the MDB server.</para>
        <para>This is best done by using the <literal>MessageDriven</literal> tag on the MDB itself.
            The following shows an example.</para>
        <programlisting>@MessageDriven(name = "MessageMDBExample",
               activationConfig =
                     {
                        @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"),
                        @ActivationConfigProperty(propertyName = "destination", propertyValue = "queue/testQueue"),
                        @ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue = "Auto-acknowledge"),
                        @ActivationConfigProperty(propertyName = "ConnectorClassName", propertyValue = "org.jboss.messaging.integration.transports.netty.NettyConnectorFactory"),
                        @ActivationConfigProperty(propertyName = "ConnectionParameters", propertyValue = "jbm.remoting.netty.port=5545")
                     })
public class MDBRemoteExample implements MessageListener
{
   public void onMessage(Message message)
   {
      try
      {
         //Step 9. We know the client is sending a text message so we cast
         TextMessage tm = (TextMessage)message;

         //Step 10. get the text from the message.
         String text = tm.getText();

         System.out.println("message " + text + " received");
         
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }
   }
}</programlisting>
        <para>In this example we have configured the MDB to consume from the queue named <literal
                >queue/testQueue</literal>. It is also possible to override properties for the
            inbound resource adapter here is well. Here the MDB is configured to connect to a
            different server.</para>
        <para>It is alsp possible to define these properties in the <literal>web.xml</literal>
            confid file. Refer to the JBoss AS documentation on how to do this.</para>
    </section>
    <section>
        <title>High Availability JNDI (HAJNDI)</title>
        <para>When using JBM in a clustered environment you will need to use the HAJNDI. This will
            round robin look ups for connection factories and give load balanced connections.</para>
        <para>To use it use the following properties when connecting to JNDI.</para>
        <programlisting>Hashtable&lt;String, String> jndiParameters = new Hashtable&lt;String, String>();
jndiParameters.put("java.naming.factory.initial", "org.jnp.interfaces.NamingContextFactory");
jndiParameters.put("java.naming.factory.url.pkgs=", "org.jboss.naming:org.jnp.interfaces");

initialContext = new InitialContext(jndiParameters);</programlisting>
        <para>For more information visit <ulink
                url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Clustering_Guide/5/html/clustering-jndi.html"
            /></para>
    </section>
    <section>
        <title>The JMS Bridge</title>
        <para>The JMS bridge allows different JMS servers from different JMS providers to be
            'bridged' together. A bridge will have a source destination from which it receives
            messages and a target destination to which it sends messages.</para>
        <para>The bridge is deployed by the JBoss Micro Container via a beans configuration file.
            This would typically be deployed inside the JBoss Application Server and the following
            example shows an example of a beans file that bridges 2 JBM servers although here they
            are actually the same server. </para>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;deployment xmlns="urn:jboss:bean-deployer:2.0">

       &lt;bean name="JMSBridge" class="org.jboss.messaging.jms.bridge.impl.JMSBridgeImpl">
           &lt;!-- JBoss Messaging must be started before the bridge -->
           &lt;depends>MessagingServer&lt;/depends>
           &lt;constructor>
               &lt;!-- Source ConnectionFactory Factory -->
               &lt;parameter>
                   &lt;inject bean="SourceCFF"/>
               &lt;/parameter>
               &lt;!-- Target ConnectionFactory Factory -->
               &lt;parameter>
                   &lt;inject bean="TargetCFF"/>
               &lt;/parameter>
               &lt;!-- Source DestinationFactory -->
               &lt;parameter>
                   &lt;inject bean="SourceDestinationFactory"/>
               &lt;/parameter>
               &lt;!-- Target DestinationFactory -->
               &lt;parameter>
                   &lt;inject bean="TargetDestinationFactory"/>
               &lt;/parameter>
               &lt;!-- Source username (no username here) -->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- Source password (no password here)-->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- Target username (no username here)-->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- Target password (no password here)-->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- Selector -->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- Interval to retry in case of failure (in ms) -->
               &lt;parameter>5000&lt;/parameter>
               &lt;!-- Maximum number of retries to connect to the source and target -->
               &lt;parameter>10&lt;/parameter>
               &lt;!-- Quality of service -->
               &lt;parameter>ONCE_AND_ONLY_ONCE&lt;/parameter>
               &lt;!-- Maximum batch size -->
               &lt;parameter>1&lt;/parameter>
               &lt;!-- Maximum batch time (-1 means infinite) -->
               &lt;parameter>-1&lt;/parameter>
               &lt;!-- Subscription name (no subscription name here)-->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- client ID  (no client ID here)-->
               &lt;parameter>&lt;null />&lt;/parameter>
               &lt;!-- concatenate JMS messageID to the target's message header -->
               &lt;parameter>true&lt;/parameter>
           &lt;/constructor>
           &lt;property name="transactionManager">
               &lt;inject bean="RealTransactionManager"/>
           &lt;/property>
       &lt;/bean>

       &lt;!-- SourceCFF describes the ConnectionFactory used to connect to the source destination -->
       &lt;bean name="SourceCFF" class="org.jboss.messaging.jms.bridge.impl.JNDIConnectionFactoryFactory">
           &lt;constructor>
               &lt;parameter>
                   &lt;inject bean="JNDI" />
               &lt;/parameter>
               &lt;parameter>/ConnectionFactory&lt;/parameter>
           &lt;/constructor>  
       &lt;/bean>

       &lt;!-- TargetCFF describes the ConnectionFactory used to connect to the target destination -->
       &lt;bean name="TargetCFF" class="org.jboss.messaging.jms.bridge.impl.JNDIConnectionFactoryFactory">
           &lt;constructor>
               &lt;parameter>
                   &lt;inject bean="JNDI" />
               &lt;/parameter>
               &lt;parameter>/ConnectionFactory&lt;/parameter>
           &lt;/constructor>  
       &lt;/bean>

       &lt;!-- SourceDestinationFactory describes the Destination used as the source -->
       &lt;bean name="SourceDestinationFactory" class="org.jboss.messaging.jms.bridge.impl.JNDIDestinationFactory">
           &lt;constructor>
               &lt;parameter>
                   &lt;inject bean="JNDI" />
               &lt;/parameter>
               &lt;parameter>/queue/source&lt;/parameter>
           &lt;/constructor>  
       &lt;/bean>

       &lt;!-- TargetDestinationFactory describes the Destination used as the target -->
       &lt;bean name="TargetDestinationFactory" class="org.jboss.messaging.jms.bridge.impl.JNDIDestinationFactory">
           &lt;constructor>
               &lt;parameter>
                   &lt;inject bean="JNDI" />
               &lt;/parameter>
               &lt;parameter>/queue/target&lt;/parameter>
           &lt;/constructor>  
       &lt;/bean>
       
       &lt;!-- JNDI is a Hashtable containing the JNDI properties required -->
       &lt;!-- to connect to the sources and targets JMS resrouces         -->       
      &lt;bean name="JNDI" class="java.util.Hashtable">
         &lt;constructor class="java.util.Map">
            &lt;map class="java.util.Hashtable" keyClass="java.lang.String"
                                             valueClass="java.lang.String">
               &lt;entry>
                  &lt;key>java.naming.factory.initial&lt;/key>
                  &lt;value>org.jnp.interfaces.NamingContextFactory&lt;/value>
               &lt;/entry>
               &lt;entry>
                  &lt;key>java.naming.provider.url&lt;/key>
                  &lt;value>jnp://localhost:1099&lt;/value>
               &lt;/entry>
               &lt;entry>
                  &lt;key>java.naming.factory.url.pkgs&lt;/key>
                  &lt;value>org.jboss.naming:org.jnp.interfaces"&lt;/value>
               &lt;/entry>
            &lt;/map>
         &lt;/constructor>
      &lt;/bean>

&lt;/deployment></programlisting>
        <para>The main bean deployed is the <literal>JMSBridge</literal> bean. A description of each
            of its constructor parameters in order follows:</para>
        <itemizedlist>
            <listitem>
                <para>Source Connection Factory Factory - This injects the <literal
                        >SourceCFF</literal> bean that is the connection factory defined later in
                    the beans file.</para>
            </listitem>
            <listitem>
                <para>Target Connection Factory Factory - This injects the <literal
                        >TargetCFF</literal> bean that is the connection factory defined later in
                    the beans file.</para>
            </listitem>
            <listitem>
                <para>Source Destination Factory Factory - This injects the <literal
                        >SourceDestinationFactory</literal> bean that is used to create or lookup
                    the sourcedestination.</para>
            </listitem>
            <listitem>
                <para>Target Destination Factory Factory - This injects the <literal
                        >TargetDestinationFactory</literal> bean that is used to create or lookup
                    the target destination.</para>
            </listitem>
            <listitem>
                <para>Source User Name - the user name to use for the source connection.</para>
            </listitem>
            <listitem>
                <para>Source Password - The password to use for the source connection.</para>
            </listitem>
            <listitem>
                <para>Target User Name - The user name to use for the target connection.</para>
            </listitem>
            <listitem>
                <para>Target Password - The password to use for thetarget connection.</para>
            </listitem>
            <listitem>
                <para>Retry Interval - Interval to retry in case of failure (in ms). </para>
            </listitem>
            <listitem>
                <para>Retries - Maximum number of retries to connect to the source and
                    target.</para>
            </listitem>
            <listitem>
                <para>Quality of Service - Either 'QOS_AT_MOST_ONCE', 'QOS_DUPLICATES_OK' or
                    'QOS_DUPLICATES_OK'. These are explained shortly.</para>
            </listitem>
            <listitem>
                <para>Batch Size - When using transactions how many messages to send per
                    batch.</para>
            </listitem>
            <listitem>
                <para>Batch Time - The maximum time to wait before committing a transaction anyway
                    (in MS).</para>
            </listitem>
            <listitem>
                <para>Subscription Name - The name of the subscription if using a durable subscriber
                    with the source connection.</para>
            </listitem>
            <listitem>
                <para>Client ID - The client ID to use for the source connection. Needed when
                    subscription name is provided.</para>
            </listitem>
            <listitem>
                <para>Concatenate Message ID - If this is set the message ID from the received
                    message will be concatenated as message header <literal
                        >JBM_BRIDGE_MSG_ID_LIST</literal>. This is because it will change once the
                    bridge forwards it. When passing through multiple bridges each ID is
                    concatenated to the list.</para>
                <note>
                    <para>when you receive the message you can send back a response using the
                        correlation id of the first message id, so when the original sender gets it
                        back it will be able to correlate it. </para>
                </note>
            </listitem>
        </itemizedlist>
        <section>
            <title>Source and Target Connection Factories</title>
            <para>The source and target connection factory factories are used to create the
                connection factory used to create the connection for the source or target
                server.</para>
            <para>In this example we have used the default provided by JBM that look up the
                connection factory using JNDI. For other Application Servers or JMS providers a new
                implementation may have to be provided. This can easily be done by implementing the
                interface <literal
                >org.jboss.messaging.jms.bridge.ConnectionFactoryFactory</literal>.</para>
        </section>
        <section>
            <title>Source and Target Destination Factories</title>
            <para>Again, similarly, these are used to create or lookup up the destinations. To
                provid a new implementation simple implement <literal
                    >org.jboss.messaging.jms.bridge.DestinationFactory</literal> interface.</para>
        </section>
        <section>
            <title>Quality Of Service</title>
            <para>The quality of service modes used by the bridge are described here in more
                detail.</para>
            <section>
                <title>QOS_AT_MOST_ONCE</title>
                <para>With this QoS mode messages will reach the destination from the source at most
                    once. The messages are consumed from the source and acknowledged before sending
                    to the destination. Therefore there is a possibility that if failure occurs
                    between removing them from the source and them arriving at the destination they
                    could be lost. Hence delivery will occur at most once. This mode is available
                    for both persistent and non persistent messages.</para>
            </section>
            <section>
                <title>QOS_DUPLICATES_OK</title>
                <para>With this QoS mode, the messages are consumed from the source and then
                    acknowledged after they have been successfully sent to the destination.
                    Therefore there is a possibility that if failure occurs after sending to the
                    destination but before acknowledging them, they could be sent again when the
                    system recovers. I.e. the destination might receive duplicates after a failure.
                    This mode is available for both persistent and non persistent messages.</para>
            </section>
            <section>
                <title>QOS_ONCE_AND_ONLY_ONCE</title>
                <para>This QoS mode ensures messages will reach the destination from the source once
                    and only once. (Sometimes this mode is known as "exactly once"). If both the
                    source and the destination are on the same JBoss Messaging server instance then
                    this can be achieved by sending and acknowledging the messages in the same local
                    transaction. If the source and destination are on different servers this is
                    achieved by enlisting the sending and consuming sessions in a JTA transaction.
                    The JTA transaction is controlled by JBoss Transactions JTA * implementation
                    which is a fully recovering transaction manager, thus providing a very high
                    degree of durability. If JTA is required then both supplied connection factories
                    need to be XAConnectionFactory implementations. This mode is only available for
                    persistent messages. This is likely to be the slowest mode since it requires
                    extra persistence for the transaction logging.</para>
                <note>
                    <para>For a specific application it may possible to provide once and only once
                        semantics without using the QOS_ONCE_AND_ONLY_ONCE QoS level. This can be
                        done by using the QOS_DUPLICATES_OK mode and then checking for duplicates at
                        the destination and discarding them. Some JMS servers provide automatic
                        duplicate message detection functionality, or this may be possible to
                        implement on the application level by maintaining a cache of received
                        message ids on disk and comparing received messages to them. The cache would
                        only be valid for a certain period of time so this approach is not as
                        watertight as using QOS_ONCE_AND_ONLY_ONCE but may be a good choice
                        depending on your specific application.</para>
                </note>
            </section>
            
            <section>
               <title>Example</title>
               <para>The <literal>javaee/jms-bridge</literal> example shows
                  how to configure and use a JMS Bridge to send messages to the source destination
                  and consume them from the target destination.</para>
            </section>
            
        </section>
   </section>
     
   <section id="xa-recovery">
      <title>XA Recovery</title>
      <para><emphasis>XA recovery</emphasis> deals with system or application failures to ensure that 
          of a transaction are applied consistently to all resources affected by the transaction,
          even if any of the application processes or the machine hosting them crash or 
          lose network connectivity. For more information on XA Recovery, refer to 
          <ulink url="http://www.jboss.org/community/wiki/JBossTransactions">JBoss Transactions</ulink>.</para>
         
      <para>When JBoss Messaging is integrated with JBoss AS, it can take advantage of JBoss Transactions
         to provide recovery of messaging resources. If messages are involved in a XA transaction, in the
         event of a server crash, the recovery manager will ensure that the transactions are recovered
         and the messages will either be committed or rolled back (depending on the transaction outcome)
         when the server is restarted.</para>
      
      <section>
         <title>XA Recovery Configuration</title>
         <para>To enable JBoss Messaging's XA Recovery, the following property must be added to
            the <literal>jta</literal> section of <literal>conf/jbossts-properties.xml</literal> of JBoss AS profiles:</para>
         <programlisting>
   &lt;properties depends="arjuna" name="jta"&gt;
      ...
                     
      &lt;property name="com.arjuna.ats.jta.recovery.XAResourceRecovery.JBMESSAGING1"
               value="org.jboss.messaging.jms.server.recovery.MessagingXAResourceRecovery;java:/XAConnectionFactory"/&gt;
   &lt;/properties&gt;
         </programlisting>
      
         <para>This informs the recovery manager that it can recovers JBoss Messaging XA 
            Resources using the <literal>XAConnectionFactory</literal> bound to <literal>java:/XAConnectionFactory</literal> in JNDI.
            A ConnectionFactory must have been configured with this JNDI name in <literal>jbm-jms.xml</literal> (see <xref linkend="using-jms.server.configuration" />).</para>
      </section>
      
      <section>
         <title>Example</title>
         <para>The <literal>javaee/xarecovery</literal> example shows
            how to configure XA Recovery and recover messages after a server crash.</para>
      </section>
      
   </section>         
</chapter>
