<?xml version="1.0" encoding="UTF-8"?>
<chapter id="command-buffering">
    <title>Command Buffering</title>
    <para>As JBoss Messaging clients send commands to their servers they store each sent command in
        an in-memory buffer. In the case that connection failure occurs and the client subsequently
        reconnects to the same server or fails over onto a replica server, as part of the
        reconnection protocol the server informs the client during reconnection with the id of the
        last command it successfully received from that client.</para>
    <para>If the client has sent more commands than were received befor failover it can replay any
        sent commands from its buffer so that the client and server can reconcile their
        states.</para>
    <para>The size of this buffer is configured by the <literal>SendWindowSize</literal> parameter,
        when the server has received <literal>SendWindowSize</literal> bytes of commands and
        processed them it will send back a command confirmation to the client, and the client can
        then free up space in the buffer.</para>
    <para>If you are using JMS and you're using the JMS service on the server to load your JMS
        connection factory instances into JNDI then this parameter can be configured in <literal
            >jbm-jms.xml</literal> using the element <literal>send-window-size</literal> a. If
        you're using JMS but not using JNDI then you can set these values directly on the <literal
            >JBossConnectionFactory</literal> instance using the appropriate setter method.</para>
    <para>If you're using core you can set these values directly on the <literal
            >ClientSessionFactory</literal> instance using the appropriate setter method.</para>
    <para>The send window is specified in bytes, and has a default value of <literal
        >1MiB</literal>.</para>
    <para>When the send buffer becomes full, any attempts to send more commands from the client will
        block until the client receives a confirmation from the server and clears out the buffer.
        Because of the blocking, the command buffer performs a type of <literal>flow
            control</literal>, preventing the client from overwhelming the server with
        commands.</para>
</chapter>
