<?xml version="1.0" encoding="UTF-8"?>
<chapter id="embedding-jbm">
    <title>Embedding JBoss Messaging</title>
    <para>JBoss Messaging was designed as a simple set of POJOs, and it was designed to be
        embeddable.</para>
    <para>Embedding JBM can be done in very few easy steps. Instantiate the configuration object,
        instantiate the server, start it, and you have a JBoss Messaging running in your virtual
        machine. Easy and simple like that.</para>
    <section>
        <title>POJO instantiation</title>
        <para>You can follow this step-by-step guide:</para>
        <para>Create the configuration object. If you need a configuration file, use <literal
                >FileConfigurationImpl</literal></para>
        <programlisting>import org.jboss.messaging.core.config.Configuration;
import org.jboss.messaging.core.config.impl.FileConfiguration;

...


Configuration config = new FileConfiguration();
config.setConfigurationUrl(urlToYourconfigfile);
config.start();</programlisting>
        <para>If you don't need to support a configuration file, just use <literal
                >ConfigurationImpl</literal> and change the config parameters accordingly, such as
            adding acceptors. </para>
        <para>The acceptors are configured through <literal>ConfigurationImpl</literal>. Just add
            the <literal>NettyAcceptorFactory</literal> on the transports the same way you would
            through the main configuration file.</para>
        <programlisting>import org.jboss.messaging.core.config.Configuration;
import org.jboss.messaging.core.config.impl.ConfigurationImpl;

...

Configuration config = new ConfigurationImpl();
HashSet&lt;TransportConfiguration> transports = new HashSet&lt;TransportConfiguration>();
      
transports.add(new TransportConfiguration(NettyAcceptorFactory.class.getName()));
transports.add(new TransportConfiguration(InVMAcceptorFactory.class.getName()));

config.setAcceptorConfigurations(transports);</programlisting>
        <para>You need to instantiate and start JBoss Messaging server. The class <literal
                >Messaging</literal> on package <literal>org.jboss.messaging.core.server</literal>
            has a few static methods helpful on instantiating the server, which is aways our
            preferable way of instantiating the server.</para>
        <programlisting>import org.jboss.messaging.core.server.Messaging;
import org.jboss.messaging.core.server.MessagingServer;

...

MessagingServer server = Messaging.newMessagingServer(config);

server.start();</programlisting>
        <para>You also have the option of instantiating <literal>MessagingServerImpl</literal>
            directly:</para>
        <programlisting>MessagingServer server = new MessagingServerImpl(config,
                                                 ManagementFactory.getPlatformMBeanServer(),
                                                 new JBMSecurityManagerImpl());
server.start();
        </programlisting>
    </section>
    <section>
        <title>Dependency Frameworks</title>
        <para>You may also choose to use a dependency injection framework such as <trademark>JBoss
                Micro Container</trademark> or <trademark>Spring Framework</trademark>.</para>
        <para>JBoss Messaging standalone uses JBoss Micro Container as the injection framework.
                <literal>JBMBootstrapServer</literal> and <literal>jbm-jboss-beans.xml</literal>
            which are part of the JBoss Messaging distribution provide a very complete
            implementation of what's needed to bootstrap the server using JBoss Micro Container. </para>
        <para>When using JBoss Micro Container, you need to provide a XML with the four objects
            required to instantiate a Server:</para>
        <itemizedlist>
            <listitem>
                <para>The configuration. We will use <literal>ConfigurationImpl</literal></para>
            </listitem>
            <listitem>
                <para>A <literal>MBeanServer</literal> required by management.</para>
            </listitem>
            <listitem>
                <para>The security manager</para>
            </listitem>
            <listitem>
                <para>And the messaging server itself.</para>
            </listitem>
        </itemizedlist>
        <para>A very basic XML Bean declaration for the JBoss Micro Container would be:</para>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>

&lt;deployment xmlns="urn:jboss:bean-deployer:2.0">

    &lt;bean name="MBeanServer" class="javax.management.MBeanServer">
      &lt;constructor factoryClass="java.lang.management.ManagementFactory"
                   factoryMethod="getPlatformMBeanServer"/>
   &lt;/bean> 

   &lt;!-- The core configuration -->
   &lt;bean name="Configuration" 
         class="org.jboss.messaging.core.config.impl.FileConfiguration">
   &lt;/bean>

	&lt;!-- The security manager -->
   &lt;bean name="JBMSecurityManager" 
       class="org.jboss.messaging.core.security.impl.JBMSecurityManagerImpl">
      &lt;start ignored="true"/>
      &lt;stop ignored="true"/>
   &lt;/bean>

	&lt;!-- The core server -->
   &lt;bean name="MessagingServer" 
         class="org.jboss.messaging.core.server.impl.MessagingServerImpl">
     &lt;start ignored="true"/>
      &lt;stop ignored="true"/>  
      &lt;constructor>
         &lt;parameter>
            &lt;inject bean="Configuration"/>
         &lt;/parameter>
         &lt;parameter>
            &lt;inject bean="MBeanServer"/>
         &lt;/parameter>
         &lt;parameter>
            &lt;inject bean="JBMSecurityManager"/>
         &lt;/parameter>        
      &lt;/constructor>         
   &lt;/bean>
   &lt;/deployment></programlisting>
        <para><literal>JBMBootstrapServer</literal> provides an easy encapsulation of JBoss Micro
            Container.</para>
        <programlisting>JBMBootstrapServer bootStrap = new JBMBootstrapServer(new String[] {"jbm-jboss-beans.xml"});
        bootStrap.run();</programlisting>
    </section>
    <section>
        <title>Connecting to the Embedded JBoss Messaging</title>
        <para>There is no special requirement on connecting to an Embedded JBoss Messaging. As you
            are managing POJOs directly you just instantiate the factories.</para>
        <section>
            <title>Core API</title>
            <para>If using the core API, just create the <literal>ClientSessionFactory</literal> and
                use the regular core API.</para>
            <programlisting>ClientSessionFactory nettyFactory =  new ClientSessionFactoryImpl(
                      new TransportConfiguration(
                              InVMConnectorFactory.class.getName()), null);

ClientSession session = factory.createSession(false, true, true);
session.createQueue("example", "example", true);

ClientProducer producer = session.createProducer("example");
ClientMessage message = session.createClientMessage(true);

message.getBody().writeString("Hello");

producer.send(message);

session.start();

ClientConsumer consumer = session.createConsumer("example");

ClientMessage msgReceived = consumer.receive();
System.out.println("message = " + msgReceived.getBody().readString());

session.close();
            </programlisting>
        </section>
        <section>
            <title>JMS API</title>
            <para>Connection on an Embedded JBoss Messaging through JMS is also simple. Just
                instantiate <literal>JBossConnectionFactory</literal> directly. The following
                example illustrates that.</para>
            <programlisting>JBossConnectionFactory cf = new JBossConnectionFactory(
                            new TransportConfiguration(InVMConnectorFactory.class.getName()));

Connection conn = cf.createConnection();

conn.start();

Session sess = conn.createSession(true, Session.SESSION_TRANSACTED);

MessageProducer prod = sess.createProducer(queue);

TextMessage msg = sess.createTextMessage("Hello!");

prod.send(msg);

sess.commit();

MessageConsumer consumer = sess.createConsumer(queue);

TextMessage txtmsg = (TextMessage)consumer.receive();

System.out.println("Msg = " + txtmsg.getText());

sess.commit();

conn.close();
            </programlisting>
        </section>
    </section>
    <section>
        <title>JMS Embedding Example</title>
        <para>The <ulink url="../../../../examples/jms/embedded/readme.html"><literal
                    >JMS Embedding</literal> Example</ulink> shows how to setup and run JBoss Messaging
            embedded with JMS...</para>
    </section>
</chapter>
