<?xml version="1.0" encoding="UTF-8"?>
<chapter id="flow-control">
   <title>Flow Control</title>
   <para>blah</para>
   <section>
      <title>Consumer Flow Control</title>
      <para>Consumer flow can be controlled using window size or rate.</para>
      <section id="flow-control.consumer.window">
         <title>Window-Based Flow Control</title>
         <para>By default, JBoss Messaging consumers buffer messages from the server 
            in a client side buffer before the client receive them.       
            This improves performance: otherwise every time the client consumes a message,
            JBoss Messaging would 
            have to go the server to request the next message. In turn, this message would then get sent 
            to the client side, if one was available.</para>
         <para>A network round trip would be involved for <emphasis>every</emphasis> message and 
            considerably reduce performance.</para>
         <para>To prevent this, JBoss Messaging pre-fetches messages into a buffer on each consumer.
            The total maximum size of messages (in bytes) that will be buffered on each consumer is 
            determined by the <literal>consumer-window-size</literal> parameter.</para>
         <para>By default, the <literal>consumer-window-size</literal> is set to 1 MiB (1024 * 1024 bytes).</para>
         <para>The value can be:</para>
         <itemizedlist>
            <listitem><para><literal>-1</literal> for an <emphasis>unbounded</emphasis> buffer</para></listitem>
            <listitem><para><literal>0</literal> for <emphasis>no</emphasis> buffer at all</para></listitem>
            <listitem><para><literal>1</literal> for a buffer of <emphasis>1</emphasis> message</para></listitem>
            <listitem><para><literal>&gt;1</literal> for a buffer with the given maximum size</para></listitem>
         </itemizedlist>
         
         <para>Setting the consumer window size can considerably improve performance depending
            on the messaging use case. As an example, let's consider the two extremes:
         </para>
         <variablelist>  
            <varlistentry>
               <term>Fast consumers</term>
               <listitem>
                  <para>Fast consumers can process messages as fast as they
                     consume them (or even faster)</para>
                  <para>To allow fast consumers, set the <literal>consumer-window-size</literal> to -1.
                     This will allow <emphasis>unbounded</emphasis> message buffering on the client side.</para>
                  <para>Use this setting with caution: it can overflow the client memory if the consumer
                     is not able to process messages as fast as it receives them.</para>
               </listitem>
            </varlistentry>
            <varlistentry>
               <term>Slow consumers</term>
               <listitem>
                  <para>Slow consumers takes significant time to process each
                     message and it is desirable to prevent buffering messages on the client side so that they
                     can be delivered to another consumer instead</para>
                  <para>To allow slow consumers, set the <literal>consumer-window-size</literal> to 0 (for no buffer at all)
                     or 1 (to buffer only 1 message).
                     This will prevent from buffering many messages on the client side. Messages will remain on the server side
                     ready to be consumed by other consumers.</para>
               </listitem>
            </varlistentry>
         </variablelist>

         <para>Most of the consumers can not be clearly identified as fast or slow consumers but are in-between.
            In that case, setting the value of <literal>consumer-window-size</literal> to optimize performance
            depends on the messaging use case and requires benchmarks to find the optimal value.
         </para>
         
         <section>
            <title>Using Core API</title>
            <para>If JBoss Messaging Core API is used, the consumer window size is specified
               by <literal>ClientSessionFactory.setConsumerWindowSize()</literal>
               method and some of the <literal>ClientSession.createConsumer()</literal> methods.</para>
         </section>
         
         <section>
            <title>Using JMS</title>
            <para>if JNDI is used to look up the connection factory, the consumer window size is
            configured in <literal>jbm-jms.xml</literal>:</para>
            <programlisting>
&lt;connection-factory name="ConnectionFactory"&gt;
   &lt;connector-ref connector-name="netty-connector"/&gt;
   &lt;entries&gt;
      &lt;entry name="ConnectionFactory"/&gt;       
   &lt;/entries&gt;
      
   &lt;!-- Set the consumer window size to 0 to have *no* buffer on the client side --&gt;
   &lt;consumer-window-size&gt;0&lt;/consumer-window-size&gt;
&lt;/connection-factory&gt;
            </programlisting>
            <para>If the connection factory is directly instantiated, the consumer window size
               is specified by <literal>JBossConnectionFactory.setConsumerWindowSize()</literal>
               method.</para>
         </section>
         
         <section>
            <title>Example</title>
            <para>The <ulink url="../../../../examples/jms/no-consumer-buffering/readme.html">
               <literal>no-consumer-buffering</literal> example</ulink> shows
               how to configure JBoss Messaging to prevent consumer buffering when dealing with slow
               consumers.</para>
         </section>
      </section>
      
      <section>
          <title>Rate limited flow control</title>
          <para></para>
      </section>
   </section>
   
   <section>
       <title>Producer flow control</title>
       <para></para>
       
       <section>
           <title>Window based flow control</title>
           <para></para>
       </section>
       
       <section>
           <title>Rate limited flow control</title>
           <para></para>
       </section>
       
   </section>
   
</chapter>
