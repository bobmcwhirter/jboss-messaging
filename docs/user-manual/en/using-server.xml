<?xml version="1.0" encoding="UTF-8"?>
<chapter id="using-server">
    <title>Using the Server</title>
    <para>This chapter will familiarise you with how to use the JBoss Messaging server.</para>
    <para>We'll show where it is, how to start and stop it, and we'll describe the directory layout
        and what all the files are and what they do.</para>
    <para>For the remainder of this chapter when we talk about the JBoss Messaging server we mean
        the JBoss Messaging standalone server, in its default configuration with a JMS Service and
        JNDI service enabled.</para>
    <para>When running embedded in JBoss Application Server the layout may be slightly different but
        by-and-large will be the same.</para>
    <section>
        <title>Starting and Stopping the standalone server</title>
        <para>In the distribution you will find a directory called <literal>bin</literal>.</para>
        <para><literal>cd</literal> into that directory and you'll find a unix/linux script called
                <literal>run.sh</literal> and a windows batch file called <literal
            >run.bat</literal></para>
        <para>To run on Unix/Linux type <literal>./run.sh</literal></para>
        <para>To run on Windows type <literal>run.bat</literal></para>
        <para>These scripts are very simple and basically just set-up the classpath and some JVM
            parameters and start the JBoss Microcontainer. The Microcontainer is a light weight
            container used to deploy the JBoss Messaging POJO's</para>
        <para>To stop the server you'll also find a unix/linux script <literal>stop.sh</literal> and
            a windows batch file <literal>run.bat</literal></para>
        <para>To run on Unix/Linux type <literal>./stop.sh</literal></para>
        <para>To run on Windows type <literal>stop.bat</literal></para>
        <para>Please note that JBoss Messaging requires a Java 5 or later JDK to run. We recommend
            running on Java 6.</para>
    </section>
    <section>
        <title>Server JVM settings</title>
        <para>The run scripts <literal>run.sh</literal> and <literal>run.bat</literal> set some JVM
            settings for tuning running on Java 6 and choosing the garbage collection policy. We
            recommend using a parallel garbage collection algorithm to smooth out latency and
            minimises large GC pauses.</para>
        <para>By default JBoss Messaging runs in a maximum of 1GB of RAM. To increase the memory
            settings change the <literal>-Xms</literal> and <literal>-Xmx</literal> memory settings
            as you would for any Java program.</para>
        <para>If you wish to add any more JVM arguments or tune the existing ones, the run scripts
            are the place to do it.</para>
    </section>
    <section>
        <title>Server classpath</title>
        <para>JBoss Messaging looks for its configuration files on the Java classpath.</para>
        <para>The scripts <literal>run.sh</literal> and <literal>run.bat</literal> specify the
            classpath when calling Java to run the server.</para>
        <para>In the distribution, the run scripts will add the non clustered configuration
            directory to the classpath. This is a directory which contains a set of configuration
            files for running the JBoss Messaging server in a basic non-clustered configuration. In
            the distribution this directory is <literal>config/stand-alone/non-clustered/</literal>
            from the root of the distribution.</para>
        <para>The distribution contains several standard configuration sets for running:</para>
        <itemizedlist>
            <listitem>
                <para>Non clustered stand-alone.</para>
            </listitem>
            <listitem>
                <para>Clustered stand-alone</para>
            </listitem>
            <listitem>
                <para>Non clustered in JBoss Application Server</para>
            </listitem>
            <listitem>
                <para>Clustered in JBoss Application Server</para>
            </listitem>
        </itemizedlist>
        <para>You can of course create your own configuration and specify any configuration
            directory when running the run script.</para>
        <para>Just make sure the directory is on the classpath and JBoss Messaging will search there
            when starting up.</para>
    </section>
    <section>
        <title>LD_LIBRARY_PATH</title>
        <para>If you're using the <xref linkend="aio-journal">Asynchronous IO Journal</xref> on
            Linux, then the environment variable <literal>LD_LIBRARY_PATH</literal> needs to be set
            to the path that contains the shared library file that contains the native code for the
            AIO abstraction layer. This is done automatically in the <literal>run.sh</literal>
            script.</para>
    </section>
    <section>
        <title>System properties</title>
        <para>JBoss Messaging also takes a couple of Java system properties on the command line for
            configuring logging properties</para>
        <para>JBoss Messaging uses JDK logging to minimise dependencies on other logging systems.
            JDK logging can then be configured to delegate to some other framework, e.g. log4j if
            that's what you prefer.</para>
        <para>For more information on configuring logging, please see <xref linkend="logging"
            />.</para>
    </section>
    <section id="using-server.configuration">
        <title>Configuration files</title>
        <para>The configuration directory is specified on the classpath in the run scripts <literal
                >run.sh</literal> and <literal>run.bat</literal> This directory can contain the
            following files.</para>
        <itemizedlist>
            <listitem>
                <para><literal>jbm-jboss-beans.xml</literal>. This is the JBoss Microcontainer beans
                    file which defines what beans the Microcontainer should create and what
                    dependencies to enforce between them. Remember that JBoss Messaging is just a
                    set of POJOs. In the stand-alone server, it's the JBoss Microcontainer which
                    instantiates these POJOs and enforces dependencies between them and other beans.
                    Please see <xref linkend="usingserver.mainconfig"/> for more information on this
                    file.</para>
            </listitem>
            <listitem>
                <para><literal>jbm-configuration.xml</literal>. This is the main JBoss Messaging
                    configuration file. All the parameters in this file are described in <xref
                        linkend="configuration-index"/>.</para>
            </listitem>
            <listitem>
                <para><literal>jbm-queues.xml</literal>. This file contains pre-defined queues,
                    queue settings and security settings. The file is optional - all this
                    configuration can also live in <literal>jbm-configuration.xml</literal>. In
                    fact, the default configuration sets do not have a <literal
                        >jbm.queues.xml</literal> file. The purpose of allowing queues to be
                    configured in these files is to allow you to manage your queue configuration
                    over many files instead of being forced to maintain it in a single file. There
                    can be many <literal>jbm-queues.xml</literal> files on the classpath. All will
                    be loaded if found.</para>
            </listitem>
            <listitem>
                <para><literal>jbm-users.xml</literal> JBoss Messaging ships with a security manager
                    implementation which obtains user credentials from the <literal
                        >jbm-users.xml</literal> file. This file contains user, password and role
                    information. For more information on security ,please see <xref
                        linkend="security"/>.</para>
            </listitem>
            <listitem>
                <para><literal>jbm-jms.xml</literal> The distro configuration by default includes a
                    server side JMS service which mainly deploys JMS Queues, Topics and
                    ConnectionFactorys from this file into JNDI. If you're not using JMS, or you
                    don't need to deploy JMS objects on the server side, then you don't need this
                    file. For more information on using JMS, please see <xref linkend="using-jms"
                    />.</para>
            </listitem>
            <listitem>
                <para><literal>logging.properties</literal> This is used to configure the logging
                    handlers used by the Java logger. For more information on configuring logging,
                    please see <xref linkend="logging"/>.</para>
            </listitem>
            <listitem>
                <para><literal>log4j.xml</literal> This is the Log4j configuration if the Log4j
                    handler is configured.</para>
            </listitem>
        </itemizedlist>
        <note>
            <para>The property <literal>file-deployment-enabled</literal> in the <literal
                    >jbm-configuration.xml</literal> configuration when set to false mans that the
                other configuration files are not loaded. This is true by default.</para>
        </note>
        <para>It is also possible to use system property substitution in all the configuration
            files. by replacing a value with the name of a system property. Here is an example of
            this with a connector configuration:</para>
        <programlisting>&lt;connector name="netty">
         &lt;factory-class>org.jboss.messaging.integration.transports.netty.NettyConnectorFactory&lt;/factory-class>
         &lt;param key="jbm.remoting.netty.host"  value="${jbm.remoting.netty.host:localhost}" type="String"/>
         &lt;param key="jbm.remoting.netty.port"  value="${jbm.remoting.netty.port:5445}" type="Integer"/>
&lt;/connector></programlisting>
        <para>here you can see we have replaced 2 values with system properties <literal
                >jbm.remoting.netty.host</literal> and <literal>jbm.remoting.netty.port</literal>.
            These values will be replaced by the value found in the system property if there is one,
            if not they default back to localhost or 5445 respectively. It is also possible to not
            supply a default. i.e. <literal>${jbm.remoting.netty.host}</literal>, however the system
            property <emphasis>must</emphasis> be supplied in that case.</para>
    </section>
    <section id="server.microcontainer.configuration">
        <title>JBoss Microcontainer Beans File</title>
        <para>The stand-alone server is basically a set of POJOs which are instantiated by the light
                weight<ulink url="http://www.jboss.org/jbossmc/"> JBoss Microcontainer
            </ulink>engine.</para>
        <note>
            <para>A beans file is also needed when the server is deployed in the JBoss Application
                Server but this will deploy a slightly different set of objects since the
                Application Server will already have things like security etc deployed.</para>
        </note>
        <para>Let's take a look at an example beans file from the stand-alone server:</para>
        <para>
            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;deployment xmlns="urn:jboss:bean-deployer:2.0"&gt;

&lt;bean name="Naming" class="org.jnp.server.NamingBeanImpl"/&gt;

&lt;!-- JNDI server. Disable this if you don't want JNDI --&gt;
&lt;bean name="JNDIServer" class="org.jnp.server.Main"&gt;
   &lt;property name="namingInfo"&gt;
      &lt;inject bean="Naming"/&gt;
   &lt;/property&gt;
   &lt;property name="port"&gt;1099&lt;/property&gt;
   &lt;property name="bindAddress"&gt;localhost&lt;/property&gt;
   &lt;property name="rmiPort"&gt;1098&lt;/property&gt;
   &lt;property name="rmiBindAddress"&gt;localhost&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- MBean server --&gt;
&lt;bean name="MBeanServer" class="javax.management.MBeanServer"&gt;
   &lt;constructor factoryClass="java.lang.management.ManagementFactory"
      factoryMethod="getPlatformMBeanServer"/&gt;
&lt;/bean&gt; 

&lt;!-- The core configuration --&gt;
&lt;bean name="Configuration" class="org.jboss.messaging.core.config.impl.FileConfiguration"&gt;
&lt;/bean&gt;

&lt;!-- The security manager --&gt;
&lt;bean name="JBMSecurityManager" 
      class="org.jboss.messaging.core.security.impl.JBMSecurityManagerImpl"&gt;
   &lt;start ignored="true"/&gt;
   &lt;stop ignored="true"/&gt;
&lt;/bean&gt;

&lt;!-- The core server --&gt;
&lt;bean name="MessagingServer" class="org.jboss.messaging.core.server.impl.MessagingServerImpl"&gt;
   &lt;start ignored="true"/&gt;
   &lt;stop ignored="true"/&gt;  
   &lt;constructor&gt;
      &lt;parameter&gt;
         &lt;inject bean="Configuration"/&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
         &lt;inject bean="MBeanServer"/&gt;
      &lt;/parameter&gt;
      &lt;parameter&gt;
         &lt;inject bean="JBMSecurityManager"/&gt;
      &lt;/parameter&gt;        
   &lt;/constructor&gt;         
&lt;/bean&gt;

&lt;!-- The JMS server --&gt;
&lt;bean name="JMSServerManager" 
      class="org.jboss.messaging.jms.server.impl.JMSServerManagerImpl"&gt;
   &lt;constructor&gt;         
      &lt;parameter&gt;
         &lt;inject bean="MessagingServer"/&gt;
      &lt;/parameter&gt;         
   &lt;/constructor&gt;
&lt;/bean&gt;

&lt;/deployment&gt;</programlisting>
        </para>
        <para>We can see that, as well as the core JBoss Messaging server, the stand-alone server
            instantiates various different POJOs, lets look at them in turn:</para>
        <itemizedlist>
            <listitem>
                <para>JNDIServer</para>
                <para>Many clients like to look up JMS Objects from JNDI so we provide a JNDI server
                    for them to do that. If you don't need JNDI this can be commented out or
                    removed.</para>
            </listitem>
            <listitem>
                <para>MBeanServer</para>
                <para>In order to provide a JMX management interface a JMS MBean server is necessary
                    in which to register the management objects. Normally this is just the default
                    platform MBean server available in the JVM instance. If you don't want to
                    provide a JMX management interface this can be commented out or removed.</para>
            </listitem>
            <listitem>
                <para>Configuration</para>
                <para>The messaging server is configured with a Configuration object. In the default
                    stand-alone set-up it uses a FileConfiguration object which knows to read
                    configuration information from the file system. In different configurations such
                    as embedded you might want to provide configuration information from somewhere
                    else.</para>
            </listitem>
            <listitem>
                <para>Security Manager. The security manager used by the messaging server is
                    pluggable. The default one used just reads user-role information from the
                        <literal>jbm-users.xml</literal> file on disk. However it can be replaced by
                    a JAAS security manager, or when running inside JBoss Application Server it can
                    be configured to use the JBoss AS security manager for tight integration with
                    JBoss AS security. If you've disabled security altogether you can remove this
                    too.</para>
            </listitem>
            <listitem>
                <para>MessagingServer</para>
                <para>This is the core server. It's where 99% of the magic happens</para>
            </listitem>
            <listitem>
                <para>JMSServerManager</para>
                <para>This deploys any JMS Objects such as JMS Queues, Topics and ConnectionFactory
                    instances from <literal>jbm-jms.xml</literal> files on the disk. It also
                    provides a simple management API for manipulating JMS Objects. On the whole it
                    just translates and delegates its work to the core server. If you don't need to
                    deploy JMS Queues, Topics and ConnectionFactorys from server side configuration
                    and don't require the JMS management interface this can be disabled.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section id="usingserver.mainconfig">
        <title>The main configuration file.</title>
        <para>The configuration for the JBoss Messaging core server is contained in <literal
                >jbm-configuration.xml</literal>. This is what the FileConfiguration bean uses to
            configure the messaging server.</para>
        <para>There are many attributes which you can configure JBoss Messaging. In most cases the
            defaults will do fine, in fact every attribute can be defaulted which means a file with
            a single empty <literal>configuration</literal> element is a valid configuration file.
            The different configuration will be explained throughout the manual or you can refer to
            the configuration reference <link linkend="configuration-index">here</link>.</para>
    </section>
</chapter>
