<chapter id="UG2_introduction">

   <title>Introduction</title>

   <para>
      JBoss Messaging provides an open source and standards-based messaging platform that brings
      enterprise-class messaging to the mass market.
   </para>

   <para>
      JBoss Messaging implements a high performance, robust messaging core that is designed to
      support the largest and most heavily utilized SOAs, enterprise service buses (ESBs) and other
      integration needs ranging from the simplest to the highest demand networks.
      It will allow you to smoothly distribute your application load across your cluster,
      intelligently balancing and utilizing each nodes CPU cycles, with no single point of failure,
      providing a highly scalable and perform-ant clustering implementation. JBoss Messaging includes
 			a JMS front-end to deliver messaging in a standards-based format as well as being designed to be 
			able to support other messaging protocols in the future.
   </para>

   <para>
      JBoss Messaging will soon become an integral component of the JBoss Enterprise Middleware
      Suite (JEMS). Currently it
      is available for embedded use within the JBoss Application Server (JBossAS), and as a
      JBoss Microkernel-based stand-alone server. Work to integrate JBoss Messaging with the new
      JBoss Microcontainer is under way.
   </para>

   <para>
      The large and vibrant JEMS developer community fosters its continued innovation and
      enterprise quality. JBoss Messaging enables more agile applications in a wide range of
      scenarios from simple messaging needs to an enterprise-wide messaging foundation.
   </para>

   <para>
      JBoss Messaging adds flexibility to any SOA initiative.
   </para>




   <section id="features">
      <title>JBoss Messaging 1.2.0.GA Features</title>

      <para>
         JBoss Messaging provides:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               A fully compatible and Sun certified JMS 1.1 implementation, that currently works
               with a standard JBossAS 4.x installation and also as a JBoss Microkernel-based
               standalone deployment.
            </para>
         </listitem>
         <listitem>
            <para>
               A strong focus on performance, reliability and scalability with high throughput and
               low latency. JBoss Messaging already exceeds JBoss MQ in a number of measured
               performance metrics. Full results will follow.
            </para>
         </listitem>
         <listitem>
            <para>
               A foundation for JBoss ESB for SOA initiatives; JBoss ESB uses
               JBoss Messaging as its foundation.
            </para>
         </listitem>
      </itemizedlist>

      <para>
         JBoss Messaging consists of two major parts:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               JBoss Messaging Core – a transactional, reliable messaging transport system.
            </para>
            <itemizedlist>
               <listitem>
                  <para>
                     Supports generalized messages (not just JMS)
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Enables other messaging protocol façades to be added
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Distributed, transactional and reliable
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Clustering support
                  </para>
               </listitem>
            </itemizedlist>
         </listitem>

         <listitem>
            <para>
               JMS Façade – the JMS "personality" of JBoss Messaging.
            </para>
         </listitem>
      </itemizedlist>

      <para>
         Other JBoss Messaging features include:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               Publish-subscribe and point-to-point messaging models
            </para>
         </listitem>
         <listitem>
            <para>
               Topics that feed multiple message queues
            </para>
         </listitem>
         <listitem>
            <para>
               Persistent and non-persistent messages
            </para>
         </listitem>
         <listitem>
            <para>
               Guaranteed message delivery that ensures that messages arrive once and only once
            </para>
         </listitem>
         <listitem>
            <para>
               Transactional and reliable  - supporting ACID semantics
            </para>
         </listitem>
         <listitem>
            <para>
               Customizable security framework based on JAAS
            </para>
         </listitem>
      </itemizedlist>

      <para>
         JBoss Messaging 1.2 GA Clustering provides the following features:
      </para>

      <itemizedlist>
         <listitem>
            <para>
               Distributed queues. Messages sent to a distributed queue while attached to a
               particular node will be routed to a queue instance on a particular node according
               to a routing policy.
            </para>
         </listitem>
         <listitem>
            <para>
               Distributed topics. Messages sent to a distributed topic while attached at a
               particular node will be received by subscriptions on other nodes.
            </para>
         </listitem>
         <listitem>
            <para>
               Fully reliable message distribution. Once and only once delivery is fully guaranteed.
               When sending messages to a topic with multiple durable subscriptions
               across a cluster we guarantee that message reaches all the subscriptions
               (or none of them in case of failure).
            </para>
         </listitem>
         <listitem>
            <para>
              Persistent level reliability guarantee without persistence! By replicating persistent 
							messages between nodes in memory, we can obtain comparable reliability levels to persisting 
							messages to disk, without actually storing them to disk.
            </para>
         </listitem>
         <listitem>
            <para>
         			Pluggable routing implementation. The policy for routing messages to a queue is fully 
							pluggable and easily replaceable. The default policy always chooses a queue at the local 
							node if there is one, and if not, it round robins between queues on different nodes.
            </para>
         </listitem>
         <listitem>
            <para>
         			Intelligent message redistribution policy. Messages are automatically distributed between 
							nodes depending on how fast or slow consumers are on certain nodes. If there are no or slow 
							consumers on a particular queue node, messages will be pulled from that queue to a queue with 
							faster consumers on a different node. The policy is fully pluggable.
            </para>
         </listitem>
         <listitem>
            <para>
         			Shared durable subscriptions. Consumers can connect to the same durable subscription while 
							attached to different nodes. This allows processing load from durable subscriptions to be 
							distributed across the cluster in a similar way to queues.
            </para>
         </listitem>
         <listitem>
            <para>
         			High availability and seamless fail-over. If the node you are connected to fails, you 
							will automatically fail over to another node and will not lose any persistent messages. 
							You can carry on with your session seamlessly where you left off. Once and only once 
							delivery of persistent messages is respected at all times.
         </para>
         </listitem>
      </itemizedlist>


   </section>


   <section id="compatibility">
      <title>Compatibility with JBossMQ</title>

      <para>
         JBossMQ is the JMS implementation currently shipped within JBossAS.
         Since JBoss Messaging is JMS 1.1 and JMS 1.0.2b compatible, the JMS code  written against
         JBossMQ will run with JBoss Messaging without any changes.
      </para>

      <important>
         Even if JBoss Messaging deployment descriptors are very similar to JBoss MQ
         deployment descriptors, they are <emphasis>not</emphasis> identical, so they will require
         some simple adjustments to get them to work with JBoss Messaging.
      </important>
   </section>


</chapter>
