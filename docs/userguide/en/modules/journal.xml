<?xml version="1.0" encoding="UTF-8"?>
<chapter id="journal">
   <title>The journal based persistence approach</title>
   <section id="journal.asyncio">
      <title>ASYNCIO</title>
      <para>If you are using JBoss Messaging 2 on a Linux system, you can take full advantage of this feature. All you
         have to do is to make sure libaio is installed and you are using ext3 or ext2 or newer kernels.
      </para>
      <para>to install libaio on Fedora or Red Hat run the command 'yum install libaio' or on Ubuntu run either 'sudo
         apt-get install libaio' or 'aptitude install libaio1'. For other OS's refer to the OS manual.
      </para>
      <para>Instead of synchronizing the whole disk on every commit required by the journal, We submit writes directly
         to the kernel and we get callbacks when the information is stored on the hard drive. With that
         we maximize performance by isolating the persistnce of one transaction from another and also by using Direct
         Memory Access between the Journal and the Kernel. With AIO you can have high rate transactions even when you
         commit several small transactions.
         We are planing migrating this native liraries to other platforms besides Linux, as other OS's will have
         different options for Asynchronous IO.
      </para>
   </section>
   <section id="journal.nio">
      <title>NIO</title>
      <para>If AIO is not available JBM will fall back to using NIO.</para>
      <para>Both NIO and AIO journals share a lot of its implementation at an abstract level and we have verified that
         even our Journal using NIO will perform well.
      </para>
   </section>
   <section id="journal.jdbc">
      <title>JDBC</title>
      <para>We are not supporting any JDBC mapping on JBoss Messaging 2 Alpha. JDBC is planned for Beta for users that
         require a database for management purposes.
         We will of course optimize JDBC access but we won't expect a lot of performance for persistent messages on JDBC
         as a relational database wasn't designed to the demand levels required by a Messaging System.
      </para>
   </section>
</chapter>