<?xml version="1.0" encoding="UTF-8"?>
<chapter id="performance">
  <title>Performance Tests</title>

  <section id="performance.running">
    <title>How to execute our performance tests</title>

    <para>JBoss Messaging 2.0 ships with a set of basic performance measurements comparing our performance against a selection of other open source messaging systems. We would like to provide performance figures against proprietary systems too, but unfortunately, this is usually prohibited by the other messaging system's licence terms</para>
    <note>
    <para>It should be stressed that these performance figures are far from exhaustive and provide a basic view for how JBoss Messaging 2.0 performs against the other systems in a selection of simple and classic JMS use cases. All the tests use the standard JMS 1.1 API. Please remember JBoss Messaging 2.0 is only an alpha release so don't expect this release to be perfect in all scenarios, although it is interesting to observe that even at this early stage JBoss Messaging 2.0 appears to provide better performance than the other messaging systems. JBoss Messaging 2.0 is still largely un-optimised - we have more performance to squeeze out still. More in depth performance figures will be provided for the final GA release.</para>
    </note>
    <para>In the spirit of open-ness and not wanting to make performance claims we cannot substantiate, all these performance figures can easily be reproduced using just the tools available in this distribution, assuming you have installed the other messaging systems.
    We have used the <link linkend="examples">JMS Examples</link> to
    produce these numbers, and we used perfSender and perfListener with
    different scenarios. You can replicate those scenarios using these instructions provided below:</para>

    <para>All messages used in the tests are BytesMessage instances with 1K bodies. Measurement time is taken from the time of the first message sent after the warmup period to the time of the last message consumed. Message throughput rates are measured in messages / sec. In most tests 200000 messages were sent, although this was reduced with some providers due to the provider running out of memory. In all tests we first start a consumer listening on the queue, then start a producer sending to the queue. Broker was running on the server machine, and both the producer and the consumer were running on the client machine.</para>
    
    <para>The tests were performed on very basic commodity hardware. In the near future we will be obtaining the use of a large performance lab with serious hardware, on which we look forward to obtaining more results</para>
    
    <itemizedlist>
      <listitem>
        <para>Test 1. Send non persistent, non transactional messages. Consume messages non transactional with ack mode DUPS_OK_ACKNOWLEDGE</para>
	<programlisting>
           <para>ant perfListener</para>
           <para>ant perfSender</para>
        </programlisting>
      </listitem>
      <listitem>
        <para>Test 2. Send non persistent, non transactional, messages. Consume mesages non transactional with ack mode AUTO_ACKNOWLEDGE</para>
	<programlisting>
	   <para>ant perfListener -Dsess.ackmode=AUTO_ACK</para>
           <para>ant perfSender</para>
        </programlisting>
      </listitem>
      <listitem>
	<para>Test 3. Send persistent (blocking *) non transactional, messages. Consume with ack mode DUPS_OK_ACKNOWLEDGE</para>
	<programlisting>
           <para>ant perfListener</para>
	   <para>ant perfSender -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
      <listitem>
	<para>Test 4. Send persistent (non blocking *), non transactional, messages. Consume with ack mode DUPS_OK_ACKNOWLEDGE</para>
	<programlisting>
           <para>ant perfListener</para>
	   <para>ant perfSender -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
      <listitem>
	<para>Test 5. Send persistent (blocking *), non transactional, messages. Consume with ack mode AUTO_ACKNOWLEDGE</para>
	<programlisting>
	   <para>ant perfListener -Dsess.ackmode=AUTO_ACK</para>
	   <para>ant perfSender -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
      <listitem>
	<para>Test 6. Send persistent (non blocking *), non transactional, messages. Consume with ack mode AUTO_ACKNOWLEDGE</para>
	<programlisting>
	   <para>ant perfListener -Dsess.ackmode=AUTO_ACK</para>
	   <para>ant perfSender -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
      <listitem>
        <para>Test 7. Large transaction test. Send persistent, transactional, messages with transaction size = 1000. Consume persistent transactional, transaction size = 1000</para>
	<programlisting>
	   <para>ant perfListener -Dsess.trans=true -Dsess.trans.size=1000</para>
	   <para>ant perfSender -Dsess.trans=true -Dsess.trans.size=1000 -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
      <listitem>
        <para>Test 8. Small transaction test. Send persistent, transactional, messages with transaction size = 2. Consume persistent transactional, transaction size = 2</para>
	<programlisting>
           <para>ant perfListener -Dsess.trans=true -Dsess.trans.size=2</para>
	   <para>ant perfSender -Dsess.trans=true -Dsess.trans.size=2 -Ddelivery.mode=PERSISTENT</para>
        </programlisting>
      </listitem>
    </itemizedlist>
    
    <para>* Some messaging systems send persistent messages by default synchronously, and others send them by default asynchronously. Some supports both modes and others only support one. To avoid confusion we consider sending persistent messages synchronously or asynchronously separately. Configuring a particular system to send synchronously or asynchronously is specific to the system. For instance in Apache QPID we can specify use blocking mode by providing the system property "sync_persistence" with the value "true" to the client.</para>

  </section>
  
  <section id="performance.systemsUsed">
     <title>Systems Used</title>

    <para>All the tests were executed on the same hardware, operating system and JDK configuration. All messaging system configuration was with out of the box defaults unless otherwise stated.</para>
    
    <itemizedlist>
      <listitem>
        <para>Client:</para>
        <para>Hardware: Dell Latitude D820, dual core 2 x 2GHz Intel CoreDuo, 2GB RAM, 1GB ethernet card.</para>
	<para>Operating system: Linux, 32 bit, kernel version 2.6.22-14-generic</para>
	<para>JDK: Sun JDK 1.6.0_03-b05</para>
      </listitem>
      <listitem>
        <para>Server:</para>
        <para>Dell Precision 470 workstation, dual cpu 2 X 2.8 GHz Intel Xeon 64 bit, 2GB RAM, 1GB ethernet card.</para>
	<para>Operating system: Linux, 64 bit, kernel version 2.6.22-14-generic</para>
	<para>JDK: Sun JDK 1.6.0_03-b05 64bit</para>
      </listitem>
      <listitem>
	<para>Network:</para>
	<para>1 GB ethernet</para>
	<para>Netgear GS105 Gigabit switch</para>
      </listitem>      
    </itemizedlist>
  </section>

  <section id="performance.results">
    <title>Performance Results</title>

    <para>All the tests were executed against these following messaging systems:</para>
    
    <itemizedlist>
      <listitem>
         <para>1. JBM 2.0 alpha. Out of the box config used.</para>
      </listitem>
      <listitem>
	<para>2. JBM 1.4.0.SP3_CP02 - this is the production version used in JBoss Enterprise Application Platform 4.3 GA CP01. Out of the box config used. Used with MySQL 5.0.45 colocated with server and InnoDB tables with innodb_flush_log_at_trx_commit=1 (enable sync at tx commit)</para>
      </listitem>      
      <listitem>
        <para>3. ActiveMQ 5.1. This is the latest production version of ActiveMQ. Out of the box config was used with two changes: 1) syncOnWrite was set to true in the persistence config (otherwise ActiveMQ won't sync to disc on tx boundaries) 2) The upper queue memory limit was extended to 100MB otherwise the tests would block as queues became full.</para>
      </listitem>
      <listitem>
	 <para>4. JBoss MQ in JBoss AS 4.2.2.GA. This is JBoss' legacy JMS provider - now superceded by JBoss Messaging. Used with MySQL 5.0.45 colocated with server and Innodb tables with innodb_flush_log_at_trx_commit=1 (enable sync at tx commit)</para>
      </listitem>        
    </itemizedlist>

    <table>
      <title>Performance Results (all results in messages/sec)</title>
      <tgroup cols="5">
        <colspec align="center" />

        <thead>
          <row>
            <entry align="left">Test</entry>

	    <entry align="center">JBM 2.0_Alpha</entry>
	    
	    <entry align="center">JBM 1.4.0.SP3_CP02</entry>
	    
            <entry align="center">Apache ActiveMQ 5.1</entry>

	    <entry align="center">JBoss MQ</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry align="left">Test 1. NP/Dups</entry>

	    <entry align="center">18,836</entry>
	    
	    <entry align="center">13,401</entry>
	    
            <entry align="center">12,963</entry>
            
	    <entry align="center">881</entry>
          </row>

          <row>
            <entry align="left">Test 2. NP/AutoAck</entry>

	    <entry align="center">14,143</entry>
	    
	    <entry align="center">3,889</entry>
	    
            <entry align="center">9,813</entry>
            
	    <entry align="center">672</entry>
          </row>
	  
          <row>
            <entry align="left">Test 3. Persist/Blocking/NonTX/DupsOk</entry>

	    <entry align="center">1,372</entry>
	    
	    <entry align="center">442</entry>
	    
            <entry align="center">312</entry>
            
	    <entry align="center">622</entry>
          </row>

          <row>
            <entry align="left">Test 4. Persist/Non Blocking/NonTX/DupsOk</entry>

	    <entry align="center">14,977</entry>
	    
	    <entry align="center">JBM 1.x does not support non blocking persistent message sends</entry>
	    
            <entry align="center">ActiveMQ 5.1 does not support non blocking persistent message sends</entry>
            
	    <entry align="center">JBoss MQ does not support non blocking persistent message sends</entry>
          </row>

          <row>
            <entry align="left">Test 5. Persist/Blocking/NonTX/AutoAck</entry>

	    <entry align="center">1,265</entry>
	    
	    <entry align="center">421</entry>
	    
            <entry align="center">524</entry>
            
	    <entry align="center">637</entry>
          </row>

          <row>
            <entry align="left">Test 6. Persist/Non Blocking/NonTX/AutoAck</entry>

	    <entry align="center">12,056</entry>
	    
	    <entry align="center">JBM 1.x does not support non blocking persistent message sends</entry>
	    
	    <entry align="center">ActiveMQ 5.1 does not support non blocking persistent message sends</entry>
            
	    <entry align="center">JBoss MQ does not support non blocking persistent message sends</entry>
          </row>

          <row>
            <entry align="left">Test 7. Large transactions. Persistent/Transacted size=1000</entry>

	    <entry align="center">9,607</entry>
	    
	    <entry align="center">1,355</entry>
	    
            <entry align="center">1,576</entry>
            
	    <entry align="center">805</entry>
          </row>

          <row>
            <entry align="left">Test 8. Small transactions. Persistent/Transacted size=2</entry>

	    <entry align="center">1,818</entry>
	    
	    <entry align="center">546</entry>
	    
            <entry align="center">396</entry>
            
	    <entry align="center">523</entry>
          </row>

        </tbody>
      </tgroup>
    </table>
  </section>
  
  <section id="performance.conclusions">
	  
    <title>Performance conclusions.</title>
    
    <para>JBoss Messaging 2.0 provides the highest throughput in all tests, and in particular shows ground breaking persistent performance for both transactional and non transactional operations.</para>
    <para>JBoss Messaging 1.4.0.SP3_CP02 and ActiveMQ 5.1 are good all-round performers and show similar and respectable performance.</para>
    <para>JBoss MQ has reasonable persistent performance, but is let down by poor non persistent results.
    </para>
    
  </section>
  
</chapter>