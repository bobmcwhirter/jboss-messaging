<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY libraries SYSTEM "../../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id$ -->

<project default="run" name="JBoss/Messaging Performance Framework">

   <!-- overridden to resolve thirdparty & module deps -->
   <dirname property="remote.root" file="${basedir}"/>
   <dirname property="project.root" file="${remote.root}"/>
   <property environment="ENV"/>

   <import file="../../tools/etc/buildmagic/build-common.xml"/>

   <!-- ========= -->
   <!-- Libraries -->
   <!-- ========= -->
   &libraries;

   <!-- ======= -->
   <!-- Modules -->
   <!-- ======= -->
   &modules;

   <!-- ================================================================== -->
   <!-- Configuration                                                      -->
   <!-- ================================================================== -->

   <property name="build.classes" value="${module.output}/classes"/>
   <property name="source.java" value="${module.source}"/>

   <path id="perf.compilation.classpath">
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.j2se.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path location="${module.root}/../src/resources/jboss-remoting.jar"/>
      <path location="${module.root}/../src/resources/jboss-serialization.jar"/>
      <path location="${module.root}/resources/jcommon-1.0.0-rc1.jar"/>
      <path location="${module.root}/resources/jfreechart-1.0.0-rc1.jar"/>
      <pathelement location="../output/classes"/>
   </path>

   <path id="perf.execution.classpath">
      <path refid="perf.compilation.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="trove.trove.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path location="${module.root}/../src/resources/hsqldb.jar"/>
      <pathelement location="${module.root}/etc"/>
      <pathelement location="${build.classes}"/>
      <pathelement location="../output/classes"/> <!-- TODO: I should use the Messaging classes that are deployed with the JBoss server -->

      <!-- required to run the benchmark on JBossMQ -->
      <path refid="jboss.messaging.classpath"/>

   </path>

   <!-- ===== -->
   <!-- Tasks -->
   <!-- ===== -->

   <target name="init">
      <mkdir dir="${build.classes}"/>
      <mkdir dir="${module.output}/lib"/>
      <mkdir dir="${module.output}/logs"/>
      <mkdir dir="${module.output}/db"/>
      <mkdir dir="${module.output}/results"/>
   </target>

   <target name="compile" depends="init">
      <javac destdir="${build.classes}"
         optimize="${javac.optimize}"
         target="${javac.target}"
         source="${javac.source}"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeAntRuntime="${javac.include.ant.runtime}"
         includeJavaRuntime="${javac.include.java.runtime}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.java}"/>
         <src path="${module.root}/tests"/>
         <classpath refid="perf.compilation.classpath"/>
      </javac>
      <rmic base="${build.classes}" includes="**/RMIExecutor.class, **/RegistryRunner.class">
         <classpath refid="perf.compilation.classpath"/>
      </rmic>

   </target>

   <target name="sar" depends="rmi-sar"/>

   <target name="rmi-sar" depends="compile">

      <!-- make first the unscoped sar for JBossMQ ... -->
      <mkdir dir="${build.classes}/META-INF"/>
      <mkdir dir="${build.classes}/xmdesc"/>
      <delete file="${build.classes}/META-INF/jboss-service.xml"/>
      <copy file="./src/etc/rmi-executor-service.xml"
            tofile="${build.classes}/META-INF/jboss-service.xml"
            filtering="yes">
         <filterset>
            <filter token="NAME_1" value="colocated-jbossmq"/>
            <filter token="NAME_2" value="colocated-jbossmq2"/>
         </filterset>
      </copy>
      <copy file="./src/etc/RMIExecutor-xmbean.xml" todir="${build.classes}/xmdesc"/>
      <jar jarfile="${module.output}/lib/rmi-executor.sar"
           manifest="./src/etc/default.mf">
         <fileset dir="${build.classes}">
            <include name="**"/>
         </fileset>
      </jar>

      <!-- ... then the scoped one for Messaging -->

      <delete file="${build.classes}/META-INF/jboss-service.xml"/>
      <copy file="./src/etc/rmi-executor-service.xml"
            tofile="${build.classes}/META-INF/jboss-service.xml"
            filtering="yes">
         <filterset>
            <filter token="NAME_1" value="colocated-messaging"/>
            <filter token="NAME_2" value="colocated-messaging2"/>
         </filterset>
      </copy>
      <!-- enable scoping -->
      <replaceregexp file="${build.classes}/META-INF/jboss-service.xml" flags="s">
         <regexp pattern="\x3c!\x2d-([ \t\n\r]*)(\x3cloader-repository\x3e.*\x3c/loader-repository\x3e)([ \t\n\r]*)\x2d-\x3e"/>
         <substitution expression="\2"/>
      </replaceregexp>
      <jar jarfile="${module.output}/lib/rmi-executor-scoped.sar"
           manifest="./src/etc/default.mf">
         <fileset dir="${build.classes}">
            <include name="**"/>
         </fileset>
      </jar>

   </target>

   <target name="jbossremoting-sar" depends="compile">
      <mkdir dir="${build.classes}/META-INF"/>
      <mkdir dir="${build.classes}/xmdesc"/>
      <copy file="./src/etc/jbossremoting-executor-service.xml" tofile="${build.classes}/META-INF/jboss-service.xml"/>
      <copy file="./src/etc/JBossRemotingExecutor-xmbean.xml" todir="${build.classes}/xmdesc"/>
      <jar jarfile="${module.output}/lib/jbossremoting-executor.sar"
           manifest="./src/etc/default.mf">
         <fileset dir="${build.classes}">
            <include name="**"/>
         </fileset>
      </jar>
   </target>

   <target name="deploy-destinations">

      <!-- The performance tests may need specially crafted destination that behave equivalently
           on diferent providers.
      -->
      <copy file="./messaging-destinations-service.xml" todir="${ENV.JBOSS_HOME}/server/messaging/deploy"/>
      <copy file="./jbossmq-destinations-service.xml" todir="${ENV.JBOSS_HOME}/server/jbossmq/deploy"/>
   </target>

   <target name="undeploy-destinations">
      <delete file="${ENV.JBOSS_HOME}/server/messaging/deploy/messaging-destinations-service.xml"/>
      <delete file="${ENV.JBOSS_HOME}/server/jbossmq/deploy/jbossmq-destinations-service.xml"/>
   </target>

   <target name="run">

      <!-- <antcall target="start-executors"/> -->

      <antcall target="runner">
         <param name="action" value="measure"/>
         <param name="module.output" value="${module.output}"/>
         <param name="log.suffix" value="runner"/>
      </antcall>

      <!-- <antcall target="kill-executors"/> -->

      <antcall target="chart"/>
   </target>

   <target name="chart" depends="compile">
      <antcall target="runner">
         <param name="action" value="chart"/>
         <param name="module.output" value="${module.output}"/>
         <param name="log.suffix" value="charter"/>
      </antcall>
   </target>

   <target name="runner">
      <java classname="org.jboss.jms.perf.framework.Runner" fork="true">
         <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xnoagent"/>
         <jvmarg value="-Djava.compiler=NONE"/>
         <jvmarg value="-Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=runner"/>
         -->
         <arg line="-config ${module.root}/perf.xml -action ${action}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="${log.suffix}"/>
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="start-executors" depends="start-rmi-executors"/>
   <target name="kill-executors" depends="kill-rmi-executors"/>

   <target name="start-remoting-executors">
      <antcall target="start-standalone-remoting-executor">
         <param name="executor.host" value="localhost"/>
         <param name="executor.port" value="1234"/>
      </antcall>
      <antcall target="start-standalone-remoting-executor">
         <param name="executor.host" value="localhost"/>
         <param name="executor.port" value="1235"/>
      </antcall>
      <!-- no use to deploy colocated executors, they don't work with Remoting anyway -->
   </target>

   <target name="start-rmi-executors">
      <antcall target="start-rmi-registry"/>
      <sleep seconds="1"/>
      <antcall target="start-standalone-rmi-executor">
         <param name="registry.host" value="localhost"/>
         <param name="registry.port" value="7777"/>
         <param name="executor.name" value="standalone"/>
      </antcall>
      <antcall target="start-standalone-rmi-executor">
         <param name="registry.host" value="localhost"/>
         <param name="registry.port" value="7777"/>
         <param name="executor.name" value="standalone2"/>
      </antcall>
      <!-- deploy colocated executors; port values hardcoded for the time being -->
      <copy file="${module.output}/lib/rmi-executor-scoped.sar" todir="${ENV.JBOSS_HOME}/server/messaging/deploy"/>
      <copy file="${module.output}/lib/rmi-executor.sar" todir="${ENV.JBOSS_HOME}/server/jbossmq/deploy"/>
   </target>

   <target name="kill-remoting-executors">
      <antcall target="kill-remoting-executor">
         <param name="executor.host" value="localhost"/>
         <param name="executor.port" value="1234"/>
      </antcall>
      <antcall target="kill-remoting-executor">
         <param name="executor.host" value="localhost"/>
         <param name="executor.port" value="1235"/>
      </antcall>
   </target>

   <target name="kill-rmi-executors">
      <!-- undeploy colocated executors -->
      <delete file="${ENV.JBOSS_HOME}/server/messaging/deploy/rmi-executor-scoped.sar"/>
      <delete file="${ENV.JBOSS_HOME}/server/jbossmq/deploy/rmi-executor.sar"/>
      <!-- and kill the standalone VMs -->
      <antcall target="kill-rmi-executor">
         <param name="registry.host" value="localhost"/>
         <param name="registry.port" value="7777"/>
         <param name="executor.name" value="standalone"/>
      </antcall>
      <antcall target="kill-rmi-executor">
         <param name="registry.host" value="localhost"/>
         <param name="registry.port" value="7777"/>
         <param name="executor.name" value="standalone2"/>
      </antcall>
      <!-- allow some time for service undeployment -->
      <sleep seconds="3"/>
      <antcall target="kill-rmi-registry"/>
   </target>

   <target name="start-standalone-remoting-executor" description="Start a standalone (its own VM) JBoss Remoting executor">
      <echo message="Starting standalone Remoting executor ${executor.host}:${executor.port}"/>
      <java classname="org.jboss.jms.perf.framework.remoting.jbossremoting.JBossRemotingExecutor" fork="true" spawn="true">
         <arg value="${executor.port}"/>
         <arg value="${executor.host}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="remoting-executor-${executor.host}-${executor.port}"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="start-standalone-rmi-executor" description="Start a standalone (its own VM) RMI executor">
      <echo message="Starting standalone RMI executor rmi://${registry.host}:${registry.port}/${executor.name}"/>
      <java classname="org.jboss.jms.perf.framework.remoting.rmi.RMIExecutor" fork="true" spawn="true">
         <arg value="${executor.name}"/>
         <arg value="${registry.port}"/>
         <arg value="${registry.host}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="rmi-executor-${registry.host}-${registry.port}-${executor.name}"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="start-rmi-registry">
      <echo message="Starting registry"/>
      <java classname="org.jboss.jms.perf.framework.remoting.rmi.RegistryRunner" fork="true" spawn="true">
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="registry"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="kill-rmi-registry">
      <echo message="Killing registry"/>
      <java classname="org.jboss.jms.perf.framework.remoting.rmi.RegistryKiller" fork="true" spawn="true">
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="registry.kill"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="kill-remoting-executor" description="Kill a remoting executor (co-located or standalone)">
      <echo message="Killing remoting executor ${executor.host}:${executor.port}"/>
      <java classname="org.jboss.jms.perf.framework.remoting.jbossremoting.ExecutorKiller" fork="true">
         <arg value="${executor.port}"/>
         <arg value="${executor.host}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="remoting-executor-${executor.host}-${executor.port}.kill"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="kill-rmi-executor" description="Kill a RMI executor (co-located or standalone)">
      <echo message="Killing RMI executor rmi://${registry.host}:${registry.port}/${executor.name}"/>
      <java classname="org.jboss.jms.perf.framework.remoting.rmi.ExecutorKiller" fork="true">
         <arg value="${executor.name}"/>
         <arg value="${registry.port}"/>
         <arg value="${registry.host}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="rmi-executor-${registry.host}-${registry.port}-${executor.name}.kill"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <classpath refid="perf.execution.classpath"/>
      </java>
   </target>

   <target name="clean">
      <delete dir="${module.output}"/>
   </target>

   <target name="clean-data">
      <delete dir="${module.output}/db"/>
      <delete dir="${module.output}/results"/>
   </target>

   <target name="report" depends="tests, copy-stylesheets, compile-report"/>

   <target name="prepare-testdirs">
      <mkdir dir="${module.output}/reports"/>
   </target>

   <target name="tests" depends="compile, prepare-testdirs">

      <junit printsummary="${junit.printsummary}"
         fork="no"
         includeantruntime="yes"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="30000">

         <sysproperty key="module.output" value="${module.output}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="perf.execution.classpath"/>
         </classpath>
         <formatter type="xml" usefile="yes"/>
         <batchtest fork="${junit.batchtest.fork}"
            todir="${module.output}/reports"
            haltonfailure="no"
            haltonerror="no">
            <formatter type="plain" usefile="yes"/>
            <fileset dir="${module.output}/classes">
               <include name="**/test/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="copy-stylesheets">
      <mkdir dir="${module.output}/stylesheets"/>
      <copy todir="${module.output}/stylesheets" filtering="yes">
         <fileset dir="../tests/src/stylesheets">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <target name="compile-report" depends="copy-stylesheets">
      <mkdir dir="${module.output}/reports/html"/>
      <junitreport todir="${module.output}/reports">
         <fileset dir="${module.output}/reports">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
            todir="${module.output}/reports/html"
            styledir="${module.output}/stylesheets"/>
      </junitreport>
   </target>

   <target name="sleep">
      <sleep seconds="2"/>
   </target>

   <target name="something">
      <java classname="org.jboss.jms.perf.framework.Runner" fork="true">
         <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xnoagent"/>
         <jvmarg value="-Djava.compiler=NONE"/>
         <jvmarg value="-Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <arg line="-config ${module.root}/perf.xml"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="runner"/>
         <classpath refid="perf.execution.classpath"/>
      </java>
      <java classname="org.jboss.jms.perf.framework.Runner" fork="true">
         <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xnoagent"/>
         <jvmarg value="-Djava.compiler=NONE"/>
         <jvmarg value="-Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=executor"/>
         -->
         <arg line="-config ${module.root}/perf.xml -dump-database"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="log.suffix" value="runner"/>
         <classpath refid="perf.execution.classpath"/>
      </java>

   </target>


   <!-- TODO Move all the perf related stuff to own build.xml and separate out into sub project -->

   <!-- I collected these taks from the main project's build.xml. They don't really belong there
        since this is perf framework business and the perf framework is going to be separated in
        its own project anyway. I preserved them here for future consideration.
        TODO clean up and place these tasks where they belong
    -->

   <!--
   <target name="perf-sar-structure-messaging" depends="compile">
      <mkdir dir="${build.lib}"/>
      <mkdir dir="${build.perfsar}/META-INF"/>
      <mkdir dir="${build.perfsar}/xmdesc"/>
      <copy file="${source.java}/org/jboss/jms/perf/framework/PerfRunner-xmbean.xml" tofile="${build.perfsar}/xmdesc/PerfRunner-xmbean.xml"/>
      <copy file="${source.java}/org/jboss/jms/perf/framework/jboss-service-jbossmessaging.xml" tofile="${build.perfsar}/META-INF/jboss-service.xml"/>
      <copy file="${module.source}/../tests/bin/perf-jndi.properties" tofile="${build.perfsar}/perf-jndi.properties"/>
      <copy file="${module.source}/../tests/bin/jbossmessaging-perf.properties" tofile="${build.perfsar}/perf.properties"/>
      <copy todir="${build.perfsar}"> <fileset dir="${build.classes}"> <include name="**/jms/perf/**/*.class"/> </fileset> </copy>
   </target>

   <target name="perf-sar-messaging" depends="perf-sar-structure-messaging">
      <jar jarfile="${build.lib}/jboss-perf-messaging.sar" manifest="${build.etc}/default.mf">
          <fileset dir="${build.perfsar}">
             <include name="**"/>
          </fileset>
      </jar>
   </target>

   <target name="perf-sar-structure-mq" depends="compile">
      <mkdir dir="${build.lib}"/>
      <mkdir dir="${build.perfsar}/META-INF"/>
      <mkdir dir="${build.perfsar}/xmdesc"/>
      <copy file="${source.java}/org/jboss/jms/perf/framework/PerfRunner-xmbean.xml" tofile="${build.perfsar}/xmdesc/PerfRunner-xmbean.xml"/>
      <copy file="${source.java}/org/jboss/jms/perf/framework/jboss-service-jbossmq.xml" tofile="${build.perfsar}/META-INF/jboss-service.xml"/>
      <copy file="${module.source}/../tests/bin/perf-jndi.properties" tofile="${build.perfsar}/perf-jndi.properties"/>
      <copy file="${module.source}/../tests/bin/jbossmq-perf.properties" tofile="${build.perfsar}/perf.properties"/>
      <copy todir="${build.perfsar}">
         <fileset dir="${build.classes}">
            <include name="**/jms/perf/**/*.class"/>
         </fileset>
      </copy>
   </target>

   <target name="perf-sar-mq" depends="perf-sar-structure-mq">
      <jar jarfile="${build.lib}/jboss-perf-mq.sar" manifest="${build.etc}/default.mf">
         <fileset dir="${build.perfsar}">
            <include name="**"/>
         </fileset>
      </jar>
   </target>
   -->
</project>

