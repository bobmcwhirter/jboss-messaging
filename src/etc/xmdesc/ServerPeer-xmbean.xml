<?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE mbean PUBLIC
      "-//JBoss//DTD JBOSS XMBEAN 1.2//EN"
      "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_2.dtd">
<mbean>
   <description>JBoss Messaging Server Peer</description>
   <class>org.jboss.jms.server.ServerPeer</class>

   <!-- Managed constructors -->

   <constructor>
      <name>ServerPeer</name>
   </constructor>

   <!-- Managed attributes -->

   <!-- plugins ObjectNames -->

   <attribute access="read-write" getMethod="getPersistenceManager" setMethod="setPersistenceManager">
      <description>The ObjectName of the persistence manager</description>
      <name>PersistenceManager</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <attribute access="read-write" getMethod="getPostOffice" setMethod="setPostOffice">
      <description>The ObjectName of the post office</description>
      <name>PostOffice</name>
      <type>javax.management.ObjectName</type>
   </attribute>        
   
   <attribute access="read-write" getMethod="getJMSUserManager" setMethod="setJMSUserManager">
      <description>The ObjectName of the jms user manager</description>
      <name>JMSUserManager</name>
      <type>javax.management.ObjectName</type>
   </attribute>   
         
   <!-- instance access -->

   <attribute access="read-only" getMethod="getInstance">
      <description>The instance to be accessed by select plugins via a typed hard reference</description>
      <name>Instance</name>
      <type>java.lang.Object</type>
   </attribute>

   <!-- regular JMX attributes -->

   <attribute access="read-only" getMethod="getJMSVersion">
      <description>The version of the JMS specification implemented by this provider</description>
      <name>JMSVersion</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSMajorVersion">
      <description>The major version of the JMS specification implemented by this provider</description>
      <name>JMSMajorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSMinorVersion">
      <description>The minor version of the JMS specification implemented by this provider</description>
      <name>JMSMinorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSProviderName">
      <description>The JMS provider name</description>
      <name>JMSProviderName</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderVersion">
      <description>The fully qualified provider version string</description>
      <name>ProviderVersion</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderMajorVersion">
      <description>The JMS provider major version number</description>
      <name>ProviderMajorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderMinorVersion">
      <description>The JMS provider minor version number</description>
      <name>ProviderMinorVersion</name>
      <type>int</type>
   </attribute>
   
   <attribute access="read-only" getMethod="getDestinations">
      <description>Returns a Set of javax.jms.Destinations (Queues and Topics) containing the current active destinations</description>
      <name>Destinations</name>
      <type>java.util.Set</type>
   </attribute>
   
   <attribute access="read-only" getMethod="getMessageCounters">
      <description>The message counters</description>
      <name>MessageCounters</name>
      <type>java.util.List</type>
   </attribute>

   <attribute access="read-only" getMethod="getMessageStatistics">
      <description>The message statistics</description>
      <name>MessageStatistics</name>
      <type>java.util.List</type>
   </attribute>
      
   <attribute access="read-write" getMethod="getDefaultDLQ" setMethod="setDefaultDLQ">
      <description>The ObjectName of the default DLQ - used when an individual queue does not specify a DLQ</description>
      <name>DefaultDLQ</name>
      <type>javax.management.ObjectName</type>
   </attribute>  
   
   <attribute access="read-write" getMethod="getDefaultExpiryQueue" setMethod="setDefaultExpiryQueue">
      <description>The ObjectName of the default expiry queue - used when an individual queue does not specify an expiry queue</description>
      <name>DefaultExpiryQueue</name>
      <type>javax.management.ObjectName</type>
   </attribute>   

   <attribute access="read-write" getMethod="getServerPeerID" setMethod="setServerPeerID">
      <description>The ID of the ServerPeer. Must be unique per JBoss instance</description>
      <name>ServerPeerID</name>
      <type>int</type>
   </attribute>

   <attribute access="read-write" getMethod="getDefaultQueueJNDIContext" setMethod="setDefaultQueueJNDIContext">
      <description>The default JNDI context queues are bound under.</description>
      <name>DefaultQueueJNDIContext</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-write" getMethod="getDefaultTopicJNDIContext" setMethod="setDefaultTopicJNDIContext">
      <description>The default JNDI context topics are bound under.</description>
      <name>DefaultTopicJNDIContext</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-write" getMethod="getSecurityDomain" setMethod="setSecurityDomain">
      <description>The Security Domain to be used by the Server Peer</description>
      <name>SecurityDomain</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-write" getMethod="getDefaultSecurityConfig" setMethod="setDefaultSecurityConfig">
      <description>The Security config to use when the destination does not supply any</description>
      <name>DefaultSecurityConfig</name>
      <type>org.w3c.dom.Element</type>
   </attribute>
         
   <attribute access="read-write" getMethod="getDefaultMaxDeliveryAttempts" setMethod="setDefaultMaxDeliveryAttempts">
      <description>The default maximum delivery attempts for destinations, unless overridden on the destination</description>
      <name>DefaultMaxDeliveryAttempts</name>
      <type>int</type>
   </attribute>  
   
   <attribute access="read-write" getMethod="getFailoverStartTimeout" setMethod="setFailoverStartTimeout">
      <description>The maximum amount of time to wait for failover to begin</description>
      <name>FailoverStartTimeout</name>
      <type>long</type>
   </attribute> 
   
   <attribute access="read-write" getMethod="getFailoverCompleteTimeout" setMethod="setFailoverCompleteTimeout">
      <description>The maximum amount of time to wait for failover to complete</description>
      <name>FailoverCompleteTimeout</name>
      <type>long</type>
   </attribute>      
   
   <attribute access="read-write" getMethod="getDefaultRedeliveryDelay" setMethod="setDefaultRedeliveryDelay">
      <description>How long to wait before redelivery, can be overridden on the destination</description>
      <name>DefaultRedeliveryDelay</name>
      <type>long</type>
   </attribute>  
   
   <attribute access="read-write" getMethod="getMessageCounterSamplePeriod" setMethod="setMessageCounterSamplePeriod">
      <description>The period between which the message counter manager enquires for statistics from queues</description>
      <name>MessageCounterSamplePeriod</name>
      <type>long</type>
   </attribute> 
   
   <attribute access="read-write" getMethod="getClusterPullConnectionFactoryName" setMethod="setClusterPullConnectionFactoryName">
      <description>The name of the connection factory used to create connections to pull messages from one node to another</description>
      <name>ClusterPullConnectionFactoryName</name>
      <type>java.lang.String</type>
   </attribute> 

   <attribute access="read-write" getMethod="isDefaultPreserveOrdering" setMethod="setDefaultPreserveOrdering">
      <description>When pulling messages do we need to preserve the ordering of messages consumed from a particular producer, for a particular consumer?</description>
      <name>DefaultPreserveOrdering</name>
      <type>boolean</type>
   </attribute>    
   
   <attribute access="read-write" getMethod="getRecoverDeliveriesTimeout" setMethod="setRecoverDeliveriesTimeout">
      <description>When a failover occurs the max. amount of time the server will keep messages in its recovery area. waiting for clients to reconnect</description>
      <name>RecoverDeliveriesTimeout</name>
      <type>long</type>
   </attribute> 
   
   <attribute access="read-write" getMethod="getDefaultMessageCounterHistoryDayLimit" setMethod="setDefaultMessageCounterHistoryDayLimit">
      <description>The default max number of messages per day in message counter history</description>
      <name>DefaultMessageCounterHistoryDayLimit</name>
      <type>int</type>
   </attribute>

   <attribute access="read-write" getMethod="isSupportsFailover" setMethod="setSupportsFailover">
      <description>Should Server Side Failover be executed</description>
      <name>SupportsFailover</name>
      <type>boolean</type>
   </attribute>
   
   <attribute access="read-write" getMethod="isStrictTck" setMethod="setStrictTck">
      <description>Should strict TCK behaviour be always followed?</description>
      <name>StrictTck</name>
      <type>boolean</type>
   </attribute>
   
   <attribute access="write-only" setMethod="setSuckerPassword">
      <description>The password used for message suckers</description>
      <name>SuckerPassword</name>
      <type>java.lang.String</type>
   </attribute>   


   <!-- Managed operations -->

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>create</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>start</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>stop</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>destroy</name>
   </operation>

   <operation>
      <description>
         Deploys a queue with the specified name/JNDI name. The corresponding destination service will be instantiated, created and started.
      </description>
      <name>deployQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>java.lang.String</return-type>
   </operation>
   
   <operation>
      <description>
         Deploys a queue with the specified name/JNDI name and paging parameters. The corresponding destination service will be instantiated, created and started.
      </description>
      <name>deployQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>fullSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>pageSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>downCacheSize</name>
         <type>int</type>
      </parameter>            
      <return-type>java.lang.String</return-type>
   </operation>   

   <operation>
      <description>
         Undeploys the queue, but does not delete its data from storage.
      </description>
      <name>undeployQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>boolean</return-type>
   </operation>
   
   <operation>
      <description>
         Undeploys the queue, and deletes its data from storage
      </description>
      <name>destroyQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>boolean</return-type>
   </operation>   

   <operation>
      <description>
         Deploys a topic with the specified name/JNDI name. The corresponding destination service will be instantiated, created and started.
      </description>
      <name>deployTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>fullSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>pageSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>downCacheSize</name>
         <type>int</type>
      </parameter>         
      <return-type>java.lang.String</return-type>
   </operation>
   
   <operation>
      <description>
         Deploys a topic with the specified name/JNDI name and paging parameters. The corresponding destination service will be instantiated, created and started.
      </description>
      <name>deployTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>java.lang.String</return-type>
   </operation>   

   <operation>
      <description>
         Undeploys the topic, but does not delete all its data from storage
      </description>
      <name>undeployTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>boolean</return-type>
   </operation>
   
   <operation>
      <description>
      	Undeploys the topic and deletes all its data
      </description>
      <name>destroyTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>boolean</return-type>
   </operation>   
   
   <operation>
      <description>
         List all message counters in HTML
      </description>
      <name>listMessageCountersAsHTML</name>
      <return-type>java.lang.String</return-type>
   </operation>    
   
   <operation>
      <description>
         Reset all message counters
      </description>
      <name>resetAllMessageCounters</name>
   </operation>  
   
   <operation>
      <description>
         Reset all message counter histories
      </description>
      <name>resetAllMessageCounterHistories</name>
   </operation>    
   
   <operation>
      <description>
         Enable message counters
      </description>
      <name>enableMessageCounters</name>
   </operation> 
   
   <operation>
      <description>
         Disable message counters
      </description>
      <name>disableMessageCounters</name>
   </operation>       
   
   <operation>
      <description>
         Retrieve list of all prepared transaction ids
      </description>
      <name>retrievePreparedTransactions</name>
      <return-type>java.util.List</return-type>
   </operation>  
   
   <operation>
      <description>
         Show of all prepared transaction ids in HTML
      </description>
      <name>showPreparedTransactionsAsHTML</name>
      <return-type>java.lang.String</return-type>
   </operation>

   <operation>
      <description>
         Show of all information about active clients
      </description>
      <name>showActiveClientsAsHTML</name>
      <return-type>java.lang.String</return-type>
   </operation>


</mbean>
