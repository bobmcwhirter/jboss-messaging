<?xml version="1.0" encoding="UTF-8"?>
   <!DOCTYPE mbean PUBLIC
      "-//JBoss//DTD JBOSS XMBEAN 1.2//EN"
      "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_2.dtd">
<mbean>
   <description>JBoss Messaging Server Peer</description>
   <class>org.jboss.jms.server.ServerPeer</class>

   <!-- Managed constructors -->

   <constructor>
      <name>ServerPeer</name>
      <parameter>
         <name>ServerPeerID</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>DefaultQueueJNDIContext</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>DefaultTopicJNDIContext</name>
         <type>java.lang.String</type>
      </parameter>
   </constructor>

   <!-- Managed attributes -->

   <!-- plugins ObjectNames -->

   <attribute access="read-write" getMethod="getThreadPool" setMethod="setThreadPool">
      <description>The ObjectName of the thread pool plugin</description>
      <name>ThreadPool</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <attribute access="read-write" getMethod="getPersistenceManager" setMethod="setPersistenceManager">
      <description>The ObjectName of the persistence manager</description>
      <name>PersistenceManager</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <attribute access="read-write" getMethod="getMessageStore" setMethod="setMessageStore">
      <description>The ObjectName of the message store</description>
      <name>MessageStore</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <attribute access="read-write" getMethod="getChannelMapper" setMethod="setChannelMapper">
      <description>The ObjectName of the channel mapper</description>
      <name>ChannelMapper</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <!-- instance access -->

   <attribute access="read-only" getMethod="getInstance">
      <description>The instance to be accessed by select plugins via a typed hard reference</description>
      <name>Instance</name>
      <type>java.lang.Object</type>
   </attribute>

   <!-- regular JMX attributes -->

   <attribute access="read-only" getMethod="getJMSVersion">
      <description>The version of the JMS specification implemented by this provider</description>
      <name>JMSVersion</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSMajorVersion">
      <description>The major version of the JMS specification implemented by this provider</description>
      <name>JMSMajorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSMinorVersion">
      <description>The minor version of the JMS specification implemented by this provider</description>
      <name>JMSMinorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getJMSProviderName">
      <description>The JMS provider name</description>
      <name>JMSProviderName</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderVersion">
      <description>The fully qualified provider version string</description>
      <name>ProviderVersion</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderMajorVersion">
      <description>The JMS provider major version number</description>
      <name>ProviderMajorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getProviderMinorVersion">
      <description>The JMS provider minor version number</description>
      <name>ProviderMinorVersion</name>
      <type>int</type>
   </attribute>

   <attribute access="read-only" getMethod="getServerPeerID">
      <description>The ID of the ServerPeer. Must be unique per JBoss instance</description>
      <name>serverPeerID</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getLocatorURI">
      <description>The LocatorURI of the Connector to be used by this ServerPeer</description>
      <name>locatorURI</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getDefaultQueueJNDIContext">
      <description>The default JNDI context queues are bound under.</description>
      <name>DefaultQueueJNDIContext</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-only" getMethod="getDefaultTopicJNDIContext">
      <description>The default JNDI context topics are bound under.</description>
      <name>DefaultTopicJNDIContext</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-write" getMethod="getConnector" setMethod="setConnector">
      <description>The ObjectName of the Connector used by this ServerPeer</description>
      <name>Connector</name>
      <type>javax.management.ObjectName</type>
   </attribute>

   <attribute access="read-only" getMethod="getDestinations">
      <description>Returns a Set of javax.jms.Destinations (Queues and Topics) containing the current active destinations</description>
      <name>Destinations</name>
      <type>java.util.Set</type>
   </attribute>

   <attribute access="read-write" getMethod="getSecurityDomain" setMethod="setSecurityDomain">
      <description>The Security Domain to be used by the Server Peer</description>
      <name>SecurityDomain</name>
      <type>java.lang.String</type>
   </attribute>

   <attribute access="read-write" getMethod="getDefaultSecurityConfig" setMethod="setDefaultSecurityConfig">
      <description>The Security config to use when the destination does not supply any</description>
      <name>DefaultSecurityConfig</name>
      <type>org.w3c.dom.Element</type>
   </attribute>

   <attribute access="read-write" getMethod="getRemotingConnectionLeasePeriod" setMethod="setRemotingConnectionLeasePeriod">
      <description>Remoting connection lease period. The number of milliseconds that should be
         used when establishing the client lease period (meaning client will need to update its
         lease within this amount of time or will be considered dead). A negative value disables
         lease management, the clients won't be checked anymore.</description>
      <name>RemotingConnectionLeasePeriod</name>
      <type>long</type>
   </attribute>

   <!-- Managed operations -->

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>create</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>start</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>stop</name>
   </operation>

   <operation>
      <description>JBoss Service lifecycle operation</description>
      <name>destroy</name>
   </operation>

   <operation>
      <description>Creates a queue with the specified name/JNDI name. The corresponding destination service will be instantiated, created and started</description>
      <name>createQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>java.lang.String</return-type>
   </operation>
   
   <operation>
      <description>Creates a queue with the specified name/JNDI name and paging parameters
         The corresponding destination service will be instantiated, created and started</description>
      <name>createQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>fullSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>pageSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>downCacheSize</name>
         <type>int</type>
      </parameter>            
      <return-type>java.lang.String</return-type>
   </operation>   

   <operation>
      <description>Stops and destroys the corresponding destination service. If the destination was created dynamically (via createQueue()), then the service is also unregistered from the MBean server.</description>
      <name>destroyQueue</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
       <return-type>boolean</return-type>
   </operation>

   <operation>
      <description>Creates a topic with the specified name/JNDI name. The corresponding destination service will be instantiated, created and started</description>
      <name>createTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>fullSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>pageSize</name>
         <type>int</type>
      </parameter>
      <parameter>
         <name>downCacheSize</name>
         <type>int</type>
      </parameter>         
      <return-type>java.lang.String</return-type>
   </operation>
   
   <operation>
      <description>Creates a topic with the specified name/JNDI name and paging parameters
         The corresponding destination service will be instantiated, created and started</description>
      <name>createTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <parameter>
         <name>jndiName</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>java.lang.String</return-type>
   </operation>   

   <operation>
      <description>Stops and destroys the corresponding destination service. If can only destroy destinations that have been created programatically.</description>
      <name>destroyTopic</name>
      <parameter>
         <name>name</name>
         <type>java.lang.String</type>
      </parameter>
      <return-type>boolean</return-type>
   </operation>


</mbean>