#!/bin/sh
#
# bash script for running a single unit test case.
#
# It expects TARGET_CLASS and TARGET_TEST to be set. If they are not, it tries to load them
# from ./.testrc.
#
# Options:
#    -debug start the client VM in debugging mode
#    -remote set the "remote" system property so the server start in a remote VM
#    -remotedebug starts the VM that runs the remote server in debugging mode. The remote VM
#            will attempt to connect to the debugger, which should be lisening on 'rmiserver'
#
#
# $Id$
#


reldir=`dirname $0`


ENV_TEST_DATABASE=$TEST_DATABASE
ENV_TEST_SERIALIZATION=$TEST_SERIALIZATION

if [ -z "$TARGET_CLASS" -a -f $reldir/.testrc ]; then
   . $reldir/.testrc
fi

if [ -z "$TARGET_CLASS" ]; then
   echo "No TARGET_CLASS found! Set the TARGET_CLASS environment variable and try again." 1>&2
   exit 1
fi

if [ "$ENV_TEST_DATABASE" != "" ]; then
   TEST_DATABASE=$ENV_TEST_DATABASE
fi
if [ "$ENV_TEST_SERIALIZATION" != "" ]; then
   TEST_SERIALIZATION=$ENV_TEST_SERIALIZATION
fi

#
# We should use the same test execution classpath as the ant <junit> task, so we run ant to get
# it from there.
#

ant -Dtest.execution.classpath.file=bin/.test.execution.classpath -f $reldir/../build.xml get-test-execution-classpath
CLASSPATH=`cat $reldir/.test.execution.classpath`

outputdir="$reldir/../output"

if ! mkdir -p $outputdir/logs; then
   echo "failed to create $outputdir/logs"
fi

# reset the log files as by default log4j is configure to append
rm -f $outputdir/logs/*.log

cygwin=false;
case "`uname`" in
    CYGWIN*)
        cygwin=true
        ;;
esac

if [ $cygwin = true ]; then
    SEP=";"
else
    SEP=":"
fi

while [ "$1" != "" ]; do
    if [ "$1" = "-debug" ]; then
        if [ $cygwin = false ]; then
            if [ "$DEBUG_OPTS_SOCKET" = "" ]; then
                echo "No configured socket debugging options. Set DEBUG_OPTS_SOCKET in your environment or .testrc" 1>&2
                exit 1
            fi
            JAVA_OPTS="$DEBUG_OPTS_SOCKET"
        else
            if [ "$DEBUG_OPTS" = "" ]; then
                echo "No configured debugging options. Set DEBUG_OPTS in your environment or .testrc" 1>&2
                exit 1
            fi
            JAVA_OPTS="$DEBUG_OPTS"
        fi
    fi
    if [ "$1" = "-remote" ]; then
        isRemote=true;
        REMOTE_TEST="-Dremote=true"
    fi
    if [ "$1" = "-remotedebug" ]; then
        REMOTE_DEBUG_FLAG="-debug"
    fi
    shift
done

JAVA_OPTS="-Xmx1024M $JAVA_OPTS -Dmodule.output=$reldir/../output $REMOTE_TEST -Dtest.database=$TEST_DATABASE -Dtest.serialization=$TEST_SERIALIZATION -Dbuild.lib=../../output/lib"

if [ "$TARGET_TEST" != "" ]; then
   TARGET_TEST="-t $TARGET_TEST"
fi

if [ "$isRemote" = "true" ]; then
  export TEST_DATABASE TEST_SERIALIZATION
  $reldir/start-rmi-server $REMOTE_DEBUG_FLAG -use-existent-test-classpath-file
fi


$JAVA_HOME/bin/java $JAVA_OPTS -cp "$CLASSPATH" \
org.jboss.test.messaging.tools.junit.SelectiveTestRunner $TARGET_CLASS $TARGET_TEST

if [ "$isRemote" = "true" ]; then
  $reldir/stop-rmi-server -use-existent-test-classpath-file
fi

