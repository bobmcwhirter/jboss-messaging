<?xml version="1.0" encoding="UTF-8"?>

<!-- =========================================================================================== -->
<!--                                                                                             -->
<!-- JBoss, Home of Professional Open Source                                                     -->
<!-- Copyright 2005, JBoss Inc., and individual contributors as indicated                        -->
<!-- by the @authors tag. See the copyright.txt in the distribution for a                        -->
<!-- full listing of individual contributors.                                                    -->
<!--                                                                                             -->
<!-- This is free software; you can redistribute it and/or modify it                             -->
<!-- under the terms of the GNU Lesser General Public License as                                 -->
<!-- published by the Free Software Foundation; either version 2.1 of                            -->
<!-- the License, or (at your option) any later version.                                         -->
<!--                                                                                             -->
<!-- This software is distributed in the hope that it will be useful,                            -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of                              -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU                            -->
<!-- Lesser General Public License for more details.                                             -->
<!--                                                                                             -->
<!-- You should have received a copy of the GNU Lesser General Public                            -->
<!-- License along with this software; if not, write to the Free                                 -->
<!-- Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA                          -->
<!-- 02110-1301 USA, or see the FSF site: http://www.fsf.org.                                    -->
<!--                                                                                             -->
<!-- =========================================================================================== -->


<!-- =========================================================================================== -->
<!--                                                                                             -->
<!-- $Id$ -->
<!--                                                                                             -->
<!-- =========================================================================================== -->

<project default="tests" name="JBoss Messaging Tests">

   <!--
        'tests' is Messaging's subproject, we're relying on the main project thirdparty and lib
        directories.
   -->
   <property name="project.root" value="${basedir}/.."/>

   <!--
        Import Messaging's properties, paths and everything else.
   -->
   <import file="../build-messaging.xml"/>

   <!-- ======================================================================================== -->
   <!-- Configuration                                                                            -->
   <!-- ======================================================================================== -->

   <property name="build.tests.remote" value="false"/>
   <property name="test.bind.address" value="localhost"/>

   <!--
        Functional tests.
   -->

   <property name="functional.tests.database" value="hsqldb"/>
   <property name="functional.tests.serialization" value="jboss"/>

   <!--
        Stress tests.
   -->

   <property name="stress.tests.database" value="mysql"/>
   <property name="stress.tests.serialization" value="jboss"/>

   <!--
        Project paths.
   -->

   <property name="tests.root" value="${basedir}"/>
   <property name="source.tests.java" value="${tests.root}/src"/>
   <property name="source.tests.stylesheets" value="${source.tests.java}/stylesheets"/>
   <property name="tests.output" value="${tests.root}/output"/>
   <property name="build.tests.classes" value="${tests.output}/classes"/>
   <property name="build.tests.lib" value="${tests.output}/lib"/>
   <property name="build.tests.reports" value="${tests.output}/reports"/>
   <property name="build.tests.stylesheets" value="${tests.output}/stylesheets"/>
   <property name="build.tests.archive" value="jboss-messaging-tests.jar"/>
   <property name="build.tests.ejbarchive" value="jboss-messaging-tests-ejb.jar"/>

   <!--
        JUnit configuration
   -->

   <property name="junit.printsummary" value="true"/>
   <property name="junit.haltonerror" value="false"/>
   <property name="junit.haltonfailure" value="false"/>
   <property name="junit.fork" value="false"/>
   <property name="junit.includeantruntime" value="true"/>
   <property name="junit.timeout" value="600000"/>

   <property name="junit.timeout2" value="300000"/>
   <property name="stress.timeout" value="4800000"/>

   <property name="junit.showoutput" value="true"/>
   <property name="junit.jvm" value=""/>
   <property name="junit.jvm.options" value=""/>
   <property name="junit.formatter.usefile" value="true"/>
   <property name="junit.batchtest.todir" value="${build.tests.reports}"/>
   <property name="junit.batchtest.haltonerror" value="false"/>
   <property name="junit.batchtest.haltonfailure" value="false"/>
   <property name="junit.batchtest.fork" value="false"/>
   <property name="junit.test.haltonfailure" value="false"/>
   <property name="junit.test.haltonerror" value="false"/>

   <!--
        Locally maintained dependencies.
   -->

   <path id="jboss.server.classpath">
      <pathelement location="${jboss.server.lib}/jboss.jar"/>
   </path>

   <property name="jboss.jca.lib" value="${tests.root}/lib"/>
   <path id="jboss.jca.classpath">
      <pathelement path="${jboss.jca.lib}/jboss-jca.jar"/>
      <pathelement path="${jboss.jca.lib}/jboss-local-jdbc.jar"/>
      <pathelement path="${jboss.jca.lib}/jboss-common-jdbc-wrapper.jar"/>
      <pathelement path="${jboss.jca.lib}/jms-ra.jar"/>
   </path>

   <property name="jboss.mbeans.lib" value="${tests.root}/lib"/>
   <path id="jboss.mbeans.classpath">
      <pathelement path="${jboss.mbeans.lib}/jboss-mbeans.jar"/>
   </path>

   <!--
       JDBC Drivers.
   -->

   <path id="mysql.jdbc.driver.classpath">
      <pathelement path="${tests.root}/lib/mysql-connector-java-3.1.13-bin.jar"/>
   </path>

   <path id="oracle.jdbc.driver.classpath">
      <pathelement path="${tests.root}/lib/ojdbc14.jar"/>
   </path>

   <path id="postgres.jdbc.driver.classpath">
      <pathelement path="${tests.root}/postgresql-8.1-405.jdbc3.jar"/>
   </path>

   <!--
        The compilation classpath.
   -->

   <path id="test.compilation.classpath">
      <path refid="compilation.classpath"/>
      <path location="../output/lib/jboss-messaging.jar"/>
      <path refid="junit.junit.classpath"/>
      <path refid="hsqldb.hsqldb.classpath"/>
      <path refid="jboss.server.classpath"/> <!-- for org.jboss.jms.jndi.JNDIProviderAdapter -->
      <path refid="jboss.jca.classpath"/>  <!-- for org.jboss.resource.adapter.jdbc.local.LocalManagedConnectionFactory, etc -->
      <path refid="jboss.profiler.jvmti.classpath"/>
   </path>

   <!--
        The execution classpath.
   -->

   <path id="test.execution.classpath">
      <pathelement location="${tests.root}/etc"/>
      <pathelement location="${build.tests.classes}"/>
      <pathelement location="${project.root}/src/etc"/> <!-- server's configuration files -->
      <path refid="test.compilation.classpath"/>
      <path refid="dom4j.dom4j.classpath"/>
      <path refid="apache.log4j.classpath"/>
      <path refid="jboss.mbeans.classpath"/>
      <path refid="jboss.jbossxb.classpath"/>
      <path refid="mysql.jdbc.driver.classpath"/>
      <path refid="oracle.jdbc.driver.classpath"/>
      <path refid="postgres.jdbc.driver.classpath"/>
   </path>


   <!--  This is the complete execution classpath of the CVS latest snapshot -->
<path id="test.execution.classpath2">
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-log4j/lib/log4j.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jboss/profiler/jvmti/lib/jboss-profiler-jvmti.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/oswego-concurrent/lib/concurrent.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/junit/lib/junit.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/javassist/lib/javassist.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/trove/lib/trove.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/dom4j/lib/dom4j.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jgroups/lib/jgroups.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/sun-servlet/lib/servlet-api.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/sun-servlet/lib/jsp-api.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-collections/lib/commons-collections.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-logging/lib/commons-logging.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-httpclient/lib/commons-httpclient.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-pool/lib/commons-pool.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-discovery/lib/commons-discovery.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-fileupload/lib/commons-fileupload.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-lang/lib/commons-lang-2.0.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/catalina-ant.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/catalina.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/el-api.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/jasper-el.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/jasper-jdt.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/jasper.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/jsp-api.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/servlet-api.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/tomcat-coyote.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/tomcat-dbcp.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/tomcat-i18n-es.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/tomcat-i18n-fr.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/apache-tomcat/lib/tomcat-i18n-ja.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/hsqldb.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jcommon-1.0.0-rc1.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jfreechart-1.0.0-rc1.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jboss-remoting.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/mysql-connector-java-3.1.13-bin.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/ojdbc14.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/postgresql-8.1-405.jdbc3.jar"/>
<pathelement location="C:/work/jboss-messaging/output/lib/jboss-messaging.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jboss/common/lib/namespace.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jboss/common/lib/jboss-common.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jboss/common/lib/jboss-archive-browsing.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/thirdparty/jboss/jbossxb/lib/jboss-xml-binding.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/j2ee/output/lib/jboss-j2ee.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/j2ee/output/lib/jboss-jaxrpc.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/j2ee/output/lib/jboss-saaj.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/j2se/output/lib/jboss-j2se.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jmx/output/lib/jboss-jmx.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/mbeans/output/lib/jboss-mbeans.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jboss-serialization.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jboss-aop.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/jms/src/resources/jboss-aspects.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/system/output/lib/jboss-system.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/transaction/output/lib/jboss-transaction.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/naming/output/lib/jnpserver.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/server/output/lib/jboss.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/server/output/lib/jmx-adaptor-plugin.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/security/output/lib/jbosssx.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/connector/output/lib/jboss-jca.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/connector/output/lib/jboss-local-jdbc.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/connector/output/lib/jboss-ha-local-jdbc.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/connector/output/lib/jboss-common-jdbc-wrapper.jar"/>
<pathelement location="C:/work/src/cvs/jboss-head/connector/output/lib/jms-ra.jar"/>
<pathelement location="C:/work/jboss-messaging/tests/etc"/>
<pathelement location="C:/work/jboss-messaging/src/etc"/>
<pathelement location="C:/work/jboss-messaging/output/etc"/>
<pathelement location="C:/work/jboss-messaging/tests/output/classes"/>
  </path>


   <path id="stress.test.execution.classpath">
      <pathelement path="${tests.root}/etc/stress"/>
      <path refid="test.execution.classpath"/>
   </path>

   <!-- ======================================================================================== -->
   <!-- Compilation Tasks                                                                        -->
   <!-- ======================================================================================== -->

   <target name="compile">

      <mkdir dir="${build.tests.classes}"/>
      <javac destdir="${build.tests.classes}"
             optimize="${javac.optimize}"
             target="1.4"
             source="1.4"
             debug="${javac.debug}"
             depend="${javac.depend}"
             verbose="${javac.verbose}"
             deprecation="${javac.deprecation}"
             includeJavaRuntime="${javac.include.java.runtime}"
             failonerror="${javac.fail.onerror}">
         <src path="${source.tests.java}"/>
         <classpath refid="test.compilation.classpath"/>
         <include name="**/*.java"/>
      </javac>

      <!--
           RMI compilation to to create stub for server.
      -->
      <rmic base="${build.tests.classes}"
            includes="**/RMITestServer.class,**/RMINamingDelegate.class">
         <classpath refid="test.compilation.classpath"/>
      </rmic>
   </target>

   <!-- ======================================================================================== -->
   <!-- Archival Tasks                                                                           -->
   <!-- ======================================================================================== -->

   <target name="tests-jar" depends="compile">

      <mkdir dir="${build.tests.lib}"/>
      <jar jarfile="${build.tests.lib}/${build.tests.archive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/**"/>
         </fileset>
      </jar>
   </target>

   <!-- ======================================================================================== -->
   <!-- Execution Helper Tasks                                                                   -->
   <!-- ======================================================================================== -->

   <target name="prepare-testdirs">
      <mkdir dir="${build.tests.reports}"/>
      <mkdir dir="${tests.output}/logs"/>
   </target>

   <target name="clear-test-logs" unless="test.logs.cleared">

      <!-- At the beginning of a test run, clean up the logs, since log4j runs in "append" mode -->
      <echo message="Cleaning test logs ${tests.output}/logs/*.log"/>
      <delete quiet="true">
         <fileset dir="${tests.output}/logs" includes="*.log"/>
      </delete>
      <property name="test.logs.cleared" value="true"/>
   </target>

   <target name="start-rmi-server" description="Starts the RMI server used by remote tests">

      <java classname="org.jboss.test.messaging.tools.jmx.rmi.RMITestServer" fork="true" spawn="true">
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="remote.test.suffix" value="-remote"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=rmiserver"/>
         -->
         <classpath refid="test.execution.classpath"/>
      </java>
   </target>

   <target name="start-rmi-server-stress" description="Starts the RMI server used by remote stress tests">

      <java classname="org.jboss.test.messaging.tools.jmx.rmi.RMITestServer" fork="true" spawn="true">
         <jvmarg value="-Xmx768M"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="remote.test.suffix" value="-remote"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <sysproperty key="test.serialization" value="${stress.tests.serialization}"/>
         <!-- <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=rmiserver"/> -->
         <classpath refid="stress.test.execution.classpath"/>
      </java>
   </target>

   <target name="stop-rmi-server" description="Stops the RMI server used by remote tests">
      <java classname="org.jboss.test.messaging.tools.jmx.rmi.StopRMIServer"
            classpathref="test.execution.classpath"/>
   </target>

   <!-- ======================================================================================== -->
   <!-- Test Execution Tasks                                                                     -->
   <!-- ======================================================================================== -->

   <target name="tests" depends="tests-jar, prepare-testdirs, clear-test-logs">
      <antcall target="crash-tests"/>
      <antcall target="invm-tests"/>
      <antcall target="remote-tests"/>
   </target>

   <target name="stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs">
      <antcall target="invm-stress-tests"/>
      <antcall target="remote-stress-tests"/>
   </target>

   <target name="invm-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs all available tests an in-VM configuration">

      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <sysproperty key="build.lib" value="${build.lib}"/>
         <jvmarg value="-Xmx1024M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->


               <!--
               <include name="**/messaging/core/paging/**/*Test.class"/>
               <include name="**/messaging/core/plugin/**/*Test.class"/>
               -->

               <include name="**/messaging/core/**/*Test.class"/>
               <include name="**/messaging/jms/**/*Test.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="**/jms/crash/*Test.class"/>
               <exclude name="**/jms/MemLeakTest.class"/>
               <!-- TODO Exclude all distributed tests until after 1.0 release -->
               <exclude name="**/messaging/core/distributed/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="memory-leak-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs memory-leak tests using JBossProfiler in-VM configuration">

      <property name="ostarget" value="windows"/>
      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <sysproperty key="build.lib" value="${build.lib}"/>
         <jvmarg value="-Xmx512M"/>
         <jvmarg value="-agentpath:${jboss.profiler.jvmti.lib}/bin/windows/jbossAgent.dll"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="**/jms/MemLeakTest.class"/>
               <!-- TODO Exclude all distributed tests until after 1.0 release -->
               <exclude name="**/messaging/core/distributed/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="ref-test" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs all available tests an in-VM configuration">

      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <sysproperty key="build.lib" value="${build.lib}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="**/messaging/jms/ReferenceableTest.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="**/jms/crash/*Test.class"/>
               <exclude name="**/jms/MemLeakTest.class"/>
               <!-- TODO Exclude all distributed tests until after 1.0 release -->
               <exclude name="**/messaging/core/distributed/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="invm-stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs all stress tests in an in-VM configuration">

      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${stress.timeout}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <sysproperty key="test.serialization" value="${stress.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath refid="stress.test.execution.classpath"/>
         <sysproperty key="messaging-test-configuration" value="StressInVM"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}" extension="-StressInVM.xml"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/jms/stress/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="remote-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs remotely all tests for which it makes sense to run remotely">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server"/>
      <mkdir dir="${build.tests.reports}"/>
      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="yes"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.execution.classpath"/>
            <pathelement location="${tests.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="Remote"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>

         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="org/jboss/test/messaging/jms/**/*Test.class"/>
               <exclude name="org/jboss/test/messaging/jms/stress/**"/>
               <exclude name="org/jboss/test/messaging/jms/server/**"/>
               <exclude name="org/jboss/test/messaging/jms/persistence/**"/>
               <exclude name="org/jboss/test/messaging/jms/ReferencingTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/PersistenceTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/crash/*Test.class"/>
               <exclude name="org/jboss/test/messaging/jms/ManualCrashTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/MemLeakTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/ManifestTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/XATransactionTest.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="remote-stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs remotely all stress tests for which it makes sense to run remotely">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server-stress"/>
      <mkdir dir="${build.tests.reports}"/>
      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="yes"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${stress.timeout}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <sysproperty key="test.serialization" value="${stress.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <!-- <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=unittest"/> -->
         <classpath>
            <path refid="stress.test.execution.classpath"/>
            <pathelement location="${tests.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="StressRemote"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}" extension="-StressRemote.xml"/>

         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="org/jboss/test/messaging/jms/stress/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="crash-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs crash tests">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
         <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashNegativeLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashZeroLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashLargeLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.CallbackFailureTest"/>
      </antcall>

   </target>


   <target name="crash-test" description="Runs crash test">

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="yes"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.execution.classpath"/>
            <pathelement location="${tests.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="Crash"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
                    usefile="${junit.formatter.usefile}" extension="-Crash.xml"/>

         <test name="${crash.test.name}"
               fork="true"
               todir="${junit.batchtest.todir}"
               haltonfailure="${junit.test.haltonfailure}"
               haltonerror="${junit.test.haltonerror}">
         </test>

      </junit>

   </target>


   <target name="jmstests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs the jms tests only">

      <display-path path="test.execution.classpath"/>
      <antcall target="start-rmi-server"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/jms/**/*Test.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="org/jboss/test/messaging/jms/ManifestTest.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="messagetests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs the jms tests only">

      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/jms/message/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="coretests" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs the jms tests only">

      <display-path path="test.execution.classpath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/**/*Test.class"/>
               <exclude name="**/messaging/jms/**"/>
            </fileset>
         </batchtest>
      </junit>
      <antcall target="stop-rmi-server"/>
   </target>

   <target name="test" depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs a single test, specified by its FQ class name via 'test.classname'">

      <fail unless="test.classname"
            message="To run a single test, use: ./build.sh test -Dtest.classname=org.package.MyTest"/>
      <echo>Module root is:${module.root}</echo>
      <antcall target="start-rmi-server"/>
      <property name="test.classname" value="dummy"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${tests.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="test.serialization" value="${functional.tests.serialization}"/>
         <!--
            <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"/>
         -->
         <jvmarg value="-Xmx1024M"/>
         <classpath refid="test.execution.classpath"/>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <test name="${test.classname}"
               fork="false"
               todir="${junit.batchtest.todir}"
               haltonfailure="${junit.test.haltonfailure}"
               haltonerror="${junit.test.haltonerror}">
         </test>
      </junit>
      <antcall target="stop-rmi-server"/>
   </target>

   <!-- ======================================================================================== -->
   <!-- Report Tasks                                                                             -->
   <!-- ======================================================================================== -->

   <target name="copy-stylesheets">
      <mkdir dir="${build.tests.stylesheets}"/>
      <copy todir="${build.tests.stylesheets}" filtering="yes">
         <fileset dir="${source.tests.stylesheets}">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <target name="compile-report" depends="copy-stylesheets">
      <mkdir dir="${build.tests.reports}/html"/>
      <junitreport todir="${build.tests.reports}">
         <fileset dir="${build.tests.reports}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
                 todir="${build.tests.reports}/html"
                 styledir="${build.tests.stylesheets}"/>
      </junitreport>
   </target>

   <target name="report" depends="tests, copy-stylesheets, compile-report"/>

   <target name="remote-tests-report" depends="remote-tests, copy-stylesheets, compile-report"/>

   <target name="jmsreport" depends="jmstests, copy-stylesheets, compile-report"/>

   <target name="messagereport" depends="messagetests, copy-stylesheets, compile-report"/>

   <target name="corereport" depends="coretests, copy-stylesheets, compile-report"/>

   <target name="stressreport" depends="stress-tests, copy-stylesheets, compile-report"/>

   <target name="functional-tests" depends="tests"/>

   <!-- ======================================================================================== -->
   <!-- Cleaning Tasks                                                                           -->
   <!-- ======================================================================================== -->

   <target name="clean">
      <delete dir="${tests.output}"/>
      <delete file="./bin/.test.execution.classpath"/>
   </target>

   <!-- ======================================================================================== -->
   <!-- Tasks required by bin/runtest                                                            -->
   <!-- ======================================================================================== -->

   <property name="test.execution.classpath.file" value=".test.execution.classpath"/>

   <target name="get-test-execution-classpath">
      <echo message="${test.execution.classpath.file}"/>
      <!--
      <pathconvert refid="test.execution.classpath" targetos="unix" pathsep=";"
                   property="test.execution.classpath.unix"/>
                   -->
      <pathconvert refid="test.execution.classpath" targetos="windows"
                   property="test.execution.classpath.unix"/>
      <echo message="${test.execution.classpath.unix}" file="${test.execution.classpath.file}"/>
   </target>

   <!-- ======================================================================================== -->
   <!-- Miscellaneous                                                                            -->
   <!-- ======================================================================================== -->

   <target name="tests-ejb-jar"
           depends="compile"
           description="Creates the ejb jar file containing the test ejb and mdb for testing jms from within a managed environment">

      <mkdir dir="${build.tests.lib}"/>
      <mkdir dir="${build.tests.classes}/META-INF"/>
      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/jboss.xml"
            tofile="${build.tests.classes}/META-INF/jboss.xml"/>
      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/ejb-jar.xml"
            tofile="${build.tests.classes}/META-INF/ejb-jar.xml"/>
      <!-- Build the tests ejb jar -->
      <jar jarfile="${build.tests.lib}/${build.tests.ejbarchive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/jms/managed/**"/>
         </fileset>
         <fileset dir="${build.tests.classes}">
            <include name="META-INF/**"/>
         </fileset>
      </jar>
   </target>

   <target name="deployejb" depends="tests-ejb-jar">
      <copy file="${build.tests.lib}/${build.tests.ejbarchive}"
            todir="${ENV.JBOSS_HOME}/server/default/deploy"/>
   </target>

   <target name="undeployejb">
      <delete file="${ENV.JBOSS_HOME}/server/default/deploy/${build.tests.ejbarchive}"/>
   </target>

   <target name="x">
       <display-path path="test.execution.classpath"/>
   </target>



</project>

