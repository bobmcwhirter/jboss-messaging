<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY libraries SYSTEM "../../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id$ -->

<project default="tests" name="JBoss/Messaging">

   <!-- overridden to resolve thirdparty & module deps -->
   <dirname property="remote.root" file="${basedir}"/>
   <dirname property="project.root" file="${remote.root}"/>

   <import file="../../tools/etc/buildmagic/build-common.xml"/>


   <!-- ================================================================== -->
   <!-- Configuration                                                      -->
   <!-- ================================================================== -->

   <!-- Module name(s) & version -->
   <property name="module.name" value="jms"/>
   <property name="module.Name" value="JBoss Messaging"/>
   <property name="module.version" value="1.0.0"/>
   
   
   <property environment="ENV"/>

   <!-- ========= -->
   <!-- Libraries -->
   <!-- ========= -->
   &libraries;

   <!--
       Sometimes I need to locally patch a library and use the local version (src/resources),
       until the change makes it to thirdparty. This is how you can locally override a library.
       To use the thirdparty library, just comment out the path definition below.
   -->

   <!--
   <path id="jgroups.jgroups.classpath">
      <pathelement path="${module.root}/../src/resources/jgroups-core.jar"/>
   </path>
   -->

   <!-- The combined library classpath -->
   <path id="library.classpath">
      <path refid="apache.log4j.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="trove.classpath"/>
      <path refid="dom4j.dom4j.classpath"/>
      <path refid="jgroups.jgroups.classpath"/>
      <path refid="gnu.regexp.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="apache.commons.classpath"/>

      <path location="../src/resources/hsqldb.jar"/>      
      <path location="../src/resources/jcommon-1.0.0-rc1.jar"/> 
      <path location="../src/resources/jfreechart-1.0.0-rc1.jar"/> 
      
      
   </path>

   <!-- ======= -->
   <!-- Modules -->
   <!-- ======= -->
   &modules;

   <!--
       Sometimes I need to locally patch a library and use the local version (src/resources),
       until the change makes it to thridpary. This is how you can locally override a library.
       To use the thirdparty library, just comment out the path definition below.
   -->

   <!-- The combined dependent module classpath -->
   <path id="dependentmodule.classpath">
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.jms.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.j2se.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.mbeans.classpath"/>
      <path refid="jboss.remoting.classpath"/>
      <path refid="jboss.serialization.classpath"/>
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.transaction.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.server.classpath"/>

      <!-- these are only required to compile test support -->
      <path refid="jboss.jca.classpath"/>
      
   </path>




   <!-- ===== -->
   <!-- Tasks -->
   <!-- ===== -->

   <property name="source.tests.java" value="${module.source}"/>
   <property name="source.tests.stylesheets" value="${module.source}/stylesheets"/>
   <property name="build.tests.classes" value="${module.output}/classes"/>
   <property name="build.tests.lib" value="${module.output}/lib"/>
   <property name="build.tests.reports" value="${module.output}/reports"/>
   <property name="build.tests.stylesheets" value="${module.output}/stylesheets"/>
   <property name="build.performance.tests.output" value="${module.output}/reports/performance"/>
   <property name="build.tests.archive" value="jboss-messaging-tests.jar"/>
   <property name="build.tests.ejbarchive" value="jboss-messaging-tests-ejb.jar"/>   
   <property name="perf.jar" value="jboss-messaging-perf.jar"/>
   <property name="build.tests.remote" value="false"/>

   <path id="test.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
      <pathelement path="${module.root}/etc"/>
      <pathelement path="${module.root}/../src/etc"/>
   </path>


   <!-- Compile all test files -->
   <target name="compile">
      <mkdir dir="${build.tests.classes}"/>
      <javac destdir="${build.tests.classes}"
         optimize="${javac.optimize}"
         target="1.4"
         source="1.4"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeAntRuntime="${javac.include.ant.runtime}"
         includeJavaRuntime="${javac.include.java.runtime}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.tests.java}"/>
         <classpath refid="test.classpath"/>
         <include name="**/*.java"/>
      </javac>
   </target>


   <target name="tests-jar"
           depends="compile"
           description="Creates the jar file with all the tests">

      <mkdir dir="${build.tests.lib}"/>

      <!-- Build the tests jar -->
      <jar jarfile="${build.tests.lib}/${build.tests.archive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/**"/>            
         </fileset>
      </jar>
   </target>

   <!--
      The values from imported files or set by the calling ant tasks will take precedence over
      the values specified below.

      Specifically, these value are overriden by those read from ./build.properties!
   -->
   <property name="junit.printsummary" value="true"/>
   <property name="junit.haltonerror" value="false"/>
   <property name="junit.haltonfailure" value="false"/>
   <property name="junit.fork" value="true"/>
   <property name="junit.includeantruntime" value="true"/>
   <property name="junit.timeout" value="2400000"/>
   
   
   <property name="junit.timeout2" value="2400000"/>

   <property name="junit.showoutput" value="true"/>
   <property name="junit.jvm" value=""/>
   <property name="junit.jvm.options" value=""/>
   <property name="junit.formatter.usefile" value="true"/>
   <property name="junit.batchtest.todir" value="${build.tests.reports}"/>
   <property name="junit.batchtest.haltonerror" value="false"/>
   <property name="junit.batchtest.haltonfailure" value="false"/>
   <property name="junit.batchtest.fork" value="true"/>
   <property name="junit.test.haltonfailure" value="false"/>
   <property name="junit.test.haltonerror" value="false"/>

   <target name="prepare-testdirs"
           description="Prepares the directory structure required by a test run">
      <mkdir dir="${build.tests.reports}"/>
   </target>

   <target name="tests"
           depends="tests-jar, prepare-testdirs"
           description="Runs all available tests">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <pathelement location="${module.root}/etc"/>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">

               <include name="**/messaging/**/*Test.class"/>
               
               <exclude name="**/messaging/**/performance/**"/>
               
               <exclude name="**/jms/managed/**"/>
               <exclude name="**/jms/**/perf/**"/>
            </fileset>
         </batchtest>
      </junit>
   </target>
   
   <target name="jmstests"
           depends="tests-jar, prepare-testdirs"
           description="Runs the jms tests only">

      <antcall target="print-testclasspath"/>
      
      <echo message="${junit.timeout2}"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <pathelement location="${module.root}/etc"/>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">

               <include name="**/messaging/jms/*Test.class"/>
               <exclude name="**/jms/managed/**"/>
               <exclude name="**/jms/**/perf/**"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="coretests"
           depends="tests-jar, prepare-testdirs"
           description="Runs the jms tests only">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <pathelement location="${module.root}/etc"/>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">

               <include name="**/messaging/**/*Test.class"/>
               <!-- <include name="org/jboss/test/messaging/core/distributed/ReliableDistributedQueueTest.class"/> -->

               <exclude name="**/messaging/**/performance/**"/>
               <exclude name="**/messaging/jms/**"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="test"
           depends="tests-jar, prepare-testdirs"
           description="Runs a single test, specified by its FQ class name via 'test.classname'">

      <fail unless="test.classname"
            message="To run a single test, use: ./build.sh test -Dtest.classname=org.package.MyTest"/>

            <echo>Module root is:${module.root}</echo>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
             
            
           <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"/>
	 -->
        
         <jvmarg value="-Xmx1024M"/>
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <classpath>
            <pathelement location="${module.root}/etc"/>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <!--
         <test name="${test.classname}"
               fork="false"
               todir="${junit.batchtest.todir}"
               haltonfailure="${junit.test.haltonfailure}"
               haltonerror="${junit.test.haltonerror}">
         </test>
         -->
         <test name="${test.classname}"
	                fork="${junit.batchtest.fork}"
	                todir="${junit.batchtest.todir}"
	                haltonfailure="${junit.test.haltonfailure}"
	                haltonerror="${junit.test.haltonerror}">
         </test>
      </junit>
   </target>
   

   <target name="compile-stylesheets">
      <mkdir dir="${build.tests.stylesheets}"/>
      <copy todir="${build.tests.stylesheets}" filtering="yes">
         <fileset dir="${source.tests.stylesheets}">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <target name="report" depends="tests, compile-stylesheets">
      <mkdir dir="${build.tests.reports}/html"/>

      <junitreport todir="${build.tests.reports}">
         <fileset dir="${build.tests.reports}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
            todir="${build.tests.reports}/html"
            styledir="${build.tests.stylesheets}"
            />
      </junitreport>
   </target>
   
   <target name="jmsreport" depends="jmstests, compile-stylesheets">
      <mkdir dir="${build.tests.reports}/html"/>

      <junitreport todir="${build.tests.reports}">
         <fileset dir="${build.tests.reports}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
            todir="${build.tests.reports}/html"
            styledir="${build.tests.stylesheets}"
            />
      </junitreport>
   </target>
   
	<target name="corereport" depends="coretests, compile-stylesheets">
	 <mkdir dir="${build.tests.reports}/html"/>

	 <junitreport todir="${build.tests.reports}">
	    <fileset dir="${build.tests.reports}">
	       <include name="TEST-*.xml"/>
	    </fileset>
	    <report format="frames"
	       todir="${build.tests.reports}/html"
	       styledir="${build.tests.stylesheets}"
	       />
	 </junitreport>
   </target>
   
   <target name="build-report" >
   	 <junitreport todir="${build.tests.reports}">
   	    <fileset dir="${build.tests.reports}">
   	       <include name="TEST-*.xml"/>
   	    </fileset>
   	    <report format="frames"
   	       todir="${build.tests.reports}/html"
   	       styledir="${build.tests.stylesheets}"
   	       />
	 </junitreport>
   </target>

   <target name="functional-tests" depends="tests"/>

   <!-- Clean up all build output -->
   <target name="clean"
      description="Cleans up most generated files.">
      <delete dir="${module.output}"/>
   </target>

   <target name="clobber" depends="clean"/>

   <target name="display-path">
      <pathconvert refid="dependentmodule.classpath" targetos="unix" property="path.representation"/>
      <echo message="${path.representation}"/>
   </target>


  <target name="tests-ejb-jar"
           depends="compile"
           description="Creates the ejb jar file containing the test ejb and mdb for testing jms from within a managed environment">

      <mkdir dir="${build.tests.lib}"/>
      <mkdir dir="${build.tests.classes}/META-INF"/>

      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/jboss.xml"
         tofile="${build.tests.classes}/META-INF/jboss.xml"/>
      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/ejb-jar.xml"
         tofile="${build.tests.classes}/META-INF/ejb-jar.xml"/>

      <!-- Build the tests ejb jar -->
      <jar jarfile="${build.tests.lib}/${build.tests.ejbarchive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/jms/managed/**"/>
         </fileset>
         <fileset dir="${build.tests.classes}">
            <include name="META-INF/**"/>
         </fileset>
      </jar>
   </target>
   
   
     <target name="deployejb" depends="tests-ejb-jar">
         <copy file="${build.tests.lib}/${build.tests.ejbarchive}"
            todir="${ENV.JBOSS_HOME}/server/default/deploy"/>
      </target>
   
      <target name="undeployejb">
         <delete file="${ENV.JBOSS_HOME}/server/default/deploy/${build.tests.ejbarchive}"/>
   </target>
   
   

   <target name="performance-tests"
           depends="tests-jar, prepare-testdirs"
           description="Runs performance tests">      

      <junit printsummary="${junit.printsummary}"
             fork="true"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="3600000">
             
         <!--
         <jvmarg value="-Xdebug"/>
         <jvmarg value="-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"/>         
         -->
         <jvmarg value="-Xmx512M"/>
         
         <classpath>
            <pathelement location="${module.root}/etc"/>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <test name="org.jboss.test.messaging.jms.perf.PerfRunner"
               fork="${junit.batchtest.fork}"
               todir="${junit.batchtest.todir}"
               haltonfailure="false"
               haltonerror="false">              
         </test>
      </junit>
   </target> 
   
   
   <target name="perfchart" depends="tests-jar">      
      	<mkdir dir="perf-output"/>
      	
      	<java classname="org.jboss.test.messaging.jms.perf.chart.PerfCharter" fork="true">
      	   <jvmarg value="-Xmx512M"/>
              <classpath>
   	          <pathelement location="${module.root}/etc"/>
   	          <path refid="test.classpath"/>
   	          <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
            </classpath>
      	</java>      
   </target>
   
   <target name="perf-jar"
	      depends="compile"
	      description="Creates the jar for the performance tests">
	      
	 <mkdir dir="${build.tests.lib}"/>

	 <!-- Build the perf jar -->
	 <jar jarfile="${build.tests.lib}/${perf.jar}">
	    <fileset dir="${build.tests.classes}">
	       <include name="org/jboss/test/messaging/jms/perf/**"/>	       
	       <exclude name="org/jboss/test/messaging/jms/perf/PerfTest.class"/>
	    </fileset>
	 </jar>
	 	
   </target>
     

   <target name="print-testclasspath">
      <pathconvert targetos="unix" property="test.classpath.property" refid="test.classpath"/>
      <echo message="${test.classpath.property}"/>
   </target>



</project>

