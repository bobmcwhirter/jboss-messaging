<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
   <!ENTITY libraries SYSTEM "../../thirdparty/libraries.ent">
   <!ENTITY modules SYSTEM "../../tools/etc/buildmagic/modules.ent">
]>

<!-- ====================================================================== -->
<!--                                                                        -->
<!--  JBoss, the OpenSource J2EE webOS                                      -->
<!--                                                                        -->
<!--  Distributable under LGPL license.                                     -->
<!--  See terms of license at http://www.gnu.org.                           -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- $Id$ -->

<project default="tests" name="JBoss/Messaging">

   <!-- overridden to resolve thirdparty & module deps -->
   <dirname property="remote.root" file="${basedir}"/>
   <dirname property="project.root" file="${remote.root}"/>

   <import file="../../tools/etc/buildmagic/build-common.xml"/>

   <!-- ================================================================== -->
   <!-- Configuration                                                      -->
   <!-- ================================================================== -->

   <!-- Module name(s) & version -->
   <property name="module.name" value="jms"/>
   <property name="module.Name" value="JBoss Messaging"/>
   <property name="module.version" value="1.0.0"/>


   <property environment="ENV"/>

   <!-- ========= -->
   <!-- Libraries -->
   <!-- ========= -->
   &libraries;

   <!--
       Sometimes I need to locally patch a library and use the local version (src/resources),
       until the change makes it to thirdparty. This is how you can locally override a library.
       To use the thirdparty library, just comment out the path definition below.
   -->

   <!--
   <path id="jgroups.jgroups.classpath">
      <pathelement path="${module.root}/../src/resources/jgroups-core.jar"/>
   </path>
   -->

   <!-- The combined library classpath -->
   <path id="library.classpath">
      <path refid="apache.log4j.classpath"/>
      <path refid="oswego.concurrent.classpath"/>
      <path refid="junit.junit.classpath"/>
      <path refid="javassist.classpath"/>
      <path refid="trove.classpath"/>
      <path refid="dom4j.dom4j.classpath"/>
      <path refid="jgroups.jgroups.classpath"/>
      <path refid="sun.servlet.classpath"/>
      <path refid="apache.commons.classpath"/>
      <path refid="apache.tomcat.classpath"/>


      <path location="../src/resources/hsqldb.jar"/>
      <path location="../src/resources/jcommon-1.0.0-rc1.jar"/>
      <path location="../src/resources/jfreechart-1.0.0-rc1.jar"/>
      <path location="../src/resources/jboss-remoting.jar"/>
      <path location="../src/resources/jboss-serialization.jar"/>
      <!-- MySQl JDBC driver -->
      <path location="../src/resources/mysql-connector-java-3.0.17-ga-bin.jar"/>
      <!-- Oracle JDBC driver -->
      <path location="../src/resources/ojdbc14.jar"/>
      <!-- PostgreSQL JDBC driver -->
      <path location="../src/resources/postgresql-8.1-405.jdbc3.jar"/>

   </path>

   <!-- ======= -->
   <!-- Modules -->
   <!-- ======= -->
   &modules;

   <!--
       Sometimes I need to locally patch a library and use the local version (src/resources),
       until the change makes it to thridpary. This is how you can locally override a library.
       To use the thirdparty library, just comment out the path definition below.
   -->

   <!-- The combined dependent module classpath -->
   <path id="dependentmodule.classpath">
      <path refid="jboss.jms.classpath"/>
      <path refid="jboss.common.classpath"/>
      <path refid="jboss.j2ee.classpath"/>
      <path refid="jboss.j2se.classpath"/>
      <path refid="jboss.jmx.classpath"/>
      <path refid="jboss.mbeans.classpath"/>
      <!-- <path refid="jboss.serialization.classpath"/> -->
      <path refid="jboss.aop.classpath"/>
      <path refid="jboss.aspects.classpath"/>
      <path refid="jboss.system.classpath"/>
      <path refid="jboss.transaction.classpath"/>
      <path refid="jboss.naming.classpath"/>
      <path refid="jboss.server.classpath"/>
      <!-- <path refid="jboss.remoting.classpath"/> -->
      <path refid="jboss.security.classpath"/>

      <!-- these are only required to compile test support -->
      <path refid="jboss.jca.classpath"/>

      <!-- jms-ra.jar -->
      <path location="${jboss.jca.lib}/jms-ra.jar"/>

   </path>

   <!-- ===== -->
   <!-- Tasks -->
   <!-- ===== -->

   <property name="source.tests.java" value="${module.source}"/>
   <property name="source.tests.stylesheets" value="${module.source}/stylesheets"/>
   <property name="build.tests.classes" value="${module.output}/classes"/>
   <property name="build.tests.lib" value="${module.output}/lib"/>
   <property name="build.tests.reports" value="${module.output}/reports"/>
   <property name="build.tests.stylesheets" value="${module.output}/stylesheets"/>
   <property name="build.tests.archive" value="jboss-messaging-tests.jar"/>
   <property name="build.tests.ejbarchive" value="jboss-messaging-tests-ejb.jar"/>
   <property name="build.tests.remote" value="false"/>
   <property name="test.bind.address" value="localhost"/>
   <property name="functional.tests.database" value="hsqldb"/>
   <property name="stress.tests.database" value="mysql"/>

   <path id="test.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
      <pathelement path="${module.root}/etc"/>
      <pathelement path="${module.root}/../src/etc"/>
      <pathelement path="${module.root}/../output/etc"/>
   </path>

   <path id="stress.test.classpath">
      <path refid="library.classpath"/>
      <path refid="dependentmodule.classpath"/>
      <pathelement path="${module.root}/etc/stress"/>
      <pathelement path="${module.root}/etc"/>
      <pathelement path="${module.root}/../src/etc"/>
      <pathelement path="${module.root}/../output/etc"/>
   </path>

   <!-- Compile all test files -->
   <target name="compile">

      <mkdir dir="${build.tests.classes}"/>

      <javac destdir="${build.tests.classes}"
         optimize="${javac.optimize}"
         target="1.4"
         source="1.4"
         debug="${javac.debug}"
         depend="${javac.depend}"
         verbose="${javac.verbose}"
         deprecation="${javac.deprecation}"
         includeJavaRuntime="${javac.include.java.runtime}"
         failonerror="${javac.fail.onerror}">
         <src path="${source.tests.java}"/>
         <classpath refid="test.classpath"/>
         <include name="**/*.java"/>
      </javac>

      <!-- Call rmi compiler to create stub for server -->
      <rmic base="${build.tests.classes}" includes="**/RMITestServer.class,**/RMINamingDelegate.class">
         <classpath refid="test.classpath"/>
      </rmic>
   </target>

   <target name="tests-jar"
           depends="compile"
           description="Creates the jar file with all the tests">

      <mkdir dir="${build.tests.lib}"/>

      <!-- Build the tests jar -->
      <jar jarfile="${build.tests.lib}/${build.tests.archive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/**"/>
         </fileset>
      </jar>
   </target>

   <!--
      The values from imported files or set by the calling ant tasks will take precedence over
      the values specified below.

      Specifically, these value are overriden by those read from ./build.properties!
   -->
   <property name="junit.printsummary" value="true"/>
   <property name="junit.haltonerror" value="false"/>
   <property name="junit.haltonfailure" value="false"/>
   <property name="junit.fork" value="false"/>
   <property name="junit.includeantruntime" value="true"/>
   <property name="junit.timeout" value="600000"/>

   <property name="junit.timeout2" value="300000"/>

   <property name="stress.timeout" value="4800000"/>

   <property name="junit.showoutput" value="true"/>
   <property name="junit.jvm" value=""/>
   <property name="junit.jvm.options" value=""/>
   <property name="junit.formatter.usefile" value="true"/>
   <property name="junit.batchtest.todir" value="${build.tests.reports}"/>
   <property name="junit.batchtest.haltonerror" value="false"/>
   <property name="junit.batchtest.haltonfailure" value="false"/>
   <property name="junit.batchtest.fork" value="false"/>
   <property name="junit.test.haltonfailure" value="false"/>
   <property name="junit.test.haltonerror" value="false"/>

   <target name="prepare-testdirs"
           description="Prepares the directory structure required by a test run">
      <mkdir dir="${build.tests.reports}"/>
      <mkdir dir="${module.output}/logs"/>
   </target>

   <target name="clear-test-logs" unless="test.logs.cleared">
      <!-- At the beginning of a test run, clean up the logs, since log4j runs in "append" mode -->
      <echo message="Cleaning test logs ${module.output}/logs/*.log"/>
      <delete quiet="true">
         <fileset dir="${module.output}/logs" includes="*.log"/>
      </delete>
      <property name="test.logs.cleared" value="true"/>
   </target>

   <target name="start-rmi-server"
           description="Starts the RMI server used by remote tests">
      <java classname="org.jboss.test.messaging.tools.jmx.rmi.RMITestServer" fork="true" spawn="true">
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="remote.test.suffix" value="-remote"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=rmiserver"/>
         -->
         <classpath>
            <pathelement location="${module.output}/classes"/>
            <pathelement location="${module.root}/../output/classes"/>
            <path refid="test.classpath"/>
         </classpath>
      </java>
   </target>

   <target name="start-rmi-server-stress"
           description="Starts the RMI server used by remote stress tests">
      <java classname="org.jboss.test.messaging.tools.jmx.rmi.RMITestServer" fork="true" spawn="true">
         <jvmarg value="-Xmx768M"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="remote.test.suffix" value="-remote"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=rmiserver"/>
         -->
         <classpath>
            <pathelement location="${module.output}/classes"/>
            <pathelement location="${module.root}/../output/classes"/>
            <path refid="stress.test.classpath"/>
         </classpath>
      </java>
   </target>

   <target name="stop-rmi-server" description="Stops the RMI server used by remote tests">
      <java classname="org.jboss.test.messaging.tools.jmx.rmi.StopRMIServer">
         <classpath>
            <path refid="jboss.common.classpath"/>
            <path refid="jboss.j2ee.classpath"/>
            <path location="../src/resources/jboss-remoting.jar"/>
            <!-- <path refid="jboss.remoting.classpath"/> -->
            <path refid="jboss.j2se.classpath"/>
            <path refid="jboss.system.classpath"/>
            <pathelement location="${module.root}/etc"/>
            <pathelement location="${module.output}/classes"/>
            <pathelement location="${module.root}/../output/classes"/>
         </classpath>
      </java>
   </target>

   <target name="tests" depends="tests-jar, prepare-testdirs, clear-test-logs">
      <antcall target="crash-tests"/>
      <antcall target="invm-tests"/>
      <antcall target="remote-tests"/>
   </target>

   <target name="stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs">
      <antcall target="invm-stress-tests"/>
      <antcall target="remote-stress-tests"/>
   </target>


  <target name="invm-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs all available tests an in-VM configuration">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="${junit.includeantruntime}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${junit.timeout2}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="jboss.jms.lib" value="${jboss.jms.lib}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="**/messaging/**/*Test.class"/>
               <include name="**/messaging/jms/**/*Test.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="**/jms/crash/*Test.class"/>
               <exclude name="**/jms/MemLeakTest.class"/>
               <!-- TODO Exclude all distributed tests until after 1.0 release -->
               <exclude name="**/messaging/core/distributed/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

<target name="ref-test" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs all available tests an in-VM configuration">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="${junit.includeantruntime}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${junit.timeout2}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <sysproperty key="jboss.jms.lib" value="${jboss.jms.lib}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="**/messaging/jms/ReferenceableTest.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="**/jms/crash/*Test.class"/>
               <exclude name="**/jms/MemLeakTest.class"/>
               <!-- TODO Exclude all distributed tests until after 1.0 release -->
               <exclude name="**/messaging/core/distributed/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

  <target name="invm-stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs all stress tests in an in-VM configuration">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="${junit.includeantruntime}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${stress.timeout}">

         <sysproperty key="remote" value="false"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="stress.test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <sysproperty key="messaging-test-configuration" value="StressInVM"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-StressInVM.xml"/>
         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/jms/stress/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="remote-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs remotely all tests for which it makes sense to run remotely">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server"/>
      <mkdir dir="${build.tests.reports}"/>
      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="yes"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${junit.timeout2}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
            <pathelement location="${module.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="Remote"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>

         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <!-- <include name="org/jboss/test/messaging/jms/JMSTest.class"/> -->
               <include name="org/jboss/test/messaging/jms/**/*Test.class"/>
               <exclude name="org/jboss/test/messaging/jms/stress/**"/>
               <exclude name="org/jboss/test/messaging/jms/server/**"/>
               <exclude name="org/jboss/test/messaging/jms/persistence/**"/>
               <exclude name="org/jboss/test/messaging/jms/ReferencingTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/PersistenceTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/crash/*Test.class"/>
               <exclude name="org/jboss/test/messaging/jms/ManualCrashTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/MemLeakTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/ManifestTest.class"/>
               <exclude name="org/jboss/test/messaging/jms/XATransactionTest.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="remote-stress-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs remotely all stress tests for which it makes sense to run remotely">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server-stress"/>
      <mkdir dir="${build.tests.reports}"/>
      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="yes"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${stress.timeout}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${stress.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="stress.test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
            <pathelement location="${module.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="StressRemote"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-StressRemote.xml"/>

         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="org/jboss/test/messaging/jms/stress/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="crash-tests" depends="tests-jar, prepare-testdirs, clear-test-logs"
      description="Runs crash tests">

      <antcall target="stop-rmi-server"/>
      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
         <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashNegativeLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashZeroLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.ClientCrashLargeLeaseTest"/>
      </antcall>

      <antcall target="start-rmi-server"/>

      <antcall target="crash-test">
          <param name="crash.test.name" value="org.jboss.test.messaging.jms.crash.CallbackFailureTest"/>
      </antcall>

   </target>


   <target name="crash-test" description="Runs crash test">

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="yes"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${junit.timeout2}">

         <sysproperty key="remote" value="true"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <!--
         <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_shmem,server=y,suspend=y,address=antjunit"/>
         -->
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
            <pathelement location="${module.root}/output/classes"/>

            <!-- Add this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
            <!--
            <path refid="jboss.test.classpath"/>
            -->
         </classpath>

         <!-- Use this when http://jira.jboss.org/jira/browse/JBAS-2554 is done -->
         <!--
         <sysproperty key="jboss-junit-configuration" value="Remote"/>
         <formatter classname="org.jboss.ant.taskdefs.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Remote.xml"/>
         -->

         <sysproperty key="messaging-test-configuration" value="Crash"/>
         <formatter classname="org.jboss.test.messaging.tools.ant.XMLJUnitMultipleResultFormatter"
            usefile="${junit.formatter.usefile}" extension="-Crash.xml"/>

         <test name="${crash.test.name}"
             fork="true"
             todir="${junit.batchtest.todir}"
             haltonfailure="${junit.test.haltonfailure}"
             haltonerror="${junit.test.haltonerror}">
         </test>

      </junit>

   </target>


   <target name="jmstests"
           depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs the jms tests only">

      <antcall target="print-testclasspath"/>

      <antcall target="start-rmi-server"/>

      <echo message="${junit.timeout2}"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/jms/**/*Test.class"/>
               <exclude name="**/jms/stress/**"/>
               <exclude name="org/jboss/test/messaging/jms/ManifestTest.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="messagetests"
              depends="tests-jar, prepare-testdirs, clear-test-logs"
              description="Runs the jms tests only">

      <antcall target="print-testclasspath"/>

      <echo message="${junit.timeout2}"/>

      <junit printsummary="${junit.printsummary}"
         fork="${junit.fork}"
         includeantruntime="${junit.includeantruntime}"
         haltonerror="${junit.haltonerror}"
         haltonfailure="${junit.haltonfailure}"
         showoutput="${junit.showoutput}"
         timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
            todir="${junit.batchtest.todir}"
            haltonfailure="${junit.batchtest.haltonfailure}"
            haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/jms/message/**/*Test.class"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="coretests"
           depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs the jms tests only">

      <antcall target="print-testclasspath"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <jvmarg value="-Xmx512M"/>
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <batchtest fork="${junit.batchtest.fork}"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.batchtest.haltonfailure}"
                    haltonerror="${junit.batchtest.haltonerror}">
            <formatter type="plain" usefile="${junit.formatter.usefile}"/>
            <fileset dir="${build.tests.classes}">
               <include name="**/messaging/**/*Test.class"/>
               <exclude name="**/messaging/jms/**"/>
            </fileset>
         </batchtest>
      </junit>

      <antcall target="stop-rmi-server"/>

   </target>

   <target name="test"
           depends="tests-jar, prepare-testdirs, clear-test-logs"
           description="Runs a single test, specified by its FQ class name via 'test.classname'">

      <fail unless="test.classname"
            message="To run a single test, use: ./build.sh test -Dtest.classname=org.package.MyTest"/>

            <echo>Module root is:${module.root}</echo>

      <antcall target="start-rmi-server"/>

      <junit printsummary="${junit.printsummary}"
             fork="${junit.fork}"
             includeantruntime="${junit.includeantruntime}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             showoutput="${junit.showoutput}"
             timeout="${junit.timeout2}">
         <sysproperty key="remote" value="${build.tests.remote}"/>
         <sysproperty key="module.output" value="${module.output}"/>
         <sysproperty key="test.bind.address" value="${test.bind.address}"/>
         <sysproperty key="test.database" value="${functional.tests.database}"/>
         <!--
            <jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y"/>
         -->
         <jvmarg value="-Xmx1024M"/>
         <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${build.tests.lib}/${build.tests.archive}"/>
         </classpath>
         <formatter type="xml" usefile="${junit.formatter.usefile}"/>
         <test name="${test.classname}"
                    fork="false"
                    todir="${junit.batchtest.todir}"
                    haltonfailure="${junit.test.haltonfailure}"
                    haltonerror="${junit.test.haltonerror}">
         </test>
      </junit>

      <antcall target="stop-rmi-server"/>
   </target>

   <target name="copy-stylesheets">
      <mkdir dir="${build.tests.stylesheets}"/>
      <copy todir="${build.tests.stylesheets}" filtering="yes">
         <fileset dir="${source.tests.stylesheets}">
            <include name="**/*"/>
         </fileset>
      </copy>
   </target>

   <target name="compile-report" depends="copy-stylesheets">
      <mkdir dir="${build.tests.reports}/html"/>
      <junitreport todir="${build.tests.reports}">
         <fileset dir="${build.tests.reports}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames"
            todir="${build.tests.reports}/html"
            styledir="${build.tests.stylesheets}"/>
      </junitreport>
   </target>

   <target name="report" depends="tests, copy-stylesheets, compile-report"/>

   <target name="remote-tests-report" depends="remote-tests, copy-stylesheets, compile-report"/>

   <target name="jmsreport" depends="jmstests, copy-stylesheets, compile-report"/>

   <target name="messagereport" depends="messagetests, copy-stylesheets, compile-report"/>

   <target name="corereport" depends="coretests, copy-stylesheets, compile-report"/>

   <target name="stressreport" depends="stress-tests, copy-stylesheets, compile-report"/>

   <target name="functional-tests" depends="tests"/>

   <!-- Clean up all build output -->
   <target name="clean"
      description="Cleans up most generated files.">
      <delete dir="${module.output}"/>
   </target>

   <target name="clobber" depends="clean"/>

   <target name="display-path">
      <pathconvert refid="dependentmodule.classpath" targetos="unix" property="path.representation"/>
      <echo message="${path.representation}"/>
   </target>


  <target name="tests-ejb-jar"
           depends="compile"
           description="Creates the ejb jar file containing the test ejb and mdb for testing jms from within a managed environment">

      <mkdir dir="${build.tests.lib}"/>
      <mkdir dir="${build.tests.classes}/META-INF"/>

      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/jboss.xml"
         tofile="${build.tests.classes}/META-INF/jboss.xml"/>
      <copy file="${source.tests.java}/org/jboss/test/messaging/jms/managed/META-INF/ejb-jar.xml"
         tofile="${build.tests.classes}/META-INF/ejb-jar.xml"/>

      <!-- Build the tests ejb jar -->
      <jar jarfile="${build.tests.lib}/${build.tests.ejbarchive}">
         <fileset dir="${build.tests.classes}">
            <include name="org/jboss/test/messaging/jms/managed/**"/>
         </fileset>
         <fileset dir="${build.tests.classes}">
            <include name="META-INF/**"/>
         </fileset>
      </jar>
   </target>


  <target name="deployejb" depends="tests-ejb-jar">
         <copy file="${build.tests.lib}/${build.tests.ejbarchive}"
            todir="${ENV.JBOSS_HOME}/server/default/deploy"/>
      </target>

      <target name="undeployejb">
         <delete file="${ENV.JBOSS_HOME}/server/default/deploy/${build.tests.ejbarchive}"/>
   </target>

   <target name="print-testclasspath">
      <pathconvert targetos="unix" property="test.classpath.property" refid="test.classpath"/>
      <echo message="${test.classpath.property}"/>
   </target>

</project>

